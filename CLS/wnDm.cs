using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using 스마트팩토리.Controls;
using 스마트팩토리.Popup;

namespace 스마트팩토리.CLS
{
    public class wnDm
    {
        wnAdo wAdo = new wnAdo();

        public DataTable fn_TopMenu_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , a.TopName ");
            sb.AppendLine(" from T_TopMenu a ");
            sb.AppendLine(" order by a.SortNo asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_SubMenu_List(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , a.SubID ");
            sb.AppendLine("     , a.SubName ");
            sb.AppendLine("     , a.AsmName ");
            sb.AppendLine(" from T_SubMenu a ");
            sb.AppendLine(" where a.TopID = @TopID ");
            sb.AppendLine("     and a.VIEW_YN = 'Y'  ");
            sb.AppendLine(" order by a.SortNo asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@TopID", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Group_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.GrpID ");
            sb.AppendLine("     , a.GrpName ");
            sb.AppendLine(" from T_Group a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.GrpName asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@p_Level", userLevel);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Group_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.GrpID ");
            sb.AppendLine("     , a.GrpName ");
            sb.AppendLine(" from T_Group a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.GrpID = @GrpID  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@GrpID", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_AllMenu_CheckList(string sGrp)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine("     z.* ");
            sb.AppendLine(" from ( ");
            sb.AppendLine(" select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , '' as SubID ");
            sb.AppendLine("     , a.TopName as MenuName");
            sb.AppendLine("     , a.SortNo as TopSort ");
            sb.AppendLine("     , 0 as SubSort ");
            sb.AppendLine("     , '' as ChkYN ");
            sb.AppendLine("     , (select count(*) from T_GroupSub where TopID = a.TopID and GrpID = @GrpID) as SubCnt ");
            sb.AppendLine(" from T_TopMenu a ");
            sb.AppendLine("     left outer join T_GroupTop g1 on g1.TopID = a.TopID and g1.GrpID = @GrpID ");

            sb.AppendLine(" union all ");

            sb.AppendLine(" select ");
            sb.AppendLine("     a.TopID ");
            sb.AppendLine("     , b.SubID ");
            sb.AppendLine("     , b.SubName as MenuName");
            sb.AppendLine("     , a.SortNo as TopSort ");
            sb.AppendLine("     , b.SortNo as SubSort ");
            sb.AppendLine("     , case when isnull(g2.GrpID, '') = '' then 'N' else 'Y' end as ChkYN ");
            sb.AppendLine("     , 0 as SubCnt ");
            sb.AppendLine(" from T_TopMenu a ");
            sb.AppendLine("     inner join T_SubMenu b on b.TopID = a.TopID ");
            sb.AppendLine("     left outer join T_GroupSub g2 on g2.TopID = b.TopID and g2.SubID = b.SubID and g2.GrpID = @GrpID ");

            sb.AppendLine(" ) z ");
            sb.AppendLine(" order by z.TopSort asc, z.SubSort asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@GrpID", sGrp);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_User_UnCheckList()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine("     a.USER_CODE ");
            sb.AppendLine("     , a.USER_ID ");
            sb.AppendLine("     , a.USER_NAME ");
            sb.AppendLine("     , a.FlgWrite ");
            sb.AppendLine("     , a.FlgPrint ");
            sb.AppendLine("     , isnull(b.GrpID, -1) as GrpID ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join T_GroupUser b on b.USER_CODE = a.USER_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and isnull(b.GrpID, -1) = -1 ");
            sb.AppendLine(" order by a.USER_NAME asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@GrpID", sGrp);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_GroupUser_List(string sGrp)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine("     a.USER_CODE ");
            sb.AppendLine("     , a.USER_ID ");
            sb.AppendLine("     , a.USER_NAME ");
            sb.AppendLine("     , a.FlgWrite ");
            sb.AppendLine("     , a.FlgPrint ");
            sb.AppendLine("     , isnull(b.GrpID, -1) as GrpID ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join T_GroupUser b on b.USER_CODE = a.USER_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and isnull(b.GrpID, -1) = @GrpID ");
            sb.AppendLine(" order by a.USER_NAME asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@GrpID", sGrp);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_User_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , (case when a.USER_SELECT = '1' then '부서별' when a.USER_SELECT = '2' then '담당자별' else '전체' end) as USER_SELECT_NM ");
            sb.AppendLine("     , c.CODE_DESC as USER_DEPT_NM ");
            sb.AppendLine("     , d.CODE_DESC as USER_MAN_NM ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join DEPTCODE c on c.DEPT_CODE = a.USER_DEPT ");
            sb.AppendLine("     left outer join MANCODE d on d.MAN_CODE = a.USER_MAN ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.USER_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_User_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.GrpID ");
            sb.AppendLine("     , d.CODE_DESC ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join T_GroupUser b on b.USER_CODE = a.USER_CODE ");
            sb.AppendLine("     left outer join DEPTCODE d on d.DEPT_CODE = a.USER_DEPT ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.USER_CODE = @USER_CODE  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@USER_CODE", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_UserID_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.GrpID ");
            sb.AppendLine(" from USER_PASSWD a ");
            sb.AppendLine("     left outer join T_GroupUser b on b.USER_CODE = a.USER_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.USER_ID = @USER_ID  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@USER_ID", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_DEPTCODE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from DEPTCODE a ");
            sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.DEPT_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_DEPTCODE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from DEPTCODE a ");
            sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.DEPT_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MANCODE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , d.CODE_DESC as DEPT_NM ");
            sb.AppendLine(" from MANCODE a ");
            sb.AppendLine("     left outer join DEPTCODE d on d.DEPT_CODE = a.DEPT_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.MAN_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MANCODE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from MANCODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.MAN_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MAJORCODE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from MAJORCODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.MAJOR_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MAJORCODE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from MAJORCODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.MAJOR_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_DEALKIND_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from DEALKIND a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.DEAL_KIND asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_DEALKIND_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from DEALKIND a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.DEAL_KIND = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_STORECODE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from N_STORAGE_CODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.STORAGE_CD asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_STORECODE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from N_STORAGE_CODE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STORAGE_CD = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTKIND_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTKIND a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.PRODUCT_KIND asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTKIND_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTKIND a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.PRODUCT_KIND = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTTYPE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTTYPE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.PRODUCT_TYPE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTTYPE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTTYPE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.PRODUCT_TYPE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTCLASS_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTCLASS a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.PRODUCT_CLASS asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCTCLASS_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCTCLASS a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.PRODUCT_CLASS = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_UnitCode_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from UnitCode a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.UNIT_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_UnitCode_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from UnitCode a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.UNIT_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_List_pop(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.CUST_CODE as 코드");
            sb.AppendLine("     , a.CUST_NAME as 거래처명 ");
            sb.AppendLine("     , a.REP_NAME as 대표자 ");
            sb.AppendLine("     , a.COMP_NUM as 사업자번호 ");
            sb.AppendLine("     , a.RES_NUM as 주민번호 ");
            sb.AppendLine("     , a.ZIP_CODE1 as 우편번호 ");
            sb.AppendLine("     , a.ZIP_AREA1 as 주소지역명 ");
            sb.AppendLine("     , a.ZIP_ADDR1 as 주소상세 ");
            sb.AppendLine("     , a.TEL_NUM1 as 전화번호 ");
            sb.AppendLine(" from CUSTOMER a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.CUST_CODE not in (select TOP " + skipSize.ToString() + " a.CUST_CODE ");
            sb.AppendLine("                                 from CUSTOMER a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_List(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from CUSTOMER a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.CUST_CODE not in (select TOP " + skipSize.ToString() + " a.CUST_CODE ");
            sb.AppendLine("                                 from CUSTOMER a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from CUSTOMER a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine("     , b.DEPT_CODE ");
            sb.AppendLine("     , d.CODE_DESC as 부서명 ");
            sb.AppendLine(" from CUSTOMER a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine("     left outer join DEPTCODE d on d.DEPT_CODE = b.DEPT_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.CUST_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MANCODE_List_pop(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select  ");
            sb.AppendLine("     a.MAN_CODE as 코드");
            sb.AppendLine("     , a.CODE_DESC as 사원명 ");
            sb.AppendLine("     , b.CODE_DESC as 부서명 ");
            sb.AppendLine("     , case when isnull(a.MAN_OUTCHK, '0') = '1' then '퇴사' else '' end as 퇴사구분 ");
            sb.AppendLine(" from MANCODE a ");
            sb.AppendLine("     left outer join DEPTCODE b on b.DEPT_CODE = a.DEPT_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by isnull(a.MAN_OUTCHK, '0') asc, a.MAN_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from PRODUCT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_List_pop(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.PRODUCT_CODE as 코드");
            sb.AppendLine("     , a.PRODUCT_NAME as 제품명 ");
            sb.AppendLine("     , a.PRODUCT_SPEC as 규격 ");
            sb.AppendLine("     , a.PRODUCT_NAME_SHORT as 약칭 ");
            sb.AppendLine("     , a.VALID_NUM as 유효기간 ");
            sb.AppendLine("     , isnull(a.PRODUCT_PRICE1, 0) as 표준원가 ");
            sb.AppendLine("     , isnull(a.PRODUCT_PRICE2, 0) as 기준약가 ");

            sb.AppendLine("     , isnull(a.SELLING_PRICE1, 0) as 도매단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE2, 0) as 약국단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE3, 0) as 의원단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE4, 0) as 병원단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE5, 0) as 기타단가 ");
            sb.AppendLine("     , isnull(a.SELLING_PRICE6, 0) as 표준단가 ");

            sb.AppendLine("     , a.HSP_CODE as 의료보험코드 ");
            sb.AppendLine("     , a.의약품표준코드 ");
            sb.AppendLine("     , a.의약품대표코드 ");
            sb.AppendLine("     , a.의약품품목코드 ");
            sb.AppendLine("     , a.의약품제품명 ");
            sb.AppendLine(" from PRODUCT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.PRODUCT_CODE not in (select TOP " + skipSize.ToString() + " a.PRODUCT_CODE ");
            sb.AppendLine("                                 from PRODUCT a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.PRODUCT_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_Detail_Cust(string sCode, string sCust)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine(" from PRODUCT a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = @p_2 and b.제품코드 = a.PRODUCT_CODE ");
            sb.AppendLine(" where a.PRODUCT_CODE = @p_1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sCode);
            sCommand.Parameters.AddWithValue("@p_2", sCust);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUST_CHANGE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from CUST_CHANGE a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.일련번호 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUST_CHANGE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from CUST_CHANGE a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.일련번호 = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_DEPT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.STOCK_DATE ");
            sb.AppendLine("     , a.STOCK_NUM ");
            sb.AppendLine("     , max(a.STOCK_KIND) as STOCK_KIND ");
            sb.AppendLine("     , max(a.CUST_CODE1) as CUST_CODE1 ");
            sb.AppendLine("     , max(a.CUST_NAME1) as CUST_NAME1 ");
            sb.AppendLine("     , max(a.MAN_CODE1) as MAN_CODE1 ");
            sb.AppendLine("     , max(a.MAN_NAME1) as MAN_NAME1 ");
            sb.AppendLine("     , case when isnull(max(a.STOCK_LAST1), '0') = '1' then 'Y' else '' end as STOCK_LAST1 ");
            sb.AppendLine("     , replace(max(a.TAX_DATE), '/', '-') as TAX_DATE ");
            sb.AppendLine(" from PRODUCT_STOCK_DEPT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" group by a.STOCK_DATE, a.STOCK_NUM ");
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_DEPT_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_STOCK_DEPT a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and a.STOCK_NUM = @p_2  ");
            sb.AppendLine(" order by a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_DEPT_Detail_결재조건(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" exec dbo.proc_영업소주문서결재조건2 @p_1, @p_2, '' ");

            sb.AppendLine(" select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine("     , case when isnull(a.STOCK_DIS, 0) = 1 then 'V' else '' end as 할증체크 ");
            sb.AppendLine("     , case when isnull(a.STOCK_DAN, 0) = 1 then 'V' else '' end as 단가체크 ");
            sb.AppendLine("     , case when isnull(a.STOCK_HWOI, 0) = 1 then 'V' else '' end as 회전일체크 ");
            sb.AppendLine(" from PRODUCT_STOCK_DEPT a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and a.STOCK_NUM = @p_2  ");
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc, a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_DEPT_Detail_결재대상들(string sDay, string sCust)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" exec dbo.proc_영업소주문서결재조건2 @p_1, '', '" + sCust + "' ");

            sb.AppendLine(" select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine("     , case when isnull(a.STOCK_DIS, 0) = 1 then 'V' else '' end as 할증체크 ");
            sb.AppendLine("     , case when isnull(a.STOCK_DAN, 0) = 1 then 'V' else '' end as 단가체크 ");
            sb.AppendLine("     , case when isnull(a.STOCK_HWOI, 0) = 1 then 'V' else '' end as 회전일체크 ");
            sb.AppendLine(" from PRODUCT_STOCK_DEPT a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and isnull(a.STOCK_LAST1, '') <> '1'  "); //미결 건만
            if (sCust != "")
            {
                sb.AppendLine("     and a.CUST_CODE1 = '" + sCust + "'  ");
            }
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc, a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STORE_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.STOCK_DATE ");
            sb.AppendLine("     , a.STOCK_NUM ");
            sb.AppendLine("     , max(a.STOCK_KIND) as STOCK_KIND ");
            sb.AppendLine("     , max(a.CUST_CODE1) as CUST_CODE1 ");
            sb.AppendLine("     , max(a.CUST_NAME1) as CUST_NAME1 ");
            sb.AppendLine("     , max(a.MAN_CODE1) as MAN_CODE1 ");
            sb.AppendLine("     , max(a.MAN_NAME1) as MAN_NAME1 ");
            sb.AppendLine("     , max(a.STOCK_AMOUNT) as STOCK_AMOUNT ");
            sb.AppendLine("     , max(a.STOCK_VAT) as STOCK_VAT ");
            //sb.AppendLine("     , case when isnull(max(a.STOCK_LAST1), '0') = '1' then 'Y' else '' end as STOCK_LAST1 ");
            //sb.AppendLine("     , replace(max(a.TAX_DATE), '/', '-') as TAX_DATE ");
            sb.AppendLine(" from PRODUCT_STORE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" group by a.STOCK_DATE, a.STOCK_NUM ");
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STORE_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_STORE a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and a.STOCK_NUM = @p_2  ");
            sb.AppendLine(" order by a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }




        public DataTable fn_PRODUCT_STOCK_List(string sDay1, string sDay2, string sCust)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCT_STOCK a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE >= @p_1 ");
            sb.AppendLine("     and a.STOCK_DATE <= @p_2 ");
            if (sCust != "")
            {
                sb.AppendLine("     and a.CUST_CODE1 = '" + sCust + "' ");
            }
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay1);
            sCommand.Parameters.AddWithValue("@p_2", sDay2);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_거래처잔고_Summary(string sCust, string sDay)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select sum(z.전월잔고) as 현잔고 ");
            sb.AppendLine(" from ( ");

            sb.AppendLine(" select isnull(SUM(MAN_PREAMOUNT), 0) as 전월잔고 ");
            sb.AppendLine(" from CUST_YEARMMAMOUNT  ");
            sb.AppendLine(" where CUST_CODE = @p_1 ");
            sb.AppendLine("     and JAN_YEARMM = @pYM ");

            sb.AppendLine(" union all ");

            sb.AppendLine(" select isnull(SUM(STOCK_AMOUNT), 0) - isnull(SUM(STOCK_VAT), 0) as 판매액계 ");
            sb.AppendLine(" from PRODUCT_STOCK  ");
            sb.AppendLine(" where CUST_CODE1 = @p_1 ");
            sb.AppendLine("     and STOCK_DATE >= @p_from ");
            sb.AppendLine("     and STOCK_DATE <= @p_to ");

            sb.AppendLine(" union all ");

            sb.AppendLine(" select -1 * isnull(SUM(COLLECT_AMOUNT), 0) as 수금액계 ");
            sb.AppendLine(" from PRODUCT_COLLECT  ");
            sb.AppendLine(" where CUST_CODE1 = @p_1 ");
            sb.AppendLine("     and COLLECT_DATE >= @p_from ");
            sb.AppendLine("     and COLLECT_DATE <= @p_to ");

            sb.AppendLine(" ) z ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sCust);
            sCommand.Parameters.AddWithValue("@pYM", sDay.Substring(0, 7));
            sCommand.Parameters.AddWithValue("@p_from", sDay.Substring(0, 7) + "-01");
            sCommand.Parameters.AddWithValue("@p_to", sDay);
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_PRODUCT_STOCK_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_STOCK a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.CUST_CODE1 and b.제품코드 = a.STOCK_CODE ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE = @p_1  ");
            sb.AppendLine("     and a.STOCK_NUM = @p_2  ");
            sb.AppendLine(" order by a.STOCK_ILNUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.STOCK_DATE ");
            sb.AppendLine("     , a.STOCK_NUM ");
            sb.AppendLine("     , max(a.STOCK_KIND) as STOCK_KIND ");
            sb.AppendLine("     , max(a.CUST_CODE1) as CUST_CODE1 ");
            sb.AppendLine("     , max(a.CUST_NAME1) as CUST_NAME1 ");
            sb.AppendLine("     , max(a.MAN_CODE1) as MAN_CODE1 ");
            sb.AppendLine("     , max(a.MAN_NAME1) as MAN_NAME1 ");
            sb.AppendLine("     , replace(max(a.TAX_DATE), '/', '-') as TAX_DATE ");
            sb.AppendLine(" from PRODUCT_STOCK a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" group by a.STOCK_DATE, a.STOCK_NUM ");
            sb.AppendLine(" order by a.STOCK_DATE asc, a.STOCK_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_COLLECT_DEPT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.COLLECT_DATE ");
            sb.AppendLine("     , a.COLLECT_NUM ");
            sb.AppendLine("     , a.COLLECT_KIND ");
            sb.AppendLine("     , a.CUST_CODE1 ");
            sb.AppendLine("     , a.CUST_NAME1 ");
            sb.AppendLine("     , a.REP_NAME1 ");
            sb.AppendLine("     , a.COMP_NUM1 ");
            sb.AppendLine("     , a.MAN_CODE1 ");
            sb.AppendLine("     , a.MAN_NAME1 ");
            sb.AppendLine("     , a.COLLECT_AMOUNT ");
            sb.AppendLine("     , a.BILL_NUMBER ");
            sb.AppendLine("     , isnull(a.COLLECT_LAST, '0') as COLLECT_LAST ");
            sb.AppendLine("     , case when isnull(a.COLLECT_LAST, '0') = '1' then 'Y' else '' end as COLLECT_LAST2 ");
            sb.AppendLine("     , replace(a.TAX_DATE, '/', '-') as TAX_DATE ");
            sb.AppendLine("     , a.KIND_AB ");
            sb.AppendLine(" from PRODUCT_COLLECT_DEPT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.COLLECT_DATE asc, a.COLLECT_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_COLLECT_DEPT_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_COLLECT_DEPT a ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.COLLECT_DATE = @p_1  ");
            sb.AppendLine("     and a.COLLECT_NUM = @p_2  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_COLLECT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine(" from PRODUCT_COLLECT a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.COLLECT_DATE asc, a.COLLECT_NUM asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_COLLECT_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine(" from PRODUCT_COLLECT a ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.CUST_CODE1 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.COLLECT_DATE = @p_1  ");
            sb.AppendLine("     and a.COLLECT_NUM = @p_2  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_RETURN_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.반품일자 ");
            sb.AppendLine("     , a.반품번호 ");
            sb.AppendLine("     , max(a.구분) as 구분 ");
            sb.AppendLine("     , max(a.거래처코드) as 거래처코드 ");
            sb.AppendLine("     , max(a.거래처명) as 거래처명 ");
            sb.AppendLine("     , max(a.담당자코드) as 담당자코드 ");
            sb.AppendLine("     , max(a.담당자명) as 담당자명 ");
            sb.AppendLine("     , isnull(min(a.창고확인), '미확인') as 창고확인 ");
            sb.AppendLine("     , isnull(min(a.관리부확인), '미확인') as 관리부확인 ");
            sb.AppendLine("     , isnull(convert(nvarchar(10), max(a.주문일자), 120), '') as 주문일자 ");
            sb.AppendLine("     , isnull(max(a.주문번호), '') as 주문번호 ");
            sb.AppendLine(" from PRODUCT_RETURN a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" group by a.반품일자, a.반품번호 ");
            sb.AppendLine(" order by a.반품일자 asc, a.반품번호 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_RETURN_Detail(string sDay, string sNum)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , isnull(b.할인율, 0) as 계약율 ");
            sb.AppendLine("     , isnull(c.EMAIL, '') as EMAIL ");
            sb.AppendLine("     , c.DEAL_KIND ");
            sb.AppendLine("     , isnull(c.특매처, 0) as 특매처 ");
            sb.AppendLine("     , isnull(p.PRODUCT_NAME, '') as 제품명확인 ");
            sb.AppendLine(" from PRODUCT_RETURN a ");
            sb.AppendLine("     left outer join CUST_DISCOUNT b on b.거래처코드 = a.거래처코드 and b.제품코드 = a.제품코드 ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.거래처코드 ");
            sb.AppendLine("     left outer join PRODUCT p on p.PRODUCT_CODE = a.제품코드 ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.반품일자 = @p_1  ");
            sb.AppendLine("     and a.반품번호 = @p_2  ");
            sb.AppendLine(" order by a.순서 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay);
            sCommand.Parameters.AddWithValue("@p_2", sNum);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_ZIPCODE_N15_List_pop(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.우편번호 as 우편번호 ");
            sb.AppendLine("     , a.ZIP_AREA as 검색주소 ");
            sb.AppendLine(" from ZIPCODE_N15 a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.SEQ not in (select TOP " + skipSize.ToString() + " a.SEQ ");
            sb.AppendLine("                                 from ZIPCODE_N15 a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.ZIP_AREA asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_ZIPCODE_N15_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from ZIPCODE_N15 a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_ZIPCODE_NEW_List_pop(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.ZIP_CODE as 우편번호 ");
            sb.AppendLine("     , a.ZIP_AREA as 검색주소 ");
            sb.AppendLine(" from ZIPCODE_NEW a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.ZIP_AREA not in (select TOP " + skipSize.ToString() + " a.ZIP_AREA ");
            sb.AppendLine("                                 from ZIPCODE_NEW a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.ZIP_AREA asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_ZIPCODE_NEW_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from ZIPCODE_NEW a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 단위명 ");
            sb.AppendLine("     , c.CODE_DESC as 제품구분명 ");
            sb.AppendLine("     , d.CODE_DESC as 제형구분명 ");
            sb.AppendLine("     , e.CODE_DESC as 관리구분명 ");
            sb.AppendLine("     , case when isnull(a.TAX_KIND, '0') = '1' then '해당' else '비해당' end as 특소세명 ");
            sb.AppendLine(" from PRODUCT a ");
            sb.AppendLine("     left outer join UNITCODE b on b.UNIT_CODE = a.UNIT_CODE ");
            sb.AppendLine("     left outer join PRODUCTKIND c on c.PRODUCT_KIND = a.PRODUCT_KIND ");
            sb.AppendLine("     left outer join PRODUCTTYPE d on d.PRODUCT_TYPE = a.PRODUCT_TYPE ");
            sb.AppendLine("     left outer join PRODUCTCLASS e on e.PRODUCT_CLASS = a.PRODUCT_CLASS ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.PRODUCT_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from PRODUCT a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.PRODUCT_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUST_DISCOUNT_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine(" from CUSTOMER a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.CUST_CODE in (select distinct 거래처코드 from CUST_DISCOUNT) ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUST_DISCOUNT_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , c.REP_NAME ");
            sb.AppendLine("     , c.COMP_NUM ");
            sb.AppendLine("     , c.MAN_CODE ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine(" from CUST_DISCOUNT a ");
            sb.AppendLine("     left outer join CUSTOMER c on c.CUST_CODE = a.거래처코드 ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = c.MAN_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.거래처코드 = @p_1  ");
            sb.AppendLine(" order by a.거래처코드 asc, a.제품코드 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_STOCK_GOAL_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , case when a.GOAL_CODE = '1' then '판매' ");
            sb.AppendLine("             when a.GOAL_CODE = '2' then '수금' ");
            sb.AppendLine("             else '현금' end as 구분명 ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine(" from STOCK_GOAL a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.GOAL_YEAR asc, a.MAN_CODE asc, a.GOAL_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_STOCK_GOAL_Detail(string sYYYY, string sGubun, string sMan)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine(" from STOCK_GOAL a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.GOAL_YEAR = @p_1  ");
            sb.AppendLine("     and a.GOAL_CODE = @p_2  ");
            sb.AppendLine("     and a.MAN_CODE = @p_3  ");
            sb.AppendLine(" order by a.GOAL_YEAR asc, a.MAN_CODE asc, a.GOAL_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sYYYY);
            sCommand.Parameters.AddWithValue("@p_2", sGubun);
            sCommand.Parameters.AddWithValue("@p_3", sMan);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_PRODUCT_STOCK_Magam(string sDay1, string sDay2, string sCust)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select a.CUST_CODE1, max(CUST_NAME1) as CUST_NAME1 ");
            sb.AppendLine(" from PRODUCT_STOCK a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.STOCK_DATE >= @p_1  ");
            sb.AppendLine("     and a.STOCK_DATE <= @p_2  ");
            sb.AppendLine("     and a.퍼센트마감 = 'N' ");
            sb.AppendLine("     and isnull(a.할인율, 0) <> 0 ");
            if (sCust != "")
            {
                sb.AppendLine("     and a.CUST_CODE1 = '" + sCust + "' ");
            }
            sb.AppendLine(" group by a.CUST_CODE1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sDay1);
            sCommand.Parameters.AddWithValue("@p_2", sDay2);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_PRE_List(string condition, int pageSize, int skipSize)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TOP " + pageSize.ToString() + " ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from CUSTOMER_PRE a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine("     and a.CUST_CODE not in (select TOP " + skipSize.ToString() + " a.CUST_CODE ");
            sb.AppendLine("                                 from CUSTOMER_PRE a ");
            sb.AppendLine("                                 where 1=1 ");
            sb.AppendLine("                                     " + condition + " ");
            sb.AppendLine("                             ) ");
            sb.AppendLine(" order by a.CUST_CODE asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_PRE_List_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as CNT ");
            sb.AppendLine(" from CUSTOMER_PRE a ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_CUSTOMER_PRE_Detail(string sID)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            sb.AppendLine("     , b.CODE_DESC as 담당자명 ");
            sb.AppendLine("     , b.DEPT_CODE ");
            sb.AppendLine("     , d.CODE_DESC as 부서명 ");
            sb.AppendLine(" from CUSTOMER_PRE a ");
            sb.AppendLine("     left outer join MANCODE b on b.MAN_CODE = a.MAN_CODE ");
            sb.AppendLine("     left outer join DEPTCODE d on d.DEPT_CODE = b.DEPT_CODE ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     and a.CUST_CODE = @p_1  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", sID);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_반품조회_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("     a.* ");
            //sb.AppendLine("     , b.AreaName ");
            sb.AppendLine(" from PRODUCT_RETURN a ");
            //sb.AppendLine("     left outer join T_Area b on b.AreaCode = a.AreaCode ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine("     " + condition + " ");
            sb.AppendLine(" order by a.반품일자 asc, a.반품번호 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_LoginUser(string userId, string userPw, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select               ");
            //sb.AppendLine("     u.UserID        ");
            //sb.AppendLine("     , u.UserPW      ");
            //sb.AppendLine("     , u.UserName    ");
            //sb.AppendLine("     , isnull(u.AuthLevel, 9) AuthLevel  ");
            //sb.AppendLine("     , u.EmailAddr   ");
            //sb.AppendLine("     , u.ActiveYN    ");
            //sb.AppendLine(" from tbUser u       ");
            //sb.AppendLine(" where u.UserID = @wuId      ");
            //sb.AppendLine("     and u.UserPW = @wuPw    ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@wuId", userId);
            sCommand.Parameters.AddWithValue("@wuPw", userPw);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_데이터베이스_List(string condition, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select               ");
            //sb.AppendLine("     a.*             ");
            //sb.AppendLine(" from T_데이터베이스 a ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine(" " + condition + "   ");
            //sb.AppendLine(" order by a.디비순번 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@p_Level", userLevel);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_데이터베이스_Detail(string p1, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select               ");
            //sb.AppendLine("     a.*             ");
            //sb.AppendLine(" from T_데이터베이스 a ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine("     and a.디비순번 = @p_1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", p1);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable root_업체정보_List(string condition, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select a.* ");
            //sb.AppendLine("     , substring(a.사업자번호, 1, 3) + '-' + substring(a.사업자번호, 4, 2) + '-' + substring(a.사업자번호, 6, 5) as V사업자번호 ");
            //sb.AppendLine(" from T_업체정보 a   ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine(" " + condition + "   ");
            //sb.AppendLine(" order by a.상호명 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable root_업체정보_Detail(string p1, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select a.* ");
            //sb.AppendLine("     , s.명칭 as 수량등록방식 ");
            //sb.AppendLine("     , db.디비주소 ");
            //sb.AppendLine("     , db.디비명 ");
            //sb.AppendLine("     , db.디비계정 ");
            //sb.AppendLine("     , db.디비암호 ");
            //sb.AppendLine(" from T_업체정보 a   ");
            //sb.AppendLine("      left outer join C_수량등록방식 s on s.코드 = a.수량등록방식코드 ");
            //sb.AppendLine("      left outer join T_데이터베이스 db on db.디비순번 = a.디비순번 ");
            //sb.AppendLine(" where 1=1 ");
            //sb.AppendLine("     and a.사업자번호 = @p_1 ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            sCommand.Parameters.AddWithValue("@p_1", p1);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_업체정보_Detail(string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select a.* ");
            //sb.AppendLine("     , substring(a.사업자번호, 1, 3) + '-' + substring(a.사업자번호, 4, 2) + '-' + substring(a.사업자번호, 6, 5) as 사업자번호2 ");
            ////sb.AppendLine("     , t.명칭 as 전화번호지역 ");
            ////sb.AppendLine("     , t2.명칭 as 담당자번호통신사 ");
            //sb.AppendLine(" from T_업체정보 a   ");
            //////sb.AppendLine("      left outer join C_전화지역 t on t.코드 = a.전화번호코드 ");
            //////sb.AppendLine("      left outer join C_폰통신사 t2 on t2.코드 = a.담당자번호코드 ");
            ////sb.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_업체자기정보_Check(string condition, string sConn)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select               ");
            //sb.AppendLine("     a.사업자번호    ");
            //sb.AppendLine("     , a.상호명      ");
            //sb.AppendLine("     , a.대표자      ");
            //sb.AppendLine("     , a.업태        ");
            //sb.AppendLine("     , a.종목        ");
            //sb.AppendLine("     , a.계좌순번    ");
            //sb.AppendLine("     , a.사용여부    ");
            //sb.AppendLine(" from T_업체정보 a   ");
            ////sb.AppendLine(" where a.사업자번호 = '" + Common.p_strCompID + "' ");
            //sb.AppendLine(" " + condition + "   ");
            //sb.AppendLine(" order by a.사업자번호 asc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@p_Level", userLevel);
            return wAdo.SqlCommandSelect(sCommand);
        }



        // *********************************************************

        public DataTable fn_Staff_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.STAFF_CD");
            sb.AppendLine(" ,A.STAFF_NM");
            sb.AppendLine(" ,A.JOIN_DATE");
            sb.AppendLine(" ,A.CALL_NUM");
            sb.AppendLine(" ,A.PHONE_NUM");
            sb.AppendLine(" ,A.DEPT_CD");
            sb.AppendLine(" ,(SELECT DEPT_NM FROM N_DEPT_CODE WHERE DEPT_CD = A.DEPT_CD) AS DEPT_NM");
            sb.AppendLine(" ,A.POS_CD");
            sb.AppendLine(" ,(SELECT POS_NM FROM N_POS_CODE WHERE POS_CD = A.POS_CD) AS POS_NM");
            sb.AppendLine(" ,A.STORAGE_CD");
            sb.AppendLine(" ,(SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE STORAGE_CD = A.STORAGE_CD) AS STORAGE_NM");
            sb.AppendLine(" ,A.LOGIN_ID");
            sb.AppendLine(" ,A.PW");
            sb.AppendLine(" ,A.AUTH_SET");
            sb.AppendLine(" ,A.COMMENT");
            sb.AppendLine(" from N_STAFF_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by CAST(A.STAFF_CD as int) ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Dept_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select DEPT_CD,DEPT_NM,COMMENT");
            sb.AppendLine(" from N_DEPT_CODE ");
            sb.AppendLine(" order by CAST(DEPT_CD as int) ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Pos_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select POS_CD,POS_NM,COMMENT");
            sb.AppendLine(" from N_POS_CODE ");
            sb.AppendLine(" order by CAST(POS_CD as int)  ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Stor_List()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select STORAGE_CD,STORAGE_NM,COMMENT");
            sb.AppendLine(" from N_STORAGE_CODE ");
            sb.AppendLine(" order by CAST(STORAGE_CD as int) ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Type_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select TYPE_CD,TYPE_NM,POOR_TYPE_YN,COMMENT");
            sb.AppendLine(" from N_TYPE_CODE ");
            sb.AppendLine(" order by TYPE_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Unit_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select UNIT_CD,UNIT_NM,COMMENT");
            sb.AppendLine(" from N_UNIT_CODE ");
            sb.AppendLine(" order by UNIT_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Line_List()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select LINE_CD,LINE_NM,COMMENT");
            sb.AppendLine(" from N_LINE_CODE ");
            sb.AppendLine(" order by LINE_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Flow_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.FLOW_CD");
            sb.AppendLine(" , A.FLOW_NM");
            sb.AppendLine(" , A.STORAGE_CD");
            sb.AppendLine(" , (SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE STORAGE_CD = A.STORAGE_CD) AS STORAGE_NM");
            sb.AppendLine(" , FLOW_INSERT_YN ");
            sb.AppendLine(" , ITEM_IDEN_YN ");
            sb.AppendLine(" , FLOW_CHK_YN ");
            sb.AppendLine(" , TEMP_TIME_YN ");
            sb.AppendLine(" , MOLD_YN ");
            sb.AppendLine(" , POOR_TYPE_CD ");
            sb.AppendLine(" , (SELECT TYPE_NM FROM N_TYPE_CODE WHERE TYPE_CD = A.POOR_TYPE_CD) AS POOR_TYPE_NM ");
            sb.AppendLine(" , STAFF_YN ");
            sb.AppendLine(" , STAFF_CD ");
            sb.AppendLine(" , (SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = A.STAFF_CD) AS STAFF_NM ");
            sb.AppendLine(" , A.COMMENT");
            sb.AppendLine(" from N_FLOW_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.FLOW_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Poor_List() // 불량 리스트
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.POOR_CD");
            sb.AppendLine(" , A.POOR_NM");
            sb.AppendLine(" , A.TYPE_CD");
            sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM ");
            sb.AppendLine(" , A.COMMENT");
            sb.AppendLine(" from N_POOR_CODE A ");
            sb.AppendLine(" order by POOR_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_ChugJong_List() // 축종 리스트
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select CHUGJONG_CD");
            sb.AppendLine(" , CHUGJONG_NM");
            sb.AppendLine(" , COMMENT");
            sb.AppendLine(" from N_CHUGJONG_CODE");
            sb.AppendLine(" order by CHUGJONG_CD");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Exprt_List() // 유통 일수 리스트
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select EXPRT_COUNT");
            sb.AppendLine(" , EXPRT_GUBUN");
            sb.AppendLine(" from N_EXPRT_DATE");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Country_List() // 원산지 리스트
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select N.COUNTRY_CD");
            sb.AppendLine(" , N.COUNTRY_NM");
            sb.AppendLine(" , N.COMMENT");
            sb.AppendLine(" , (select S_CODE_NM from T_S_CODE where L_CODE = 500 AND S_CODE = N.USED_CD) AS USED_NM");
            sb.AppendLine(" , N.USED_CD");
            sb.AppendLine(" FROM N_RAW_COUNTRY_CODE N");
            sb.AppendLine(" ORDER BY COUNTRY_CD ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_MeatClass_List() // 육류 분류 리스트
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select CLASS_CD");
            sb.AppendLine(" , CLASS_NM");
            sb.AppendLine(" , HAMYANG");
            sb.AppendLine(" from N_MEAT_CLASS_CODE");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Frozen_List() // 냉장 냉동 리스트
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select FROZEN_CD");
            sb.AppendLine(" , FROZEN_NM");
            sb.AppendLine(" , EXPRT_COUNT");
            sb.AppendLine(" , DAY_GUBUN");
            sb.AppendLine(" , COMMENT");
            sb.AppendLine(" from N_FROZEN_CODE");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Grade_List() // 육류 등급 리스트
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select GRADE_CD");
            sb.AppendLine(" , GRADE_NM");
            sb.AppendLine(" from N_GRADE_CODE");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_query_Poor(string p_type_cd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.POOR_CD as 코드");
            sb.AppendLine(" , A.POOR_NM as 명칭");
            sb.AppendLine(" from N_POOR_CODE A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(" and TYPE_CD = '" + p_type_cd + "' ");
            sb.AppendLine(" order by POOR_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_query_Type()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.TYPE_CD as 코드");
            sb.AppendLine(" , A.TYPE_NM as 명칭");
            sb.AppendLine(" from N_TYPE_CODE A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(" and POOR_TYPE_YN = 'Y' ");
            sb.AppendLine(" order by TYPE_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_query_com_code(string l_code)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("    select S_CODE as 코드 ");
            sb.AppendLine("        , S_CODE_NM as 명칭 ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '" + l_code + "'");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select RAW_MAT_CD");
            sb.AppendLine(" , RAW_MAT_NM");
            sb.AppendLine(" , SPEC");
            sb.AppendLine(" , RAW_MAT_GUBUN");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            //sb.AppendLine("     , case when RAW_MAT_GUBUN = '1' then '원재료' ");
            //sb.AppendLine("             when RAW_MAT_GUBUN = '2' then '부재료' ");
            //sb.AppendLine("             else '포장재료' end as RAW_MAT_GUBUN_NM ");
            sb.AppendLine(" , TYPE_CD ");
            sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine(" , INPUT_UNIT ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM  ");
            sb.AppendLine(" , OUTPUT_UNIT ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            sb.AppendLine(" , LINE_CD ");
            sb.AppendLine(" , CVR_RATIO ");
            sb.AppendLine(" , INPUT_PRICE ");
            sb.AppendLine(" , OUTPUT_PRICE ");
            sb.AppendLine(" , RAW_STORAGE ");
            sb.AppendLine(" , EX_STAN_QUALITY ");
            sb.AppendLine(" , USED_CD ");
            sb.AppendLine(" , CUST_CD ");
            sb.AppendLine(" , ST_STATUS_YN ");
            sb.AppendLine(" , (select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD and CUST_GUBUN ='2') AS CUST_NM ");
            sb.AppendLine(" , BASIC_STOCK ");
            sb.AppendLine(" , CHECK_GUBUN ");
            sb.AppendLine(" , PART_NO ");
            sb.AppendLine(" , BAL_STOCK ");
            sb.AppendLine(" , COMMENT");
            sb.AppendLine(" , CHUGJONG_CD");
            sb.AppendLine(" , (select CHUGJONG_NM from N_CHUGJONG_CODE where A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine(" , CLASS_CD");
            sb.AppendLine(" , (select CLASS_NM from N_MEAT_CLASS_CODE where A.CLASS_CD = CLASS_CD) AS CLASS_NM  ");
            sb.AppendLine(" , (select GRADE_NM from N_GRADE_CODE where A.GRADE_CD = GRADE_CD) AS GRADE_NM  ");
            sb.AppendLine(" , GRADE_CD");
            sb.AppendLine(" , COUNTRY_CD");
            sb.AppendLine(" , (select COUNTRY_NM from N_RAW_COUNTRY_CODE where A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM  ");
            sb.AppendLine(" , HAMYANG");
            sb.AppendLine(" , LABEL_NM");
            sb.AppendLine(" , BOX_AMT");
            sb.AppendLine(" , EXPRT_COUNT");
            sb.AppendLine(" , PATTERN_CD");
            sb.AppendLine(" , VAT_CD");
            sb.AppendLine(" from N_RAW_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by RAW_MAT_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_Meat_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine(" , B.SEQ");
            sb.AppendLine(" , A.RAW_MAT_NM");
            sb.AppendLine(" , B.RAW_MAT_CD");
            sb.AppendLine(" , A.SPEC");
            sb.AppendLine(" , A.RAW_MAT_GUBUN");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine(" , A.TYPE_CD ");
            sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine(" , A.INPUT_UNIT ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.INPUT_UNIT) AS INPUT_UNIT_NM  ");
            sb.AppendLine(" , A.OUTPUT_UNIT ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            sb.AppendLine(" , A.CHECK_GUBUN   ");
            sb.AppendLine(" from N_RAW_CODE A ");
            sb.AppendLine(" left outer join N_RAW_MEAT_SOURCE B");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD");
            sb.AppendLine(condition);
            sb.AppendLine(" order by B.SEQ ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Raw_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine(" , A.RAW_MAT_NM");
            sb.AppendLine(" , A.SPEC");
            sb.AppendLine(" , A.RAW_MAT_GUBUN");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '300' and S_CODE = A.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine(" , A.USED_CD ");
            sb.AppendLine(" , A.CUST_CD ");
            sb.AppendLine(" , A.BASIC_STOCK ");
            sb.AppendLine(" , A.PART_NO ");
            sb.AppendLine(" , B.CONTROL_NO "); //시험기준 외관
            sb.AppendLine(" , B.RAW_MAT_CD AS RAW_MAT_CHK"); //원자재수입검사 기준 있는지 체크 (RAW_MAT_CD가 NULL체크로 구별)
            sb.AppendLine(" , A.COMMENT");
            sb.AppendLine(" from N_RAW_CODE A ");
            sb.AppendLine(" left outer join N_RAW_CHK B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" where 1=1 ");

            sb.AppendLine(condition);
            sb.AppendLine(" order by RAW_MAT_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Half_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select A.ITEM_CD ");
            sb.AppendLine(" , A.ITEM_NM ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '400' and S_CODE = A.ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine(" , A.SPEC");
            sb.AppendLine(" , A.UNIT_CD");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS INPUT_UNIT_NM ");
            sb.AppendLine(" ,A.TYPE_CD ");
            sb.AppendLine(" , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine(" ,A.LINE_CD ");
            sb.AppendLine(" , (select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) AS LINE_NM  ");
            sb.AppendLine(" ,A.UNIT_CD ");
            sb.AppendLine(" , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine(" ,A.STOCK_LOC ");
            sb.AppendLine(" ,A.PROP_STOCK ");
            sb.AppendLine(" ,A.BAL_STOCK ");
            sb.AppendLine(" ,A.BASIC_STOCK ");
            sb.AppendLine(" ,FLOOR(INPUT_PRICE) AS INPUT_PRICE ");
            sb.AppendLine(" ,OUTPUT_PRICE ");
            sb.AppendLine(" ,A.CHARGE_AMT ");
            sb.AppendLine(" ,A.PACK_AMT ");
            sb.AppendLine(" ,A.USED_CD ");
            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine(" where A.ITEM_GUBUN = '2' ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Cust_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select CUST_CD");
            sb.AppendLine("     ,CUST_GUBUN ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from T_S_CODE ");
            sb.AppendLine("    where L_CODE = '200' and S_CODE = A.CUST_GUBUN) AS CUST_GUBUN_NM ");
            sb.AppendLine("     ,CUST_NM ");
            sb.AppendLine("     ,OWNER ");
            sb.AppendLine("     ,SAUP_NO ");
            sb.AppendLine("     ,UPTAE ");
            sb.AppendLine("     ,JONGMOK ");
            sb.AppendLine("     ,DEAL_TYPE ");
            sb.AppendLine("     ,POST_NO ");
            sb.AppendLine("     ,ADDR ");
            sb.AppendLine("     ,CUST_MANAGER ");
            sb.AppendLine("     ,CUST_EMAIL ");
            sb.AppendLine("     ,CUST_COMP_PHONE ");
            sb.AppendLine("     ,CUST_PHONE ");
            sb.AppendLine("     ,CUST_FAX ");
            sb.AppendLine("     ,CUST_OPEN ");
            sb.AppendLine("     ,STAFF_CD ");
            sb.AppendLine("     , (SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = A.STAFF_CD) AS STAFF_NM ");
            sb.AppendLine("     ,USED_CD ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("      from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("      where L_CODE = '500' and S_CODE = A.USED_CD) AS USED_NM ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine("     ,TAX_CD ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from T_S_CODE ");
            sb.AppendLine("    where L_CODE = '220' and S_CODE = A.TAX_CD) AS TAX_NM ");
            sb.AppendLine("     ,BALANCE ");
            sb.AppendLine(" from N_CUST_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by CUST_CD ");

            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select CHK_CD");
            sb.AppendLine("     ,CHK_GUBUN ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '600' and S_CODE = A.CHK_GUBUN) AS CHK_GUBUN_NM ");
            sb.AppendLine("     ,CHK_ORD ");
            sb.AppendLine("     ,CHK_NM ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from N_CHK_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by CHK_GUBUN,CHK_ORD ");
            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_List(string condition)
        {
            StringBuilder sb = new StringBuilder();




            Console.WriteLine("testtest");

            sb.AppendLine("select ITEM_CD");
            sb.AppendLine("     ,ITEM_NM ");
            sb.AppendLine("     ,ITEM_GUBUN ");
            sb.AppendLine("     ,CUST_CD ");
            sb.AppendLine("     ,SPEC ");
            sb.AppendLine("     ,TYPE_CD ");
            sb.AppendLine("     , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine("     ,LINE_CD ");
            sb.AppendLine("     , (select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) AS LINE_NM  ");
            sb.AppendLine("     ,UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,STOCK_LOC ");
            sb.AppendLine("     ,PROP_STOCK ");
            sb.AppendLine("     ,BAL_STOCK ");
            sb.AppendLine("     ,BASIC_STOCK ");
            sb.AppendLine("     ,ITEM_WEIGHT ");
            sb.AppendLine("     ,FLOOR(INPUT_PRICE) AS INPUT_PRICE ");
            sb.AppendLine("     ,OUTPUT_PRICE ");
            sb.AppendLine("     ,CHARGE_AMT ");
            sb.AppendLine("     ,PACK_AMT ");
            sb.AppendLine("     ,PRINT_YN ");
            sb.AppendLine("     ,USED_CD ");
            sb.AppendLine("     ,INPUT_DATE ");
            sb.AppendLine("     ,BOX_BAR_CD ");
            sb.AppendLine("     ,BOX_AMT ");
            sb.AppendLine("     ,UNIT_BAR_CD ");
            sb.AppendLine("     ,UNIT_AMT ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine("     , (select COUNT(*) from N_ITEM_CHK where ITEM_CD = A.ITEM_CD) AS ITEM_CHK_YN ");
            sb.AppendLine("     ,LINK_CD ");
            //2019-12-02 이재원 씨지엠 특화
            sb.AppendLine("     ,LABEL_NM ");
            sb.AppendLine("     ,CHUGJONG_CD ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE CHUGJONG_CD = A.CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,CLASS_CD ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE CLASS_CD = A.CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE COUNTRY_CD = A.COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("     ,HAMYANG ");
            //2019-12-09 문세진 과세구분
            sb.AppendLine("     ,VAT_CD ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from T_S_CODE ");
            sb.AppendLine("         where L_CODE = '410' and S_CODE = VAT_CD) AS VAT_NM ");
            sb.AppendLine("     , (select COUNT(*) from N_ITEM_CHK where ITEM_CD = A.ITEM_CD) AS ITEM_CHK_YN ");
            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_GUBUN,ITEM_CD");


            Console.WriteLine(sb.ToString());



            SqlCommand sCommand = new SqlCommand(sb.ToString());


            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Item_List_Search_by_Comp(string condition, string raw_mat_cd)
        {
            StringBuilder sb = new StringBuilder();




            Console.WriteLine("testtest");

            sb.AppendLine("select distinct A.ITEM_CD");
            sb.AppendLine("     ,ITEM_NM ");
            sb.AppendLine("     ,ITEM_GUBUN ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,SPEC ");
            sb.AppendLine("     ,TYPE_CD ");
            sb.AppendLine("     , (select TYPE_NM from N_TYPE_CODE where TYPE_CD = A.TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine("     ,LINE_CD ");
            sb.AppendLine("     , (select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) AS LINE_NM  ");
            sb.AppendLine("     ,UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,STOCK_LOC ");
            sb.AppendLine("     ,PROP_STOCK ");
            sb.AppendLine("     ,BAL_STOCK ");
            sb.AppendLine("     ,BASIC_STOCK ");
            sb.AppendLine("     ,ITEM_WEIGHT ");
            sb.AppendLine("     ,FLOOR(INPUT_PRICE) AS INPUT_PRICE ");
            sb.AppendLine("     ,OUTPUT_PRICE ");
            sb.AppendLine("     ,CHARGE_AMT ");
            sb.AppendLine("     ,PACK_AMT ");
            sb.AppendLine("     ,PRINT_YN ");
            sb.AppendLine("     ,USED_CD ");
            sb.AppendLine("     ,INPUT_DATE ");
            sb.AppendLine("     ,BOX_BAR_CD ");
            sb.AppendLine("     ,BOX_AMT ");
            sb.AppendLine("     ,UNIT_BAR_CD ");
            sb.AppendLine("     ,UNIT_AMT ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine("     , (select COUNT(*) from N_ITEM_CHK where ITEM_CD = A.ITEM_CD) AS ITEM_CHK_YN ");
            sb.AppendLine("     ,LINK_CD ");
            //2019-12-02 이재원 씨지엠 특화
            sb.AppendLine("     ,LABEL_NM ");
            sb.AppendLine("     ,CHUGJONG_CD ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE CHUGJONG_CD = A.CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,CLASS_CD ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE CLASS_CD = A.CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE COUNTRY_CD = A.COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("     ,HAMYANG ");
            //2019-12-09 문세진 과세구분
            sb.AppendLine("     ,VAT_CD ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from T_S_CODE ");
            sb.AppendLine("         where L_CODE = '410' and S_CODE = VAT_CD) AS VAT_NM ");
            sb.AppendLine("     , (select COUNT(*) from N_ITEM_CHK where ITEM_CD = A.ITEM_CD) AS ITEM_CHK_YN ");
            sb.AppendLine(" from N_ITEM_CODE A ");
            sb.AppendLine(" inner join N_ITEM_COMP B ");
            sb.AppendLine(" on B.ITEM_CD = A.ITEM_CD ");
            sb.AppendLine(" and B.RAW_MAT_CD = '" + raw_mat_cd + "' ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by ITEM_GUBUN,A.ITEM_CD");


            Console.WriteLine(sb.ToString());



            SqlCommand sCommand = new SqlCommand(sb.ToString());


            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //공정검사 항목 리스트 

        public DataTable fn_Flow_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,C.ITEM_NM ");
            sb.AppendLine("     ,B.SEQ ");
            sb.AppendLine("     ,A.FLOW_CD ");
            sb.AppendLine("     ,D.FLOW_NM ");
            sb.AppendLine("     ,C.SPEC ");
            sb.AppendLine("     ,C.ITEM_GUBUN ");
            sb.AppendLine("     ,A.MEASURE_CNT ");
            sb.AppendLine("     ,A.EVA_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = C.ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine(" from N_FLOW_CHK A ");
            sb.AppendLine(" inner join N_ITEM_FLOW B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("     and A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine(" inner join N_ITEM_CODE C ");
            sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" inner join N_FLOW_CODE D ");
            sb.AppendLine(" on A.FLOW_CD = D.FLOW_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD,B.SEQ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        // 제품 검사기준 상세 가져오기 
        public DataTable fn_Item_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,C.ITEM_NM ");
            sb.AppendLine("     ,C.SPEC ");
            sb.AppendLine("     ,C.ITEM_GUBUN ");
            sb.AppendLine("     ,A.MEASURE_CNT ");
            sb.AppendLine("     ,A.EVA_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '400' and S_CODE = C.ITEM_GUBUN) AS ITEM_GUBUN_NM ");
            sb.AppendLine(" from N_ITEM_CHK A ");
            sb.AppendLine(" inner join N_ITEM_CODE C ");
            sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Flow_Chk_Detail_List(string condition, int gbn)
        {
            StringBuilder sb = new StringBuilder();

            if (gbn == 1) //공정검사 대기 혹은 공정검사기준 목록 가져올 때 
            {
                sb.AppendLine("select A.ITEM_CD");
                sb.AppendLine("     ,A.FLOW_CD ");
                sb.AppendLine("     ,A.CHK_CD ");
                sb.AppendLine("     ,B.CHK_ORD ");
                sb.AppendLine("     ,B.CHK_NM ");
                sb.AppendLine("     ,A.EVA_GUBUN ");
                sb.AppendLine("     , (select S_CODE_NM ");
                sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("         where L_CODE = '620' and S_CODE = A.EVA_GUBUN) AS EVA_GUBUN_NM ");
                sb.AppendLine("     ,A.CHK_LOC ");
                sb.AppendLine("     ,A.RULE_SIZE ");
                sb.AppendLine("     ,A.RULE_LIMIT ");
                sb.AppendLine("     ,A.MEASURE_APP ");
                sb.AppendLine("     ,A.CHK_METHOD ");
                sb.AppendLine("     ,A.LOWER_SIZE ");
                sb.AppendLine("     ,A.UPPER_SIZE ");
                sb.AppendLine("     ,A.LOWER_SELF ");
                sb.AppendLine("     ,A.UPPER_SELF ");
                sb.AppendLine(" from N_FLOW_CHK_STAN A  ");
                sb.AppendLine(" inner join N_CHK_CODE B ");
                sb.AppendLine(" on A.CHK_CD = B.CHK_CD ");
                sb.AppendLine("     and B.CHK_GUBUN = '1' ");
                sb.AppendLine(" inner join N_ITEM_CODE C ");
                sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(" inner join N_FLOW_CODE D ");
                sb.AppendLine(" on A.FLOW_CD = D.FLOW_CD ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by B.CHK_ORD");
            }
            else
            {
                sb.AppendLine("select A.ITEM_CD");
                sb.AppendLine("     ,A.FLOW_CD ");
                sb.AppendLine("     ,B.CHK_CD ");
                sb.AppendLine("     ,B.CHK_ORD ");
                sb.AppendLine("     ,D.CHK_NM ");
                sb.AppendLine("     ,C.EVA_GUBUN ");
                sb.AppendLine("     , (select S_CODE_NM ");
                sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("         where L_CODE = '620' and S_CODE = C.EVA_GUBUN) AS EVA_GUBUN_NM ");
                sb.AppendLine("     ,C.CHK_LOC ");
                sb.AppendLine("     ,C.RULE_SIZE ");
                sb.AppendLine("     ,C.RULE_LIMIT ");
                sb.AppendLine("     ,C.MEASURE_APP ");
                sb.AppendLine("     ,C.CHK_METHOD ");
                sb.AppendLine("     ,C.LOWER_SIZE ");
                sb.AppendLine("     ,C.UPPER_SIZE ");
                sb.AppendLine("     ,C.LOWER_SELF ");
                sb.AppendLine("     ,C.UPPER_SELF ");
                sb.AppendLine("     ,B.GRADE ");
                sb.AppendLine(" from F_FLOW_CHK A  ");
                sb.AppendLine(" inner join F_FLOW_CHK_RST B ");
                sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
                sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
                sb.AppendLine("     and A.F_STEP = B.F_STEP ");
                sb.AppendLine(" inner join N_FLOW_CHK_STAN C ");
                sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(" and A.FLOW_CD = C.FLOW_CD ");
                sb.AppendLine(" and B.CHK_CD = C.CHK_CD ");
                sb.AppendLine(" inner join N_CHK_CODE D ");
                sb.AppendLine(" on B.CHK_CD = D.CHK_CD ");
                sb.AppendLine("     and D.CHK_GUBUN = '1' ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by B.CHK_ORD");
            }

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Chk_Detail_List(string condition, int gbn)
        {
            StringBuilder sb = new StringBuilder();

            if (gbn == 1) //공정검사 대기 혹은 공정검사기준 목록 가져올 때 
            {
                sb.AppendLine("select A.ITEM_CD");
                sb.AppendLine("     ,A.CHK_CD ");
                sb.AppendLine("     ,B.CHK_ORD ");
                sb.AppendLine("     ,B.CHK_NM ");
                sb.AppendLine("     ,A.EVA_GUBUN ");
                sb.AppendLine("     , (select S_CODE_NM ");
                sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("         where L_CODE = '620' and S_CODE = A.EVA_GUBUN) AS EVA_GUBUN_NM ");
                sb.AppendLine("     ,A.CHK_LOC ");
                sb.AppendLine("     ,A.RULE_SIZE ");
                sb.AppendLine("     ,A.RULE_LIMIT ");
                sb.AppendLine("     ,A.MEASURE_APP ");
                sb.AppendLine("     ,A.CHK_INTERVAL ");
                sb.AppendLine("     ,A.LOWER_SIZE ");
                sb.AppendLine("     ,A.UPPER_SIZE ");
                sb.AppendLine("     ,A.LOWER_SELF ");
                sb.AppendLine("     ,A.UPPER_SELF ");
                sb.AppendLine(" from N_ITEM_CHK_STAN A  ");
                sb.AppendLine(" inner join N_CHK_CODE B ");
                sb.AppendLine(" on A.CHK_CD = B.CHK_CD ");
                sb.AppendLine("     and B.CHK_GUBUN = '2' ");
                sb.AppendLine(" inner join N_ITEM_CODE C ");
                sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by B.CHK_ORD");
            }
            else
            {
                sb.AppendLine("select A.ITEM_CD");
                sb.AppendLine("     ,B.CHK_CD ");
                sb.AppendLine("     ,B.CHK_ORD ");
                sb.AppendLine("     ,D.CHK_NM ");
                sb.AppendLine("     ,C.EVA_GUBUN ");
                sb.AppendLine("     , (select S_CODE_NM ");
                sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
                sb.AppendLine("         where L_CODE = '620' and S_CODE = C.EVA_GUBUN) AS EVA_GUBUN_NM ");
                sb.AppendLine("     ,C.CHK_LOC ");
                sb.AppendLine("     ,C.RULE_SIZE ");
                sb.AppendLine("     ,C.RULE_LIMIT ");
                sb.AppendLine("     ,C.MEASURE_APP ");
                sb.AppendLine("     ,C.CHK_INTERVAL ");
                sb.AppendLine("     ,C.LOWER_SIZE ");
                sb.AppendLine("     ,C.UPPER_SIZE ");
                sb.AppendLine("     ,C.LOWER_SELF ");
                sb.AppendLine("     ,C.UPPER_SELF ");
                sb.AppendLine("     ,B.GRADE ");
                sb.AppendLine(" from F_ITEM_CHK A  ");
                sb.AppendLine(" inner join F_ITEM_CHK_RST B ");
                sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
                sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
                sb.AppendLine("     and A.F_STEP = B.F_STEP ");
                sb.AppendLine(" inner join N_ITEM_CHK_STAN C ");
                sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(" and B.CHK_CD = C.CHK_CD ");
                sb.AppendLine(" inner join N_CHK_CODE D ");
                sb.AppendLine(" on B.CHK_CD = D.CHK_CD ");
                sb.AppendLine("     and D.CHK_GUBUN = '2' ");
                sb.AppendLine(condition);
                sb.AppendLine(" order by B.CHK_ORD");
            }

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_Chk_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine("     ,A.CHK_CD ");
            sb.AppendLine("     ,B.CHK_ORD ");
            sb.AppendLine("     ,B.CHK_NM ");
            sb.AppendLine("     ,A.CHK_STAN_VALUE ");
            sb.AppendLine(" from N_RAW_CHK_STAN A  ");
            sb.AppendLine(" inner join N_CHK_CODE B ");
            sb.AppendLine(" on A.CHK_CD = B.CHK_CD ");
            sb.AppendLine("     and B.CHK_GUBUN = '3' ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by B.CHK_ORD");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Flow_Chk_Exam_Value(string condition) //공정검사 성적서 
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.CHK_VALUE");
            sb.AppendLine(" from F_FLOW_CHK_DETAIL A  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Chk_Exam_Value(string condition) //제품검사 성적서 
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.CHK_VALUE");
            sb.AppendLine(" from F_ITEM_CHK_DETAIL A  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_Item_Comp_List(string condition)
        {

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ITEM_CD");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD");
            sb.AppendLine("     ,B.RAW_MAT_NM");
            sb.AppendLine("     ,B.LABEL_NM");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE B.TYPE_CD = TYPE_CD) AS TYPE_NM ");
            sb.AppendLine("     ,B.SPEC");
            sb.AppendLine("     ,B.INPUT_UNIT ");
            sb.AppendLine("     ,B.OUTPUT_UNIT ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.INPUT_UNIT) AS INPUT_UNIT_NM  ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS OUTPUT_UNIT_NM ");
            //2019-12-03 이재원 소요 원재료의 구분값을 알기 위해 한줄 추가
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     ,B.LABEL_NM ");
            //----------------------------------------
            sb.AppendLine("     ,A.TOTAL_AMT ");
            sb.AppendLine(" from N_ITEM_COMP A ");
            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD ,A.SEQ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Flow_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ITEM_CD");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.FLOW_CD");
            sb.AppendLine("     ,B.FLOW_INSERT_YN");
            sb.AppendLine("     ,B.ITEM_IDEN_YN");
            //sb.AppendLine("     ,(SELECT FLOW_INSERT_YN FROM N_FLOW_CODE WHERE FLOW_CD = A.FLOW_CD)AS FLOW_INSERT_YN");
            sb.AppendLine("     ,A.COMMENT");
            sb.AppendLine("     ,B.FLOW_NM");
            sb.AppendLine("     ,C.TYPE_CD");
            sb.AppendLine(" from N_ITEM_FLOW A ");
            sb.AppendLine(" LEFT OUTER JOIN N_FLOW_CODE B ");
            sb.AppendLine(" ON A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine(" LEFT OUTER JOIN N_TYPE_CODE C  ");
            sb.AppendLine(" ON B.POOR_TYPE_CD = C.TYPE_CD ");
            //sb.AppendLine("     and C.POOR_TYPE_YN = 'Y' ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD,A.SEQ ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Half_List(string condition, double total_amt)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.HALF_ITEM_CD ");
            sb.AppendLine("     ,B.ITEM_NM AS HALF_ITEM_NM");
            sb.AppendLine("     ,B.UNIT_CD  ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.UNIT_CD) AS UNIT_NM   ");
            sb.AppendLine("     ,A.TOTAL_AMT as HALF_AMT ");
            sb.AppendLine("     ," + total_amt + " * A.TOTAL_AMT as TOTAL_AMT ");
            sb.AppendLine("     ,B.SPEC ");
            sb.AppendLine("     ,B.OUTPUT_PRICE AS PRICE ");
            sb.AppendLine(" from N_ITEM_COMP_HALF A  ");
            sb.AppendLine(" INNER JOIN N_ITEM_CODE B  ");
            sb.AppendLine(" ON A.HALF_ITEM_CD = B.ITEM_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ITEM_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Fac_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select FAC_CD");
            sb.AppendLine("     ,FAC_NM ");
            sb.AppendLine("     ,SPEC ");
            sb.AppendLine("     ,MODEL_NM ");
            sb.AppendLine("     ,MANU_COMPANY ");
            sb.AppendLine("     ,ACQ_DATE ");
            sb.AppendLine("     ,ACQ_PRICE ");
            sb.AppendLine("     ,A.DEPT_CD ");
            sb.AppendLine("     ,(SELECT DEPT_CD FROM N_DEPT_CODE WHERE DEPT_CD = A.DEPT_CD) AS DEPT_NM ");
            sb.AppendLine("     ,USED ");
            sb.AppendLine("     ,PRO_CAPA ");
            sb.AppendLine("     ,POWER_NUMBER ");
            sb.AppendLine("     ,MAINTEN_CLASS ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from N_FAC_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by FAC_CD ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        // 생산계획 등록 조회

        public DataTable fn_Plan_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.PLAN_DATE");
            sb.AppendLine("     ,A.PLAN_CD ");
            sb.AppendLine("     ,A.PLAN_NUM ");
            sb.AppendLine("     ,ISNULL(B.ITEM_CD,0) AS ITEM_CNT ");
            sb.AppendLine("     ,CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '1' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,(select TAX_CD from N_CUST_CODE where  CUST_CD = A.CUST_CD) as TAX_CD ");
            sb.AppendLine("     ,(select S_CODE_NM FROM T_S_CODE WHERE L_CODE ='220' AND S_CODE = (SELECT TAX_CD from N_CUST_CODE where  CUST_CD = A.CUST_CD) ) AS TAX_NM ");
            sb.AppendLine("     ,DELIVER_REQ_DATE ");
            sb.AppendLine("     ,ORDER_YN ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine("     ,A.WORK_YN ");
            sb.AppendLine(" from F_PLAN A ");
            sb.AppendLine(" LEFT OUTER JOIN ( ");
            sb.AppendLine(" SELECT PLAN_DATE,PLAN_CD,COUNT(ITEM_CD) AS ITEM_CD FROM F_PLAN_DETAIL ");
            sb.AppendLine(" WHERE F_LEVEL = 1 ");
            sb.AppendLine(" GROUP BY PLAN_DATE,PLAN_CD) B ");
            sb.AppendLine(" ON A.PLAN_DATE = B.PLAN_DATE ");
            sb.AppendLine(" AND A.PLAN_CD = B.PLAN_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.PLAN_DATE desc, A.PLAN_CD desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        // 발주서 등록 조회

        public DataTable fn_Order_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ORDER_DATE");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,ISNULL(B.RAW_MAT_CNT,0) AS RAW_MAT_CNT ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '2' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,A.INPUT_REQ_DATE ");
            sb.AppendLine("     ,A.COMPLETE_YN ");
            sb.AppendLine("     ,A.STAFF_CD ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.STAFF_CD) as STAFF_NM ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from F_ORDER A ");
            sb.AppendLine(" LEFT OUTER JOIN ( ");
            sb.AppendLine(" SELECT ORDER_DATE,ORDER_CD,COUNT(RAW_MAT_CD) AS RAW_MAT_CNT FROM F_ORDER_DETAIL ");
            sb.AppendLine(" GROUP BY ORDER_DATE,ORDER_CD) B ");
            sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
            sb.AppendLine(" AND A.ORDER_CD = B.ORDER_CD  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ORDER_DATE desc, A.ORDER_CD desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        // 원자재 입고 등록 조회

        public DataTable fn_Rm_Input_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,ISNULL(B.RAW_MAT_CNT,0) AS RAW_MAT_CNT ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '2' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,C.TAX_CD  ");
            sb.AppendLine("     ,A.SLAUHOUSE_CD ");
            sb.AppendLine("     ,(select SLAUHOUSE_NM from N_SLAUHOUSE_CODE where SLAUHOUSE_CD = A.SLAUHOUSE_CD ) as SLAUHOUSE_NM  ");
            sb.AppendLine("     ,A.STORAGE_CD ");
            sb.AppendLine("     ,A.LOC_CD ");
            sb.AppendLine("     ,A.COMPLETE_YN ");
            sb.AppendLine("     ,A.INSTAFF ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.INSTAFF) as STAFF_NM ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from F_RAW_INPUT A ");
            sb.AppendLine(" LEFT OUTER JOIN ( ");
            sb.AppendLine(" SELECT INPUT_DATE,INPUT_CD,COUNT(RAW_MAT_CD) AS RAW_MAT_CNT FROM F_RAW_DETAIL ");
            sb.AppendLine(" GROUP BY INPUT_DATE,INPUT_CD) B ");
            sb.AppendLine(" ON A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine(" AND A.INPUT_CD = B.INPUT_CD  ");
            sb.AppendLine(" LEFT OUTER JOIN F_BUY C ");
            sb.AppendLine(" ON A.INPUT_DATE = C.INPUT_DATE ");
            sb.AppendLine(" AND A.INPUT_CD = C.INPUT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.INPUT_DATE desc, A.INPUT_CD desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }







        public DataTable fn_Plan_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.PLAN_DATE");
            sb.AppendLine("     ,A.RAW_ITEM_GUBUN ");
            sb.AppendLine("     ,A.PLAN_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.ITEM_CD ");
            sb.AppendLine("     ,A.WORK_YN ");
            sb.AppendLine("     ,B.ITEM_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , A.PRICE ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.F_LEVEL ");
            sb.AppendLine("     ,B.CHUGJONG_CD  ");
            sb.AppendLine("     ,B.CLASS_CD  ");
            sb.AppendLine("     ,B.COUNTRY_CD  ");
            sb.AppendLine("     ,B.TYPE_CD  ");
            sb.AppendLine("     ,B.LABEL_NM  ");
            sb.AppendLine("     ,B.VAT_CD  ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE CHUGJONG_CD = B.CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE CLASS_CD = B.CLASS_CD) AS CLASS_NM  ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE COUNTRY_CD = B.COUNTRY_CD) AS COUNTRY_NM  ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE TYPE_CD = B.TYPE_CD) AS TYPE_NM  ");

            sb.AppendLine("     , A.DEFAULT_AMT ");
            sb.AppendLine(" from F_PLAN_DETAIL A ");
            sb.AppendLine(" INNER JOIN N_ITEM_CODE B ");
            sb.AppendLine(" ON A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" AND A.RAW_ITEM_GUBUN = '2'");

            sb.AppendLine(condition);

            sb.AppendLine("UNION ALL");

            sb.AppendLine("select A.PLAN_DATE");
            sb.AppendLine("     ,A.RAW_ITEM_GUBUN ");
            sb.AppendLine("     ,A.PLAN_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.ITEM_CD ");
            sb.AppendLine("     ,A.WORK_YN ");
            sb.AppendLine("     ,B.RAW_MAT_NM AS ITEM_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , A.PRICE ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.F_LEVEL ");
            sb.AppendLine("     ,B.CHUGJONG_CD  ");
            sb.AppendLine("     ,B.CLASS_CD  ");
            sb.AppendLine("     ,B.COUNTRY_CD  ");
            sb.AppendLine("     ,B.TYPE_CD  ");
            sb.AppendLine("     ,B.LABEL_NM  ");
            sb.AppendLine("     ,B.VAT_CD  ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE CHUGJONG_CD = B.CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE CLASS_CD = B.CLASS_CD) AS CLASS_NM  ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE COUNTRY_CD = B.COUNTRY_CD) AS COUNTRY_NM  ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE TYPE_CD = B.TYPE_CD) AS TYPE_NM  ");

            sb.AppendLine("     , A.DEFAULT_AMT ");
            sb.AppendLine(" from F_PLAN_DETAIL A ");
            sb.AppendLine(" INNER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.ITEM_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" AND A.RAW_ITEM_GUBUN = '1'");

            sb.AppendLine(condition);
            sb.AppendLine(" order by A.PLAN_DATE,A.PLAN_CD,A.F_LEVEL,A.SEQ ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Soyo_Result_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("SELECT U.RAW_MAT_CD");
            sb.AppendLine("     , K.RAW_MAT_NM ");
            sb.AppendLine("     , K.SPEC ");
            sb.AppendLine("     , U.TOTAL_AMT * K.CVR_RATIO AS TOTAL_AMT ");
            sb.AppendLine("     , ISNULL(K.BAL_STOCK,0) AS BAL_STOCK  ");
            sb.AppendLine("     , ((U.TOTAL_AMT * K.CVR_RATIO)-K.BAL_STOCK) as RS_AMT    ");
            sb.AppendLine("     , K.INPUT_PRICE    ");
            sb.AppendLine("     , ((U.TOTAL_AMT * K.CVR_RATIO)-K.BAL_STOCK) * K.INPUT_PRICE AS TOTAL_MONEY   ");
            sb.AppendLine("     , K.OUTPUT_PRICE    ");
            sb.AppendLine("     , K.INPUT_UNIT ");
            sb.AppendLine("     , K.OUTPUT_UNIT ");
            sb.AppendLine("     , K.CUST_CD ");
            sb.AppendLine("     ,P.CUST_NM ");
            sb.AppendLine("     ,P.CUST_GUBUN ");
            sb.AppendLine("     ,DENSE_RANK() OVER(ORDER BY K.CUST_CD) AS CUST_NUM ");
            sb.AppendLine("     , (select S_CODE_NM ");
            sb.AppendLine("         from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("         where L_CODE = '200' and S_CODE = P.CUST_GUBUN) AS CUST_GUBUN_NM ");
            sb.AppendLine("     , (ISNULL(K.BAL_STOCK,0) - ISNULL(W.INST_RAW_AMT,0)) as REAL_AMT ");
            sb.AppendLine("     FROM ");
            sb.AppendLine("     ( ");
            sb.AppendLine("         select RAW_MAT_CD, SUM(TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine("         from ( ");
            sb.AppendLine("         select A.PLAN_DATE   ");
            sb.AppendLine("                 , A.PLAN_CD ");
            sb.AppendLine("                 , B.SEQ ");
            sb.AppendLine("                 , B.ITEM_CD ");
            sb.AppendLine("                 , C.RAW_MAT_CD ");
            sb.AppendLine("                 , ISNULL(C.TOTAL_AMT*B.TOTAL_AMT,0) AS TOTAL_AMT ");
            sb.AppendLine("         from F_PLAN A  ");
            sb.AppendLine("         left outer join F_PLAN_DETAIL B ");
            sb.AppendLine("         on A.PLAN_DATE = B.PLAN_DATE ");
            sb.AppendLine("             and A.PLAN_CD = B.PLAN_CD ");
            sb.AppendLine("         left outer join N_ITEM_COMP C ");
            sb.AppendLine("         on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine("         left outer join N_RAW_CODE D ");
            sb.AppendLine("         on C.RAW_MAT_CD = D.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine("         ) Z ");
            sb.AppendLine("         group by RAW_MAT_CD ");
            sb.AppendLine("     ) U ");
            sb.AppendLine(" left outer join N_RAW_CODE K ");
            sb.AppendLine(" on U.RAW_MAT_CD = K.RAW_MAT_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE P ");
            sb.AppendLine(" on K.CUST_CD = P.CUST_CD ");

            sb.AppendLine(" left outer join ( ");
            sb.AppendLine("     select ZZ.RAW_MAT_CD,SUM(TOTAL_AMT)AS INST_RAW_AMT ");
            sb.AppendLine("     from F_WORK_INST KK  ");
            sb.AppendLine("     inner join F_WORK_INST_DETAIL ZZ ");
            sb.AppendLine("     on KK.W_INST_DATE = ZZ.W_INST_DATE ");
            sb.AppendLine("         and KK.W_INST_CD = ZZ.W_INST_CD  ");
            sb.AppendLine("     where COMPLETE_YN = 'N'  ");
            sb.AppendLine("     group by ZZ.RAW_MAT_CD ");
            sb.AppendLine(" )W  ");
            sb.AppendLine(" on U.RAW_MAT_CD = W.RAW_MAT_CD  ");
            sb.AppendLine(" order by K.CUST_CD,U.RAW_MAT_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Order_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ORDER_DATE");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , A.PRICE ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.TOTAL_BOX_AMT ");
            sb.AppendLine("     , A.BOX_AMT ");
            sb.AppendLine(" from F_ORDER_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SEQ ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Input_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            //2019-11-19 이재원 축산 특화 씨지엠 기초코드를 출력하기 위해 추가
            // 2019-12-30 문세진 원자재입고식별표 로직 수정
            sb.AppendLine("     ,A.MF_DATE ");
            sb.AppendLine("     ,A.EXPRT_DATE ");
            sb.AppendLine("     ,A.UNION_CD ");
            sb.AppendLine("     ,A.CHUGJONG_CD ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM");
            sb.AppendLine("     ,A.TYPE_CD ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD) AS TYPE_NM");
            sb.AppendLine("     ,A.CLASS_CD ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,A.FROZEN_GUBUN ");
            sb.AppendLine("     ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_NM ");
            sb.AppendLine("     ,A.COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("     ,A.CURR_AMT ");
            sb.AppendLine("     ,A.STORAGE_CD ");
            sb.AppendLine("     ,A.LOC_CD ");
            sb.AppendLine("     ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS LABEL_NM ");
            sb.AppendLine("     ,(SELECT BOX_AMT FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS BOX_AMT ");
            sb.AppendLine("     ,A.GRADE_CD ");
            sb.AppendLine("     ,(SELECT GRADE_NM FROM N_GRADE_CODE WHERE A.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            //--수정끝
            sb.AppendLine("     ,B.HAMYANG ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,B.OUTPUT_UNIT AS OUTPUT_UNIT_CD ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            sb.AppendLine("     ,E.SLAUHOUSE_CD ");
            sb.AppendLine("     ,(SELECT SLAUHOUSE_NM FROM N_SLAUHOUSE_CODE WHERE SLAUHOUSE_CD = E.SLAUHOUSE_CD) AS SLAUHOUSE_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS PRICE");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.CHECK_YN ");
            sb.AppendLine("     , B.VAT_CD ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] A where L_CODE= '601'  and S_CODE = B.CHECK_GUBUN) AS CHECK_GUBUN_NM ");
            sb.AppendLine("     , case when ( SELECT count(D.OUTPUT_CD) FROM F_RAW_OUTPUT D LEFT OUTER JOIN F_RAW_DETAIL A ON A.INPUT_DATE = D.INPUT_DATE and A.INPUT_CD = D.INPUT_CD and A.SEQ = D.INPUT_SEQ " + condition + " and D.TOTAL_AMT != 0  ) = 0 THEN 0 ELSE 1 END AS OUTPUT_CD ");

            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(3), isnull(convert(int, A.INPUT_CD), 0)), 3) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            //2019-10-25 유정훈 수정 (바코드 출력물에 거래처명 표시
            sb.AppendLine("     , K.CUST_CD ");
            sb.AppendLine("     , D.CUST_NM ");
            sb.AppendLine(" from F_RAW_INPUT K ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on K.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("     and K.INPUT_CD = A.INPUT_CD ");
            // 수정 끝

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_CHK C");
            sb.AppendLine(" on A.INPUT_DATE = C.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = C.INPUT_CD");

            //2019-10-25 유정훈 바코드 출력물에 거래처명 표시 
            sb.AppendLine(" LEFT OUTER JOIN N_CUST_CODE D ");
            sb.AppendLine(" on K.CUST_CD = D.CUST_CD ");
            sb.AppendLine(" AND D.CUST_GUBUN = '2' ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_INPUT E");
            sb.AppendLine(" on A.INPUT_DATE = E.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = E.INPUT_CD");
            //수정 끝 
            sb.AppendLine(condition);

            sb.AppendLine(" order by A.INPUT_DATE desc, A.INPUT_CD desc, A.SEQ ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }



        public DataTable fn_Input_Detail_List_Add_StoreGubun(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            //2019-11-19 이재원 축산 특화 씨지엠 기초코드를 출력하기 위해 추가
            sb.AppendLine("     ,A.MF_DATE ");
            sb.AppendLine("     ,A.EXPRT_DATE ");
            sb.AppendLine("     ,A.UNION_CD ");
            sb.AppendLine("     ,A.CHUGJONG_CD ");
            sb.AppendLine("     ,A.TYPE_CD ");
            sb.AppendLine("     ,A.STORE_1F - ISNULL(R.TOTAL_AMT,0) AS CURR_AMT ");
            sb.AppendLine("     ,'STORE_1F' AS STORE_GUBUN ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD) AS TYPE_NM");
            sb.AppendLine("     ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS LABEL_NM ");
            sb.AppendLine("     ,(SELECT BOX_AMT FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS BOX_AMT ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,A.CLASS_CD ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,A.FROZEN_GUBUN ");
            sb.AppendLine("     ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_NM ");
            sb.AppendLine("     ,A.GRADE_CD ");
            sb.AppendLine("     ,(SELECT GRADE_NM FROM N_GRADE_CODE WHERE A.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("     ,A.COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            //--수정끝
            sb.AppendLine("     ,B.HAMYANG ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,B.OUTPUT_UNIT AS OUTPUT_UNIT_CD ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS PRICE");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.CHECK_YN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] A where L_CODE= '601'  and S_CODE = B.CHECK_GUBUN) AS CHECK_GUBUN_NM ");
            sb.AppendLine("     , case when ( SELECT count(D.OUTPUT_CD) FROM F_RAW_OUTPUT D LEFT OUTER JOIN F_RAW_DETAIL A ON A.INPUT_DATE = D.INPUT_DATE and A.INPUT_CD = D.INPUT_CD and A.SEQ = D.INPUT_SEQ " + condition + " and D.TOTAL_AMT != 0  ) = 0 THEN 0 ELSE 1 END AS OUTPUT_CD ");

            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            //2019-10-25 유정훈 수정 (바코드 출력물에 거래처명 표시
            sb.AppendLine("     , K.CUST_CD ");
            sb.AppendLine("     , D.CUST_NM ");

            sb.AppendLine(" from F_RAW_INPUT K ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on K.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("     and K.INPUT_CD = A.INPUT_CD ");
            // 수정 끝

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_CHK C");
            sb.AppendLine(" on A.INPUT_DATE = C.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = C.INPUT_CD");

            //2019-10-25 유정훈 바코드 출력물에 거래처명 표시 
            sb.AppendLine(" LEFT OUTER JOIN N_CUST_CODE D ");
            sb.AppendLine(" on K.CUST_CD = D.CUST_CD ");
            sb.AppendLine(" AND D.CUST_GUBUN = '2' ");

            sb.AppendLine("     LEFT OUTER JOIN ( ");
            sb.AppendLine(" select D.INPUT_DATE ");
            sb.AppendLine(" , D.INPUT_CD ");
            sb.AppendLine(" , D.INPUT_SEQ ");
            sb.AppendLine(" , SUM(TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" FROM F_OUT_JISI A ");
            sb.AppendLine(" LEFT OUTER JOIN F_OUT_JISI_DETAIL D ");
            sb.AppendLine(" on A.JISI_DATE = D.JISI_DATE ");
            sb.AppendLine(" and A.JISI_CD = D.JISI_CD ");
            sb.AppendLine(" where (A.COMPLETE_YN = 'N'  ");
            sb.AppendLine("  or A.COMPLETE_YN is null ) ");
            sb.AppendLine("  and D.STORE_GUBUN = 'STORE_1F' ");
            sb.AppendLine("  and D.PRODUCT_GUBUN = '1' ");
            sb.AppendLine("  GROUP BY D.INPUT_DATE, D.INPUT_CD, D.INPUT_SEQ ");
            sb.AppendLine("  ) R ");
            sb.AppendLine(" on R.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" and R.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" and R.INPUT_SEQ = A.SEQ ");

            //수정 끝 
            sb.AppendLine(condition + "  AND A.STORE_1F - ISNULL(R.TOTAL_AMT,0) > 0 ");

            sb.AppendLine("UNION ALL");

            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            //2019-11-19 이재원 축산 특화 씨지엠 기초코드를 출력하기 위해 추가
            sb.AppendLine("     ,A.MF_DATE ");
            sb.AppendLine("     ,A.EXPRT_DATE ");
            sb.AppendLine("     ,A.UNION_CD ");
            sb.AppendLine("     ,A.CHUGJONG_CD ");
            sb.AppendLine("     ,A.TYPE_CD ");
            sb.AppendLine("     ,A.STORE_UF - ISNULL(R.TOTAL_AMT,0) AS CURR_AMT ");
            sb.AppendLine("     ,'STORE_UF' AS STORE_GUBUN ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD) AS TYPE_NM");
            sb.AppendLine("     ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS LABEL_NM ");
            sb.AppendLine("     ,(SELECT BOX_AMT FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS BOX_AMT ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,A.CLASS_CD ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,A.FROZEN_GUBUN ");
            sb.AppendLine("     ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_NM ");
            sb.AppendLine("     ,A.GRADE_CD ");
            sb.AppendLine("     ,(SELECT GRADE_NM FROM N_GRADE_CODE WHERE A.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("     ,A.COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            //--수정끝
            sb.AppendLine("     ,B.HAMYANG ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,B.OUTPUT_UNIT AS OUTPUT_UNIT_CD ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS PRICE");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.CHECK_YN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] A where L_CODE= '601'  and S_CODE = B.CHECK_GUBUN) AS CHECK_GUBUN_NM ");
            sb.AppendLine("     , case when ( SELECT count(D.OUTPUT_CD) FROM F_RAW_OUTPUT D LEFT OUTER JOIN F_RAW_DETAIL A ON A.INPUT_DATE = D.INPUT_DATE and A.INPUT_CD = D.INPUT_CD and A.SEQ = D.INPUT_SEQ " + condition + " and D.TOTAL_AMT != 0  ) = 0 THEN 0 ELSE 1 END AS OUTPUT_CD ");

            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            //2019-10-25 유정훈 수정 (바코드 출력물에 거래처명 표시
            sb.AppendLine("     , K.CUST_CD ");
            sb.AppendLine("     , D.CUST_NM ");

            sb.AppendLine(" from F_RAW_INPUT K ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on K.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("     and K.INPUT_CD = A.INPUT_CD ");
            // 수정 끝

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_CHK C");
            sb.AppendLine(" on A.INPUT_DATE = C.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = C.INPUT_CD");

            //2019-10-25 유정훈 바코드 출력물에 거래처명 표시 
            sb.AppendLine(" LEFT OUTER JOIN N_CUST_CODE D ");
            sb.AppendLine(" on K.CUST_CD = D.CUST_CD ");
            sb.AppendLine(" AND D.CUST_GUBUN = '2' ");

            sb.AppendLine("     LEFT OUTER JOIN ( ");
            sb.AppendLine(" select D.INPUT_DATE ");
            sb.AppendLine(" , D.INPUT_CD ");
            sb.AppendLine(" , D.INPUT_SEQ ");
            sb.AppendLine(" , SUM(TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" FROM F_OUT_JISI A ");
            sb.AppendLine(" LEFT OUTER JOIN F_OUT_JISI_DETAIL D ");
            sb.AppendLine(" on A.JISI_DATE = D.JISI_DATE ");
            sb.AppendLine(" and A.JISI_CD = D.JISI_CD ");
            sb.AppendLine(" where (A.COMPLETE_YN = 'N'  ");
            sb.AppendLine("  or A.COMPLETE_YN is null ) ");
            sb.AppendLine("  and D.STORE_GUBUN = 'STORE_UF' ");
            sb.AppendLine("  and D.PRODUCT_GUBUN = '1' ");
            sb.AppendLine("  GROUP BY D.INPUT_DATE, D.INPUT_CD, D.INPUT_SEQ ");
            sb.AppendLine("  ) R ");
            sb.AppendLine(" on R.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" and R.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" and R.INPUT_SEQ = A.SEQ ");
            //수정 끝 
            sb.AppendLine(condition + "  AND A.STORE_UF - ISNULL(R.TOTAL_AMT,0)  > 0 ");

            sb.AppendLine(" UNION ALL ");

            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            //2019-11-19 이재원 축산 특화 씨지엠 기초코드를 출력하기 위해 추가
            sb.AppendLine("     ,A.MF_DATE ");
            sb.AppendLine("     ,A.EXPRT_DATE ");
            sb.AppendLine("     ,A.UNION_CD ");
            sb.AppendLine("     ,A.CHUGJONG_CD ");
            sb.AppendLine("     ,A.TYPE_CD ");
            sb.AppendLine("     ,A.STORE_1NF - ISNULL(R.TOTAL_AMT,0) AS CURR_AMT ");
            sb.AppendLine("     ,'STORE_1NF' AS STORE_GUBUN ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD) AS TYPE_NM");
            sb.AppendLine("     ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS LABEL_NM ");
            sb.AppendLine("     ,(SELECT BOX_AMT FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS BOX_AMT ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,A.CLASS_CD ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,A.FROZEN_GUBUN ");
            sb.AppendLine("     ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_NM ");
            sb.AppendLine("     ,A.GRADE_CD ");
            sb.AppendLine("     ,(SELECT GRADE_NM FROM N_GRADE_CODE WHERE A.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("     ,A.COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            //--수정끝
            sb.AppendLine("     ,B.HAMYANG ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,B.OUTPUT_UNIT AS OUTPUT_UNIT_CD ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS PRICE");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.CHECK_YN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] A where L_CODE= '601'  and S_CODE = B.CHECK_GUBUN) AS CHECK_GUBUN_NM ");
            sb.AppendLine("     , case when ( SELECT count(D.OUTPUT_CD) FROM F_RAW_OUTPUT D LEFT OUTER JOIN F_RAW_DETAIL A ON A.INPUT_DATE = D.INPUT_DATE and A.INPUT_CD = D.INPUT_CD and A.SEQ = D.INPUT_SEQ " + condition + " and D.TOTAL_AMT != 0  ) = 0 THEN 0 ELSE 1 END AS OUTPUT_CD ");

            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            //2019-10-25 유정훈 수정 (바코드 출력물에 거래처명 표시
            sb.AppendLine("     , K.CUST_CD ");
            sb.AppendLine("     , D.CUST_NM ");

            sb.AppendLine(" from F_RAW_INPUT K ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on K.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("     and K.INPUT_CD = A.INPUT_CD ");
            // 수정 끝

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_CHK C");
            sb.AppendLine(" on A.INPUT_DATE = C.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = C.INPUT_CD");

            //2019-10-25 유정훈 바코드 출력물에 거래처명 표시 
            sb.AppendLine(" LEFT OUTER JOIN N_CUST_CODE D ");
            sb.AppendLine(" on K.CUST_CD = D.CUST_CD ");
            sb.AppendLine(" AND D.CUST_GUBUN = '2' ");

            sb.AppendLine("     LEFT OUTER JOIN ( ");
            sb.AppendLine(" select D.INPUT_DATE ");
            sb.AppendLine(" , D.INPUT_CD ");
            sb.AppendLine(" , D.INPUT_SEQ ");
            sb.AppendLine(" , SUM(TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" FROM F_OUT_JISI A ");
            sb.AppendLine(" LEFT OUTER JOIN F_OUT_JISI_DETAIL D ");
            sb.AppendLine(" on A.JISI_DATE = D.JISI_DATE ");
            sb.AppendLine(" and A.JISI_CD = D.JISI_CD ");
            sb.AppendLine(" where (A.COMPLETE_YN = 'N'  ");
            sb.AppendLine("  or A.COMPLETE_YN is null ) ");
            sb.AppendLine("  and D.STORE_GUBUN = 'STORE_1NF' ");
            sb.AppendLine("  and D.PRODUCT_GUBUN = '1' ");
            sb.AppendLine("  GROUP BY D.INPUT_DATE, D.INPUT_CD, D.INPUT_SEQ ");
            sb.AppendLine("  ) R ");
            sb.AppendLine(" on R.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" and R.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" and R.INPUT_SEQ = A.SEQ ");
            //수정 끝 
            sb.AppendLine(condition + "  AND A.STORE_1NF - ISNULL(R.TOTAL_AMT,0)  > 0 ");

            sb.AppendLine(" UNION ALL ");

            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            //2019-11-19 이재원 축산 특화 씨지엠 기초코드를 출력하기 위해 추가
            sb.AppendLine("     ,A.MF_DATE ");
            sb.AppendLine("     ,A.EXPRT_DATE ");
            sb.AppendLine("     ,A.UNION_CD ");
            sb.AppendLine("     ,A.CHUGJONG_CD ");
            sb.AppendLine("     ,A.TYPE_CD ");
            sb.AppendLine("     ,A.REMAIN_AMT - ISNULL(R.TOTAL_AMT,0) AS CURR_AMT ");
            sb.AppendLine("     ,'REMAIN_AMT' AS STORE_GUBUN ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD) AS TYPE_NM");
            sb.AppendLine("     ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS LABEL_NM ");
            sb.AppendLine("     ,(SELECT BOX_AMT FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS BOX_AMT ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,A.CLASS_CD ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,A.FROZEN_GUBUN ");
            sb.AppendLine("     ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_NM ");
            sb.AppendLine("     ,A.GRADE_CD ");
            sb.AppendLine("     ,(SELECT GRADE_NM FROM N_GRADE_CODE WHERE A.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("     ,A.COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            //--수정끝
            sb.AppendLine("     ,B.HAMYANG ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,B.OUTPUT_UNIT AS OUTPUT_UNIT_CD ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS PRICE");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.CHECK_YN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] A where L_CODE= '601'  and S_CODE = B.CHECK_GUBUN) AS CHECK_GUBUN_NM ");
            sb.AppendLine("     , case when ( SELECT count(D.OUTPUT_CD) FROM F_RAW_OUTPUT D LEFT OUTER JOIN F_RAW_DETAIL A ON A.INPUT_DATE = D.INPUT_DATE and A.INPUT_CD = D.INPUT_CD and A.SEQ = D.INPUT_SEQ " + condition + " and D.TOTAL_AMT != 0  ) = 0 THEN 0 ELSE 1 END AS OUTPUT_CD ");

            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            //2019-10-25 유정훈 수정 (바코드 출력물에 거래처명 표시
            sb.AppendLine("     , K.CUST_CD ");
            sb.AppendLine("     , D.CUST_NM ");

            sb.AppendLine(" from F_RAW_INPUT K ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on K.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("     and K.INPUT_CD = A.INPUT_CD ");
            // 수정 끝

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_CHK C");
            sb.AppendLine(" on A.INPUT_DATE = C.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = C.INPUT_CD");

            //2019-10-25 유정훈 바코드 출력물에 거래처명 표시 
            sb.AppendLine(" LEFT OUTER JOIN N_CUST_CODE D ");
            sb.AppendLine(" on K.CUST_CD = D.CUST_CD ");
            sb.AppendLine(" AND D.CUST_GUBUN = '2' ");

            sb.AppendLine("     LEFT OUTER JOIN ( ");
            sb.AppendLine(" select D.INPUT_DATE ");
            sb.AppendLine(" , D.INPUT_CD ");
            sb.AppendLine(" , D.INPUT_SEQ ");
            sb.AppendLine(" , SUM(TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" FROM F_OUT_JISI A ");
            sb.AppendLine(" LEFT OUTER JOIN F_OUT_JISI_DETAIL D ");
            sb.AppendLine(" on A.JISI_DATE = D.JISI_DATE ");
            sb.AppendLine(" and A.JISI_CD = D.JISI_CD ");
            sb.AppendLine(" where (A.COMPLETE_YN = 'N'  ");
            sb.AppendLine("  or A.COMPLETE_YN is null ) ");
            sb.AppendLine("  and D.STORE_GUBUN = 'REMAIN_AMT' ");
            sb.AppendLine("  and D.PRODUCT_GUBUN = '1' ");
            sb.AppendLine("  GROUP BY D.INPUT_DATE, D.INPUT_CD, D.INPUT_SEQ ");
            sb.AppendLine("  ) R ");
            sb.AppendLine(" on R.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" and R.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" and R.INPUT_SEQ = A.SEQ ");
            //수정 끝 
            sb.AppendLine(condition + "  AND A.REMAIN_AMT  - ISNULL(R.TOTAL_AMT,0) > 0 ");

            sb.AppendLine(" order by A.INPUT_DATE desc, A.INPUT_CD desc, A.SEQ ");




            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Input_Detail_List2(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            //2019-11-19 이재원 축산 특화 씨지엠 기초코드를 출력하기 위해 추가
            sb.AppendLine("     ,A.MF_DATE ");
            sb.AppendLine("     ,A.EXPRT_DATE ");
            sb.AppendLine("     ,A.UNION_CD ");
            sb.AppendLine("     ,A.CHUGJONG_CD ");
            sb.AppendLine("     ,A.TYPE_CD ");
            sb.AppendLine("     ,A.CURR_AMT ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD) AS TYPE_NM");
            sb.AppendLine("     ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS LABEL_NM ");
            sb.AppendLine("     ,(SELECT BOX_AMT FROM N_RAW_CODE WHERE A.RAW_MAT_CD = RAW_MAT_CD) AS BOX_AMT ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,A.CLASS_CD ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,A.FROZEN_GUBUN ");
            sb.AppendLine("     ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_NM ");
            sb.AppendLine("     ,A.GRADE_CD ");
            sb.AppendLine("     ,(SELECT GRADE_NM FROM N_GRADE_CODE WHERE A.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("     ,A.COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            //--수정끝
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,B.OUTPUT_UNIT AS OUTPUT_UNIT_CD ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.OUTPUT_UNIT) AS OUTPUT_UNIT_NM  ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_AMT) AS TOTAL_AMT ");
            //sb.AppendLine("     ,FLOOR(A.PRICE) AS PRICE ");
            //sb.AppendLine("     ,FLOOR(A.TOTAL_MONEY) AS TOTAL_MONEY ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS PRICE");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , A.CHECK_YN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] A where L_CODE= '601'  and S_CODE = B.CHECK_GUBUN) AS CHECK_GUBUN_NM ");
            sb.AppendLine("     , case when ( SELECT count(D.OUTPUT_CD) FROM F_RAW_OUTPUT D LEFT OUTER JOIN F_RAW_DETAIL A ON A.INPUT_DATE = D.INPUT_DATE and A.INPUT_CD = D.INPUT_CD and A.SEQ = D.INPUT_SEQ " + condition + " and D.TOTAL_AMT != 0  ) = 0 THEN 0 ELSE 1 END AS OUTPUT_CD ");

            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            //2019-10-25 유정훈 수정 (바코드 출력물에 거래처명 표시
            sb.AppendLine("     , K.CUST_CD ");
            sb.AppendLine("     , D.CUST_NM ");

            sb.AppendLine(" from F_RAW_INPUT K ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on K.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine("     and K.INPUT_CD = A.INPUT_CD ");
            // 수정 끝

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_CHK C");
            sb.AppendLine(" on A.INPUT_DATE = C.INPUT_DATE");
            sb.AppendLine(" and A.INPUT_CD = C.INPUT_CD");

            //2019-10-25 유정훈 바코드 출력물에 거래처명 표시 
            sb.AppendLine(" LEFT OUTER JOIN N_CUST_CODE D ");
            sb.AppendLine(" on K.CUST_CD = D.CUST_CD ");
            sb.AppendLine(" AND D.CUST_GUBUN = '2' ");
            //수정 끝 
            sb.AppendLine(condition2);

            sb.AppendLine(" order by A.INPUT_DATE desc, A.INPUT_CD desc, A.SEQ ");




            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //원자재 수입검사 리스트 

        public DataTable fn_Input_Chk_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,B.RAW_MAT_NM  ");
            sb.AppendLine("     ,B.SPEC    ");
            sb.AppendLine("     ,C.CUST_CD    ");
            sb.AppendLine("     ,C.CUST_NM    ");
            sb.AppendLine("     ,A.HEAT_NO ");
            sb.AppendLine("     ,A.HEAT_TIME ");
            sb.AppendLine("     ,A.ORDER_DATE ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,A.ORDER_SEQ ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            sb.AppendLine("     ,A.CHECK_YN ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = A.CHECK_YN)  AS CHECK_NM ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     , A.TEMP_AMT ");
            sb.AppendLine("     , A.TOTAL_AMT ");
            sb.AppendLine("     , A.PRICE ");
            //sb.AppendLine("     , A.RAW_HST_CD ");
            sb.AppendLine("     , A.TOTAL_MONEY ");
            sb.AppendLine("     , F.CHK_DATE ");
            sb.AppendLine("     , F.PASS_YN ");
            //---hsp 출력을위해 추가
            sb.AppendLine("     , right('000' + convert(varchar(4), isnull(convert(int, A.INPUT_CD), 0)), 4) AS 번호");
            sb.AppendLine("     , right('0' + convert(varchar(2), isnull(convert(int, A.SEQ), 0)), 2) AS 순번");

            sb.AppendLine(" from F_RAW_INPUT Z ");
            sb.AppendLine(" inner join F_RAW_DETAIL A ");
            sb.AppendLine(" on Z.INPUT_DATE = A.INPUT_DATE");
            sb.AppendLine("     and Z.INPUT_CD = A.INPUT_CD");
            sb.AppendLine(" inner join N_RAW_CODE B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine("     and B.CHECK_GUBUN = '1' ");
            sb.AppendLine(" inner join N_CUST_CODE C ");
            sb.AppendLine(" on Z.CUST_CD = C.CUST_CD ");
            sb.AppendLine("     and C.CUST_GUBUN = '2' ");
            sb.AppendLine(" left outer join F_RAW_CHK F ");
            sb.AppendLine(" on Z.INPUT_DATE = F.INPUT_DATE");
            sb.AppendLine("     and Z.INPUT_CD = F.INPUT_CD");
            sb.AppendLine("     and A.SEQ = F.SEQ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by Z.INPUT_DATE desc,Z.INPUT_CD desc,A.SEQ ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //원자재 수입검사 리스트 

        public DataTable fn_Input_Chk_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.CONTROL_NO ");
            sb.AppendLine("     ,A.PART_NO ");
            sb.AppendLine("     ,A.CHK_TOTAL_AMT ");
            sb.AppendLine("     ,A.PASS_AMT ");
            sb.AppendLine("     ,A.PRI_NON_PASS_AMT ");
            sb.AppendLine("     ,A.UPD_COM_AMT ");
            sb.AppendLine("     ,A.FINAL_NON_PASS_AMT ");
            sb.AppendLine("     ,A.FINAL_PASS_AMT ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("from F_RAW_CHK A ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Input_Chk_Poor_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.POOR_SEQ ");
            sb.AppendLine("     ,A.TYPE_CD ");
            sb.AppendLine("     ,A.POOR_NM ");
            sb.AppendLine("     ,A.PRI_NON_PASS_AMT ");
            sb.AppendLine("     ,A.UPD_DETAIL ");
            sb.AppendLine("     ,A.UPD_PASS_AMT ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine("from F_RAW_CHK_POOR A ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);

        }
        //원자재 원장 리스트
        public DataTable fn_Input_Rm_Ledger_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            //sb.AppendLine("select A.INPUT_DATE");
            //sb.AppendLine("     ,A.INPUT_CD ");
            //sb.AppendLine("     ,A.SEQ ");
            //sb.AppendLine("     ,Z.CUST_CD ");
            //sb.AppendLine("     ,C.CUST_NM ");
            //sb.AppendLine("     ,A.RAW_MAT_CD ");
            //sb.AppendLine("     ,B.RAW_MAT_NM  ");
            //sb.AppendLine("     ,B.SPEC    ");
            //sb.AppendLine("     ,A.HEAT_NO ");
            //sb.AppendLine("     ,A.HEAT_TIME ");
            //sb.AppendLine("     ,A.ORDER_DATE ");
            //sb.AppendLine("     ,A.ORDER_CD ");
            //sb.AppendLine("     ,A.ORDER_SEQ ");
            //sb.AppendLine("     ,B.RAW_MAT_GUBUN ");
            //sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            //sb.AppendLine("     ,A.UNIT_CD ");
            //sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS UNIT_NM  ");
            //sb.AppendLine("     , A.TOTAL_AMT ");
            //sb.AppendLine("     , A.PRICE ");
            //sb.AppendLine("     , A.TOTAL_MONEY ");

            //---hsp 출력물하면서 수정
            sb.AppendLine("select '' as no,  A.INPUT_DATE AS 입고일자 ");
            sb.AppendLine("     ,A.INPUT_CD AS 입고번호 ");
            sb.AppendLine("     ,A.SEQ AS 입고순번 ");
            sb.AppendLine("     ,Z.CUST_CD AS 거래처코드 ");
            sb.AppendLine("     ,C.CUST_NM AS 거래처명 ");
            sb.AppendLine("     ,A.RAW_MAT_CD AS 원부재료코드 ");
            sb.AppendLine("     ,B.RAW_MAT_NM AS 원부재료명   ");
            sb.AppendLine("     ,B.SPEC AS  규격    ");
            sb.AppendLine("     ,A.HEAT_NO AS HEATNO ");
            sb.AppendLine("     ,A.HEAT_TIME AS HEATTIME ");
            sb.AppendLine("     ,A.ORDER_DATE AS 주문일자 ");
            sb.AppendLine("     ,A.ORDER_CD AS 주문번호 ");
            sb.AppendLine("     ,A.ORDER_SEQ AS 주문순번 ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN AS 구분코드 ");
            sb.AppendLine("     , (select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = B.RAW_MAT_GUBUN) AS 구분명 ");
            sb.AppendLine("     ,A.UNIT_CD AS 단위코드 ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) AS 단위명");
            sb.AppendLine("     , ISNULL(A.TEMP_AMT,0) AS 가입고수량 ");
            sb.AppendLine("     , ISNULL(A.TOTAL_AMT,0) AS 수량 ");
            sb.AppendLine("     , ISNULL(A.PRICE,0) AS 단가 ");
            sb.AppendLine("     , ISNULL(A.TOTAL_MONEY,0) AS 금액 ");
            sb.AppendLine(" from F_RAW_INPUT Z  ");
            sb.AppendLine(" left outer join F_RAW_DETAIL A  ");
            sb.AppendLine(" on Z.INPUT_DATE = A.INPUT_DATE  ");
            sb.AppendLine("     and Z.INPUT_CD = A.INPUT_CD   ");

            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE C");
            sb.AppendLine(" on Z.CUST_CD = C.CUST_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SEQ ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //매출처 원장 리스트 
        public DataTable fn_Sales_Ledger_List(string condition, string condition2, string cust_cd, string start_date)
        {

            StringBuilder sb2 = new StringBuilder();
            sb2.AppendLine("   select     ");
            sb2.AppendLine("  			 Z.SALES_DATE AS SALES_DATE      ");
            sb2.AppendLine("  			 , SUM(A.TOTAL_AMT) AS  TOTAL_AMT     ");
            sb2.AppendLine("  			 , SUM(A.TOTAL_PRICE) AS  TOTAL_PRICE      ");
            sb2.AppendLine("  			 , AVG(Z.ALL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY    ");
            sb2.AppendLine("  			 , AVG(Z.ALL_TAX_MONEY) AS TOTAL_TAX_MONEY   ");
            sb2.AppendLine("  			 , AVG(Z.ALL_TOTAL_MONEY) AS TOTAL_MONEY   ");
            sb2.AppendLine("  			 , 0 AS SOO_MONEY    ");
            sb2.AppendLine("  			 , 0 AS DC_MONEY    ");
            sb2.AppendLine("  			 , 0 AS TOTAL_SOO_MONEY    ");
            sb2.AppendLine("  		 from F_SALES Z       ");
            sb2.AppendLine("  		 left outer join F_SALES_DETAIL A      ");
            sb2.AppendLine("  		 on Z.SALES_DATE = A.SALES_DATE     ");
            sb2.AppendLine("  			 and Z.SALES_CD = A.SALES_CD      ");
            sb2.AppendLine("  		 where 1=1  ");
            sb2.AppendLine(condition);
            sb2.AppendLine("  		 group by Z.SALES_DATE , Z.SALES_CD     ");

            sb2.AppendLine("  		 union all  ");

            sb2.AppendLine("		 select     ");
            sb2.AppendLine("			 Z.SOO_DATE AS SALES_DATE      ");
            sb2.AppendLine("			 , 0 AS  TOTAL_AMT       ");
            sb2.AppendLine("			 , 0 AS  TOTAL_PRICE        ");
            sb2.AppendLine("			 , 0 AS TOTAL_SUPPLY_MONEY        ");
            sb2.AppendLine("			 , 0 AS TOTAL_TAX_MONEY      ");
            sb2.AppendLine("			 , 0 AS TOTAL_MONEY     ");
            sb2.AppendLine("			 ,AVG(ISNULL(SOO_MONEY,0)) AS SOO_MONEY     ");
            sb2.AppendLine("			 ,AVG(ISNULL(DC_MONEY,0)) AS DC_MONEY     ");
            sb2.AppendLine("			 ,AVG(ISNULL(TOTAL_MONEY,0)) AS TOTAL_SOO_MONEY     ");
            sb2.AppendLine("		 from F_COLLECT Z      ");
            sb2.AppendLine("		 where 1=1  ");
            sb2.AppendLine(condition2);
            sb2.AppendLine("		 group by Z.SOO_DATE , Z.SOO_CD   ");

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("       select '매출' as bun    ");
            sb.AppendLine("       ,A.SALES_DATE       ");
            sb.AppendLine("       ,A.SALES_DATE AS 일자명칭    ");
            sb.AppendLine("       ,A.SALES_CD       ");
            sb.AppendLine("       ,A.SEQ    ");
            sb.AppendLine("       ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1210' and Z.SALES_GUBUN = S_CODE ) AS INPUT_GUBUN    ");
            sb.AppendLine("       ,Z.CUST_CD     ");
            sb.AppendLine("       ,C.CUST_NM     ");
            sb.AppendLine("       ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='220' and C.TAX_CD = S_CODE) AS TAX_NM    ");
            sb.AppendLine("       ,C.TAX_CD   ");
            sb.AppendLine("       ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='410' and B.VAT_CD = S_CODE) AS VAT_NM     ");
            sb.AppendLine("       ,B.VAT_CD   ");
            sb.AppendLine("       ,B.RAW_MAT_NM AS PRODUCT_NM      ");
            sb.AppendLine("       , ISNULL(A.TOTAL_AMT,0) AS TOTAL_AMT   ");
            sb.AppendLine("       , ISNULL(A.TOTAL_PRICE,0) AS TOTAL_PRICE      ");
            sb.AppendLine("       , case when C.TAX_CD = '1' and B.VAT_CD = '1'      ");
            sb.AppendLine("        then ( (A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 ) )      ");
            sb.AppendLine("        else (A.TOTAL_AMT * A.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY    ");
            sb.AppendLine("        ,case when B.VAT_CD = '2'    ");
            sb.AppendLine("        then 0   ");
            sb.AppendLine("        else case when C.TAX_CD = '0'  OR C.TAX_CD = '2'     ");
            sb.AppendLine("        then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1    ");
            sb.AppendLine("        else ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 ) end end as TOTAL_TAX_MONEY    ");
            sb.AppendLine("        ,case when B.VAT_CD = '1'   ");
            sb.AppendLine("        then      ");
            sb.AppendLine("  		case when C.TAX_CD = '2'   ");
            sb.AppendLine("  			then   ");
            sb.AppendLine("  				(A.TOTAL_AMT*A.TOTAL_PRICE)      ");
            sb.AppendLine("  			else      ");
            sb.AppendLine("  				case when C.TAX_CD ='1'   ");
            sb.AppendLine("  				then (A.TOTAL_AMT*A.TOTAL_PRICE)     ");
            sb.AppendLine("  				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end     ");
            sb.AppendLine("  				end    ");
            sb.AppendLine("        else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY   ");
            sb.AppendLine("       ,0			   AS SOO_MONEY    ");
            sb.AppendLine("       ,0			   AS DC_MONEY    ");
            sb.AppendLine("       ,0			   AS TOTAL_SOO_MONEY    ");
            sb.AppendLine("       ,0			   AS BALANCE    ");

            sb.AppendLine("       , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD ) AS CHUGJONG_NM    ");
            sb.AppendLine("       , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM   ");
            sb.AppendLine("       , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM     ");
            sb.AppendLine("       , B.LABEL_NM    ");
            sb.AppendLine("       , D.UNION_CD   ");
            sb.AppendLine("   from F_SALES Z  ");
            sb.AppendLine("   left outer join F_SALES_DETAIL A   ");
            sb.AppendLine("   on Z.SALES_DATE = A.SALES_DATE     ");
            sb.AppendLine("       and Z.SALES_CD = A.SALES_CD    ");
            sb.AppendLine("   left outer join N_RAW_CODE B       ");
            sb.AppendLine("   on A.PRODUCT_CD = B.RAW_MAT_CD     ");
            sb.AppendLine("   left outer join N_CUST_CODE C      ");
            sb.AppendLine("   on Z.CUST_CD = C.CUST_CD           ");
            sb.AppendLine("   left outer join F_RAW_DETAIL D     ");
            sb.AppendLine("   on D.INPUT_DATE = A.INPUT_DATE     ");
            sb.AppendLine("   and D.INPUT_CD = A.INPUT_CD    ");
            sb.AppendLine("   and D.SEQ = A.INPUT_SEQ    ");
            sb.AppendLine("  where A.PRODUCT_GUBUN = '1'      ");
            sb.AppendLine(condition);

            sb.AppendLine("  union all  ");

            sb.AppendLine("  select '매출' as bun   ");
            sb.AppendLine("       ,A.SALES_DATE    ");
            sb.AppendLine("       ,A.SALES_DATE AS 일자명칭   ");
            sb.AppendLine("       ,A.SALES_CD    ");
            sb.AppendLine("       ,A.SEQ       ");
            sb.AppendLine("       ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1210' and Z.SALES_GUBUN = S_CODE ) AS INPUT_GUBUN    ");
            sb.AppendLine("       ,Z.CUST_CD   ");
            sb.AppendLine("       ,C.CUST_NM   ");
            sb.AppendLine("       ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='220' and C.TAX_CD = S_CODE) AS TAX_NM    ");
            sb.AppendLine("       ,C.TAX_CD      ");
            sb.AppendLine("       ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='410' and B.VAT_CD = S_CODE) AS VAT_NM    ");
            sb.AppendLine("       ,B.VAT_CD   ");
            sb.AppendLine("       ,B.ITEM_NM AS PRODUCT_NM    ");
            sb.AppendLine("       , ISNULL(A.TOTAL_AMT,0) AS TOTAL_AMT     ");
            sb.AppendLine("       , ISNULL(A.TOTAL_PRICE,0) AS TOTAL_PRICE       ");
            sb.AppendLine("       , case when C.TAX_CD = '1' and B.VAT_CD = '1'      ");
            sb.AppendLine("        then ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )    ");
            sb.AppendLine("        else (A.TOTAL_AMT * A.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY  ");
            sb.AppendLine("        ,case when B.VAT_CD = '2' OR C.TAX_CD = '2'  ");
            sb.AppendLine("        then 0    ");
            sb.AppendLine("        else case when C.TAX_CD = '0'     ");
            sb.AppendLine("        then (A.TOTAL_AMT * A.TOTAL_PRICE)*0.1      ");
            sb.AppendLine("        else ((A.TOTAL_AMT * A.TOTAL_PRICE) - ROUND((A.TOTAL_AMT * A.TOTAL_PRICE)/1.1 ,0 )) end end as TOTAL_TAX_MONEY    ");
            sb.AppendLine("       ,case when B.VAT_CD = '1'   ");
            sb.AppendLine("        then   ");
            sb.AppendLine("  		case when C.TAX_CD = '2'       ");
            sb.AppendLine("  			then    ");
            sb.AppendLine("  				(A.TOTAL_AMT*A.TOTAL_PRICE)    ");
            sb.AppendLine("  			else     ");
            sb.AppendLine("  				case when C.TAX_CD ='1'   ");
            sb.AppendLine("  				then (A.TOTAL_AMT*A.TOTAL_PRICE)    ");
            sb.AppendLine("  				else (A.TOTAL_AMT*A.TOTAL_PRICE)+((A.TOTAL_AMT*A.TOTAL_PRICE)*0.1) end   ");
            sb.AppendLine("  				end     ");
            sb.AppendLine("        else (A.TOTAL_AMT * A.TOTAL_PRICE) end AS TOTAL_MONEY     ");
            sb.AppendLine("       ,0			   AS SOO_MONEY     ");
            sb.AppendLine("       ,0			   AS DC_MONEY    ");
            sb.AppendLine("       ,0			   AS TOTAL_SOO_MONEY    ");
            sb.AppendLine("       ,0			   AS BALANCE    ");

            sb.AppendLine("       , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD ) AS CHUGJONG_NM    ");
            sb.AppendLine("       , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM   ");
            sb.AppendLine("       , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM   ");
            sb.AppendLine("       , B.LABEL_NM    ");
            sb.AppendLine("       , D.A_UNION_CD      ");
            sb.AppendLine("   from F_SALES Z     ");
            sb.AppendLine("   left outer join F_SALES_DETAIL A     ");
            sb.AppendLine("   on Z.SALES_DATE = A.SALES_DATE  ");
            sb.AppendLine("       and Z.SALES_CD = A.SALES_CD       ");
            sb.AppendLine("   left outer join N_ITEM_CODE B  ");
            sb.AppendLine("   on A.PRODUCT_CD = B.ITEM_CD   ");
            sb.AppendLine("   left outer join N_CUST_CODE C    ");
            sb.AppendLine("   on Z.CUST_CD = C.CUST_CD     ");
            sb.AppendLine("   left outer join F_ITEM_INPUT_DETAIL D     ");
            sb.AppendLine("   on D.INPUT_DATE = A.INPUT_DATE     ");
            sb.AppendLine("   and D.INPUT_CD = A.INPUT_CD    ");
            sb.AppendLine("   and D.SEQ = A.INPUT_SEQ     ");
            sb.AppendLine("  where A.PRODUCT_GUBUN = '2'    ");
            sb.AppendLine(condition);

            sb.AppendLine("  union all    ");

            sb.AppendLine("  SELECT  ");
            sb.AppendLine("  '' as bun    ");
            sb.AppendLine("  	 ,SALES_DATE     ");
            sb.AppendLine("       ,'--- 일계 ---' AS 일자명칭   ");
            sb.AppendLine("       ,'999999' AS INPUT_CD  ");
            sb.AppendLine("       ,'' AS SEQ     ");
            sb.AppendLine("       ,'' AS INPUT_GUBUN       ");
            sb.AppendLine("       ,'' AS CUST_CD      ");
            sb.AppendLine("       ,'' AS CUST_NM     ");
            sb.AppendLine("       ,'' AS TAX_CD    ");
            sb.AppendLine("       ,'' AS TAX_NM    ");
            sb.AppendLine("       ,'' AS VAT_CD     ");
            sb.AppendLine("       ,'' AS VAT_NM      ");
            sb.AppendLine("       ,'' AS  PRODUCT_NM        ");
            sb.AppendLine("       ,sum(TOTAL_AMT) AS  TOTAL_AMT      ");
            sb.AppendLine("       ,0 AS  TOTAL_PRICE      ");
            sb.AppendLine("  	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY     ");
            sb.AppendLine("  	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY    ");
            sb.AppendLine("  	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY     ");
            sb.AppendLine("  	   ,sum(SOO_MONEY) AS SOO_MONEY     ");
            sb.AppendLine("  	   ,sum(DC_MONEY) AS DC_MONEY     ");
            sb.AppendLine("  	   ,sum(TOTAL_SOO_MONEY) AS TOTAL_SOO_MONEY     ");
            sb.AppendLine("  	   ,ISNULL((SELECT BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE = SALES_DATE),0) AS BALANCE  ");
            sb.AppendLine("       ,'' AS  CHUGJONG_NM     ");
            sb.AppendLine("       ,'' AS  CLASS_NM       ");
            sb.AppendLine("       ,'' AS  COUNTRY_NM      ");
            sb.AppendLine("       ,'' AS  LABEL_NM     ");
            sb.AppendLine("       ,'' AS  UNION_CD     ");
            sb.AppendLine("  		 FROM ( " + sb2.ToString());
            sb.AppendLine("	) A group by A.SALES_DATE       ");

            sb.AppendLine("  union all       ");

            sb.AppendLine("  SELECT         ");
            sb.AppendLine("  '' as bun           ");
            sb.AppendLine("  	 ,left(SALES_DATE,8)+'99' AS SALES_DATE     ");
            sb.AppendLine("       ,'=== 월계 ===' AS 일자명칭       ");
            sb.AppendLine("       ,'999999' AS INPUT_CD      ");
            sb.AppendLine("       ,'' AS SEQ       ");
            sb.AppendLine("       ,'' AS INPUT_GUBUN      ");
            sb.AppendLine("       ,'' AS CUST_CD   ");
            sb.AppendLine("       ,'' AS CUST_NM   ");
            sb.AppendLine("       ,'' AS TAX_CD     ");
            sb.AppendLine("       ,'' AS TAX_NM     ");
            sb.AppendLine("       ,'' AS VAT_CD     ");
            sb.AppendLine("       ,'' AS VAT_NM      ");
            sb.AppendLine("       ,'' AS  PRODUCT_NM        ");
            sb.AppendLine("        ,sum(TOTAL_AMT) AS  TOTAL_AMT     ");
            sb.AppendLine("        ,0 AS  TOTAL_PRICE       ");
            sb.AppendLine("  	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY     ");
            sb.AppendLine("  	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY    ");
            sb.AppendLine("  	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY    ");
            sb.AppendLine("  	   ,sum(SOO_MONEY) AS SOO_MONEY     ");
            sb.AppendLine("  	   ,sum(DC_MONEY) AS DC_MONEY     ");
            sb.AppendLine("  	   ,sum(TOTAL_SOO_MONEY) AS TOTAL_SOO_MONEY     ");
            sb.AppendLine("  	   ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= MAX(SALES_DATE)  order by INPUT_DATE DESC),0) AS BALANCE        ");
            sb.AppendLine("       ,'' AS  CHUGJONG_NM     ");
            sb.AppendLine("       ,'' AS  CLASS_NM     ");
            sb.AppendLine("       ,'' AS  COUNTRY_NM    ");
            sb.AppendLine("       ,'' AS  LABEL_NM      ");
            sb.AppendLine("       ,'' AS  UNION_CD       ");
            sb.AppendLine("  		 FROM ( " + sb2.ToString());
            sb.AppendLine("   ) A group by left(A.SALES_DATE,8)    ");

            sb.AppendLine("  union all  ");

            sb.AppendLine("  SELECT    ");
            sb.AppendLine("  '' as bun         ");
            sb.AppendLine("  	 ,left(SALES_DATE,2)+'99-99-99' AS SALES_DATE      ");
            sb.AppendLine("       ,'=== 합계 ===' AS 일자명칭     ");
            sb.AppendLine("       ,'999999' AS INPUT_CD        ");
            sb.AppendLine("       ,'' AS SEQ      ");
            sb.AppendLine("       ,'' AS INPUT_GUBUN     ");
            sb.AppendLine("       ,'' AS CUST_CD       ");
            sb.AppendLine("       ,'' AS CUST_NM      ");
            sb.AppendLine("       ,'' AS TAX_CD     ");
            sb.AppendLine("       ,'' AS TAX_NM      ");
            sb.AppendLine("       ,'' AS VAT_CD       ");
            sb.AppendLine("       ,'' AS VAT_NM       ");
            sb.AppendLine("       ,'' AS  PRODUCT_NM        ");
            sb.AppendLine("       ,sum(TOTAL_AMT) AS  TOTAL_AMT     ");
            sb.AppendLine("       ,0 AS  TOTAL_PRICE        ");
            sb.AppendLine("  	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY    ");
            sb.AppendLine("  	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY    ");
            sb.AppendLine("  	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY       ");
            sb.AppendLine("  	   ,sum(SOO_MONEY) AS SOO_MONEY     ");
            sb.AppendLine("  	   ,sum(DC_MONEY) AS DC_MONEY     ");
            sb.AppendLine("  	   ,sum(TOTAL_SOO_MONEY) AS TOTAL_SOO_MONEY     ");
            sb.AppendLine("  	   ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= MAX(SALES_DATE)  order by INPUT_DATE DESC),0) AS BALANCE      ");
            sb.AppendLine("       ,'' AS  CHUGJONG_NM   ");
            sb.AppendLine("       ,'' AS  CLASS_NM     ");
            sb.AppendLine("       ,'' AS  COUNTRY_NM     ");
            sb.AppendLine("       ,'' AS  LABEL_NM      ");
            sb.AppendLine("       ,'' AS  UNION_CD       ");
            sb.AppendLine("   FROM ( " + sb2.ToString());
            sb.AppendLine("   ) A group by left(A.SALES_DATE,2)    ");

            sb.AppendLine("  union all  ");

            sb.AppendLine("  select     ");
            sb.AppendLine("  	 '수금' as bun          ");
            sb.AppendLine("  	 ,SOO_DATE AS SALES_DATE       ");
            sb.AppendLine("       ,SOO_DATE AS 일자명칭      ");
            sb.AppendLine("       ,SOO_CD AS INPUT_CD    ");
            sb.AppendLine("       ,SOO_CD AS SEQ      ");
            sb.AppendLine("       ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '910' and SOO_GUBUN = S_CODE) AS INPUT_GUBUN    ");
            sb.AppendLine("       ,'' AS CUST_CD    ");
            sb.AppendLine("       ,'' AS CUST_NM    ");
            sb.AppendLine("       ,'' AS TAX_CD     ");
            sb.AppendLine("       ,'' AS TAX_NM     ");
            sb.AppendLine("       ,'' AS VAT_CD금   ");
            sb.AppendLine("       ,'' AS VAT_NM     ");
            sb.AppendLine("       ,'' AS  PRODUCT_NM     ");
            sb.AppendLine("       , 0 AS  TOTAL_AMT     ");
            sb.AppendLine("       , 0 AS  TOTAL_PRICE     ");
            sb.AppendLine("  	   , 0 AS TOTAL_SUPPLY_MONEY     ");
            sb.AppendLine("  	   , 0 AS TOTAL_TAX_MONEY    ");
            sb.AppendLine("  	   , 0 AS TOTAL_MONEY     ");
            sb.AppendLine("  	   , SOO_MONEY AS SOO_MONEY    ");
            sb.AppendLine("  	   , DC_MONEY AS DC_MONEY    ");
            sb.AppendLine("  	   , TOTAL_MONEY AS TOTAL_SOO_MONEY    ");
            sb.AppendLine("        ,0 AS BALANCE    ");
            sb.AppendLine("       , '' AS  CHUGJONG_NM    ");
            sb.AppendLine("       , '' AS  CLASS_NM     ");
            sb.AppendLine("       , '' AS  COUNTRY_NM    ");
            sb.AppendLine("       , '' AS  LABEL_NM    ");
            sb.AppendLine("       , '' AS  UNION_CD     ");
            sb.AppendLine("   from F_COLLECT Z     ");
            sb.AppendLine("  where 1=1 ");
            sb.AppendLine(condition2);

            sb.AppendLine("  union all    ");
            sb.AppendLine("  select  top 1     ");
            sb.AppendLine("  	 '' as bun            ");
            sb.AppendLine("  	 ,'0000-00-00' AS SALES_DATE         ");
            sb.AppendLine("       ,'== 전잔고 ==' AS 일자명칭        ");
            sb.AppendLine("       ,'' AS INPUT_CD      ");
            sb.AppendLine("       ,'' AS SEQ        ");
            sb.AppendLine("       ,'' AS INPUT_GUBUN      ");
            sb.AppendLine("       ,'' AS CUST_CD      ");
            sb.AppendLine("       ,'' AS CUST_NM      ");
            sb.AppendLine("       ,'' AS TAX_CD       ");
            sb.AppendLine("       ,'' AS TAX_NM       ");
            sb.AppendLine("       ,'' AS VAT_CD금     ");
            sb.AppendLine("       ,'' AS VAT_NM       ");
            sb.AppendLine("       ,'' AS  PRODUCT_NM       ");
            sb.AppendLine("       , 0 AS  TOTAL_AMT       ");
            sb.AppendLine("       , 0 AS  TOTAL_PRICE       ");
            sb.AppendLine("  	   , 0 AS TOTAL_SUPPLY_MONEY       ");
            sb.AppendLine("  	   , 0 AS TOTAL_TAX_MONEY      ");
            sb.AppendLine("  	   , 0 AS TOTAL_MONEY       ");
            sb.AppendLine("  	   , 0 AS SOO_MONEY      ");
            sb.AppendLine("  	   , 0 AS DC_MONEY      ");
            sb.AppendLine("  	   , 0 AS TOTAL_SOO_MONEY      ");
            sb.AppendLine("       ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= '" + start_date + "' ORDER BY INPUT_DATE DESC),0) AS BALANCE    ");
            sb.AppendLine("       , '' AS  CHUGJONG_NM      ");
            sb.AppendLine("       , '' AS  CLASS_NM       ");
            sb.AppendLine("       , '' AS  COUNTRY_NM      ");
            sb.AppendLine("       , '' AS  LABEL_NM      ");
            sb.AppendLine("       , '' AS  UNION_CD       ");

            sb.AppendLine("   order by A.SALES_DATE, A.SALES_CD, A.SEQ        ");







            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_work_List(string condition)
        //작업일보관리
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("SELECT A.LOT_NO, ");
            sb.AppendLine("A.W_INST_DATE, ");
            sb.AppendLine("(SELECT ITEM_NM FROM N_ITEM_CODE WHERE ITEM_CD = A.ITEM_CD) AS ITEM_NM ,  ");
            sb.AppendLine("A.SPEC ,  ");
            sb.AppendLine("(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM,  ");
            sb.AppendLine("A.INST_AMT, ");
            sb.AppendLine("A.RAW_OUT_YN,  ");
            sb.AppendLine("B.F_STEP,  ");
            sb.AppendLine("A.COMPLETE_YN ");
            sb.AppendLine("FROM F_WORK_INST A ");
            sb.AppendLine("LEFT OUTER JOIN F_WORK_FLOW_DETAIL B ");
            sb.AppendLine("ON A.LOT_NO = B.LOT_NO ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.LOT_NO ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        public DataTable fn_Input_Order_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ORDER_DATE");
            //2019.11.19 이재원 씨지엠 특화를 위한 수정


            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE D.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("     ,D.CLASS_CD ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE D.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("     ,D.COUNTRY_CD ");
            sb.AppendLine("     ,(SELECT GRADE_NM FROM N_GRADE_CODE WHERE D.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("     ,D.GRADE_CD ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE D.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("     ,D.CHUGJONG_CD ");
            sb.AppendLine("     ,D.LABEL_NM ");
            sb.AppendLine("     ,D.BOX_AMT ");
            sb.AppendLine("     ,B.TOTAL_BOX_AMT ");
            sb.AppendLine("     ,D.EXPRT_COUNT ");
            sb.AppendLine("     ,A.ORDER_CD ");
            sb.AppendLine("     ,B.SEQ ");
            sb.AppendLine("     ,A.INPUT_REQ_DATE ");
            sb.AppendLine("     ,A.COMPLETE_YN  ");
            sb.AppendLine("     ,B.RAW_MAT_CD    ");
            sb.AppendLine("     ,D.RAW_MAT_NM ");
            sb.AppendLine("     ,D.SPEC ");
            sb.AppendLine("     ,B.UNIT_CD ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,D.RAW_MAT_GUBUN ");
            //sb.AppendLine("     ,FLOOR(ISNULL(TOTAL_AMT,0)) AS ORDER_AMT  ");
            //sb.AppendLine("     ,FLOOR(B.PRICE) AS PRICE  ");
            //sb.AppendLine("     ,FLOOR(B.TOTAL_MONEY) TOTAL_MONEY  ");
            sb.AppendLine("     ,ISNULL(TOTAL_AMT,0) AS ORDER_AMT  ");
            sb.AppendLine("     ,B.PRICE  ");
            sb.AppendLine("     ,B.TOTAL_MONEY ");
            sb.AppendLine("     ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '300' and S_CODE = D.RAW_MAT_GUBUN) AS RAW_MAT_GUBUN_NM ");
            sb.AppendLine("     , C.INPUT_AMT ");
            sb.AppendLine("     , C.NO_INPUT_AMT");
            sb.AppendLine(" FROM F_ORDER A ");
            sb.AppendLine(" LEFT OUTER JOIN F_ORDER_DETAIL B ");
            sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
            sb.AppendLine(" AND A.ORDER_CD = B.ORDER_CD  ");
            sb.AppendLine(" LEFT OUTER JOIN(	 ");
            sb.AppendLine("                     SELECT AA.ORDER_DATE	 ");
            sb.AppendLine("                           ,AA.ORDER_CD       ");
            sb.AppendLine("                           ,AA.SEQ ");
            sb.AppendLine("                           ,ISNULL(SUM(BB.TEMP_AMT),0) AS INPUT_AMT ");
            sb.AppendLine("                           , ISNULL(AA.TOTAL_AMT,0)-ISNULL(SUM(BB.TEMP_AMT),0) AS NO_INPUT_AMT ");
            sb.AppendLine("                     FROM F_ORDER_DETAIL AA ");
            sb.AppendLine("                     LEFT OUTER JOIN F_RAW_DETAIL BB ");
            sb.AppendLine("                     ON AA.ORDER_DATE = BB.ORDER_DATE ");
            sb.AppendLine("                         AND AA.ORDER_CD = BB.ORDER_CD ");
            sb.AppendLine("                         AND AA.SEQ = BB.ORDER_SEQ ");
            sb.AppendLine("                     GROUP BY AA.ORDER_DATE,AA.ORDER_CD,AA.SEQ,AA.TOTAL_AMT)C ");
            sb.AppendLine(" ON A.ORDER_DATE = C.ORDER_DATE  ");
            sb.AppendLine(" AND A.ORDER_CD = C.ORDER_CD ");
            sb.AppendLine(" AND B.SEQ = C.SEQ  ");

            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE D	 ");
            sb.AppendLine(" ON B.RAW_MAT_CD = D.RAW_MAT_CD  ");

            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ORDER_DATE desc, A.ORDER_CD desc, B.SEQ desc ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Raw_Stock_List(string srch_date, string condition)
        {
            StringBuilder sb = new StringBuilder();

            //sb.AppendLine("select A.RAW_MAT_CD ");
            //sb.AppendLine("      , A.RAW_MAT_NM ");
            //sb.AppendLine("      , A.SPEC ");
            //sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) AS INPUT_AMT ");
            //sb.AppendLine("      , ISNULL(C.OUTPUT_AMT,0) AS OUTPUT_AMT ");
            //sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) - ISNULL(C.OUTPUT_AMT,0) AS STOCK_AMT ");
            //sb.AppendLine("      , A.BAL_STOCK ");

            //---hsp 출력물하면서 수정
            sb.AppendLine("select '' as no, A.RAW_MAT_CD AS 원부재료코드 ");
            sb.AppendLine("      , A.RAW_MAT_NM AS 원부재료명 ");
            sb.AppendLine("      , (SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '300' AND S_CODE = A.RAW_MAT_GUBUN) AS 원부재료구분 ");
            sb.AppendLine("      , A.SPEC AS  규격 ");
            sb.AppendLine("      , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("      , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM  ");
            sb.AppendLine("      , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM  ");
            sb.AppendLine("      , (SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD) AS TYPE_NM  ");
            sb.AppendLine("      , A.HAMYANG  ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) AS 입고량 ");
            sb.AppendLine("      , ISNULL(C.OUTPUT_AMT,0) AS 출고량 ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) - ISNULL(C.OUTPUT_AMT,0) AS 재고량 ");
            sb.AppendLine("      , A.LABEL_NM ");
            sb.AppendLine("      , A.BAL_STOCK ");

            sb.AppendLine("from N_RAW_CODE A ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select RAW_MAT_CD");
            sb.AppendLine("                      , SUM(ISNULL(TOTAL_AMT,0)) as INPUT_AMT ");
            sb.AppendLine("                 from F_RAW_DETAIL ");
            sb.AppendLine("                 where INPUT_DATE <= '" + srch_date + "'  ");
            sb.AppendLine("                 group by RAW_MAT_CD) B ");
            sb.AppendLine("ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select RAW_MAT_CD");
            sb.AppendLine("                      , SUM(ISNULL(OUTPUT_AMT,0)) as OUTPUT_AMT ");
            sb.AppendLine("                 from F_RAW_OUTPUT ");
            sb.AppendLine("                 where OUTPUT_DATE <= '" + srch_date + "'  ");
            sb.AppendLine("                 group by RAW_MAT_CD) C ");
            sb.AppendLine("ON A.RAW_MAT_CD = C.RAW_MAT_CD  ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_St_Detail_List(string srch_date, string raw_mat_cd)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select  ");
            sb.AppendLine("      A.INPUT_DATE ");
            sb.AppendLine("      , A.INPUT_CD ");
            sb.AppendLine("      , Z.SEQ ");
            sb.AppendLine("      , Z.RAW_MAT_CD ");
            sb.AppendLine("      , Z.MF_DATE ");
            sb.AppendLine("      , Z.EXPRT_DATE ");
            sb.AppendLine("      , Z.UNION_CD ");
            sb.AppendLine("      , (SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE Z.STORAGE_CD = STORAGE_CD) AS STORAGE_NM ");
            sb.AppendLine("      , (SELECT LOC_NM FROM N_LOC_CODE WHERE Z.LOC_CD = LOC_CD) AS LOC_NM ");
            sb.AppendLine("      , (SELECT S_CODE_NM FROM T_S_CODE WHERE Z.FROZEN_GUBUN = S_CODE AND L_CODE = '1000') AS FROZEN_NM ");
            sb.AppendLine("      , (SELECT GRADE_NM FROM N_GRADE_CODE WHERE GRADE_CD = Z.GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("      , SUM(ISNULL(Z.TOTAL_AMT,0)) as INPUT_AMT ");
            sb.AppendLine("      , SUM(ISNULL(K.TOTAL_AMT,0)) as OUTPUT_AMT ");
            sb.AppendLine("      , SUM(ISNULL(Z.TOTAL_AMT,0)) - SUM(ISNULL(K.TOTAL_AMT,0)) as STOCK_AMT ");
            sb.AppendLine("      from F_RAW_INPUT A ");
            sb.AppendLine("left outer join F_RAW_DETAIL Z  ");
            sb.AppendLine("on A.INPUT_DATE = Z.INPUT_DATE");
            sb.AppendLine("    and A.INPUT_CD = Z.INPUT_CD");
            sb.AppendLine("left outer join (  ");
            sb.AppendLine("                 select INPUT_DATE,INPUT_CD,INPUT_SEQ,SUM(OUTPUT_AMT)AS TOTAL_AMT from F_RAW_OUTPUT   ");
            sb.AppendLine("                 where 1=1   ");
            sb.AppendLine("                     and RAW_MAT_CD = '" + raw_mat_cd + "'   ");
            sb.AppendLine("                     and INPUT_DATE <= '" + srch_date + "'   ");
            sb.AppendLine("                 group by INPUT_DATE,INPUT_CD,INPUT_SEQ   ");
            sb.AppendLine("                )K ");

            sb.AppendLine("on A.INPUT_DATE = K.INPUT_DATE");
            sb.AppendLine("    and A.INPUT_CD = K.INPUT_CD");
            sb.AppendLine("    and Z.SEQ = K.INPUT_SEQ");
            sb.AppendLine("where 1=1  ");
            sb.AppendLine("     and Z.RAW_MAT_CD = '" + raw_mat_cd + "' ");
            sb.AppendLine("     and A.INPUT_DATE <= '" + srch_date + "' ");
            sb.AppendLine("group by A.INPUT_DATE,A.INPUT_CD,Z.SEQ,Z.RAW_MAT_CD,Z.MF_DATE,Z.EXPRT_DATE,Z.GRADE_CD,Z.UNION_CD,Z.FROZEN_GUBUN,Z.STORAGE_CD,Z.LOC_CD ");
            sb.AppendLine("order by A.INPUT_DATE,A.INPUT_CD,Z.SEQ ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_List(string condition)
        {
            //2019-12-02 이재원 씨지엠 작업지시를 위한 몇개 컬럼 최하단에 추가

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE");
            sb.AppendLine("     ,A.W_INST_CD ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.ITEM_CD ");
            sb.AppendLine("     ,B.ITEM_NM ");
            sb.AppendLine("     ,B.ITEM_GUBUN ");
            sb.AppendLine("     ,B.SPEC ");
            sb.AppendLine("     ,A.INST_AMT");
            sb.AppendLine("     ,A.CHARGE_AMT ");
            sb.AppendLine("     ,A.PACK_AMT ");
            sb.AppendLine("     ,A.PLAN_NUM");
            sb.AppendLine("     ,A.PLAN_ITEM");
            sb.AppendLine("     ,A.INSTAFF ");
            sb.AppendLine("     ,A.INST_NOTICE ");
            sb.AppendLine("     ,A.COMPLETE_YN ");
            sb.AppendLine("     ,A.RAW_MAT_CD ");
            sb.AppendLine("     ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE RAW_MAT_CD = A.RAW_MAT_CD ) AS RAW_MAT_NM ");
            sb.AppendLine("     ,DELIVERY_DATE ");
            sb.AppendLine(" from F_WORK_INST A ");
            sb.AppendLine(" LEFT OUTER JOIN N_ITEM_CODE B ");
            sb.AppendLine(" ON A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_WORK_FLOW C ");
            sb.AppendLine(" ON A.LOT_NO = C.LOT_NO ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.W_INST_DATE desc, A.W_INST_CD desc ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE");
            sb.AppendLine("     ,A.W_INST_CD ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '1' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,A.ITEM_CD ");
            sb.AppendLine("     ,B.ITEM_NM ");
            sb.AppendLine("     ,B.SPEC ");
            sb.AppendLine("     ,A.UNIT_CD ");
            sb.AppendLine("     ,A.INST_AMT");
            sb.AppendLine("     ,A.WORKER_CD");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.WORKER_CD) as WORKER_NM ");
            sb.AppendLine("     ,A.COMPLETE_YN");
            sb.AppendLine("     ,A.LINE_CD");
            sb.AppendLine("     ,(select LINE_NM from N_LINE_CODE where LINE_CD = A.LINE_CD) as LINE_NM  ");
            sb.AppendLine("     ,A.DELIVERY_DATE");
            sb.AppendLine("     ,A.PLAN_NUM");
            sb.AppendLine("     ,A.PLAN_ITEM");
            sb.AppendLine("     ,A.INSTAFF ");
            sb.AppendLine("     ,A.INST_NOTICE ");
            sb.AppendLine("     ,B.CHARGE_AMT ");
            sb.AppendLine("     ,B.PACK_AMT ");
            sb.AppendLine("     ,A.RAW_OUT_YN ");
            sb.AppendLine("     ,A.POOR_WORK_YN ");
            sb.AppendLine("     ,C.COMPLETE_YN AS FLOW_YN ");
            sb.AppendLine(" from F_WORK_INST A ");
            sb.AppendLine(" LEFT OUTER JOIN N_ITEM_CODE B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" LEFT OUTER JOIN F_WORK_FLOW C");
            sb.AppendLine(" on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.W_INST_DATE desc, A.W_INST_CD desc ");


            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Plan_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.PLAN_DATE");
            sb.AppendLine("     ,A.PLAN_CD ");
            sb.AppendLine("     ,A.PLAN_NUM ");
            sb.AppendLine("     ,A.CUST_CD ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '1' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,B.ITEM_CD ");
            sb.AppendLine("     ,C.ITEM_NM  ");
            sb.AppendLine("     ,C.ITEM_GUBUN  ");
            sb.AppendLine("     ,C.SPEC    ");
            sb.AppendLine("     ,C.CHARGE_AMT    ");
            sb.AppendLine("     ,C.PACK_AMT    ");
            sb.AppendLine("     ,B.UNIT_CD ");
            sb.AppendLine("     , (select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     , B.TOTAL_AMT ");
            sb.AppendLine("     , B.TOTAL_AMT - ISNULL(INST_AMT,0) AS RES_QUAN_AMT ");
            sb.AppendLine(" from F_PLAN A ");
            sb.AppendLine(" left outer join F_PLAN_GROUP B ");
            sb.AppendLine(" on A.PLAN_DATE = B.PLAN_DATE ");
            sb.AppendLine("     and A.PLAN_CD = B.PLAN_CD ");
            sb.AppendLine(" left outer join N_ITEM_CODE C ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");

            sb.AppendLine(" left outer join (   ");
            sb.AppendLine("                     select Z.PLAN_NUM ");
            sb.AppendLine("                     ,Z.ITEM_CD ");
            sb.AppendLine("                     ,SUM(ISNULL(Z.INST_AMT,0))AS INST_AMT ");
            sb.AppendLine("                     from F_WORK_INST Z ");
            sb.AppendLine("                     where PLAN_NUM != '' ");
            sb.AppendLine("                     group by PLAN_NUM,ITEM_CD) D ");
            sb.AppendLine(" on A.PLAN_NUM = D.PLAN_NUM ");
            sb.AppendLine(" and B.ITEM_CD = D.ITEM_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.PLAN_DATE desc,A.PLAN_CD desc,B.ITEM_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서에서 제품선택 및 생산계획 클릭 시 나타나는 원부재료 
        public DataTable fn_Work_Rm_Default_List(double inst_amt, string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.ITEM_NM ");
            sb.AppendLine("     ,C.RAW_MAT_CD ");
            sb.AppendLine("     ,C.RAW_MAT_NM ");
            sb.AppendLine("     ,C.SPEC  ");
            sb.AppendLine("     ,C.CUST_CD    ");
            sb.AppendLine("     ,D.CUST_NM ");
            sb.AppendLine("     ,C.INPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.INPUT_UNIT) as INPUT_UNIT_NM  ");
            sb.AppendLine("     ,C.OUTPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.OUTPUT_UNIT) as OUTPUT_UNIT_NM   ");
            sb.AppendLine("     ,B.TOTAL_AMT AS SOYO_AMT ");
            sb.AppendLine("     ," + inst_amt + "*B.TOTAL_AMT AS TOTAL_SOYO_AMT ");
            sb.AppendLine("     ,C.BAL_STOCK  ");
            sb.AppendLine("     ,C.CVR_RATIO  ");
            sb.AppendLine(" FROM N_ITEM_CODE A ");
            sb.AppendLine(" inner join N_ITEM_COMP B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" left outer join N_RAW_CODE C   ");
            sb.AppendLine(" on B.RAW_MAT_CD = C.RAW_MAT_CD	 ");
            sb.AppendLine(" left outer join N_CUST_CODE D	 ");
            sb.AppendLine(" on C.CUST_CD = D.CUST_CD	 ");
            sb.AppendLine(condition);


            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서에서 제품선택 및 생산계획 클릭 시 나타나는 반제품
        public DataTable fn_Work_Half_Default_List(double inst_amt, string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD");
            sb.AppendLine("     ,A.ITEM_NM ");
            sb.AppendLine("     ,B.HALF_ITEM_CD  ");
            sb.AppendLine("     ,C.ITEM_NM AS HALF_ITEM_NM  ");
            sb.AppendLine("     ,C.SPEC  ");
            sb.AppendLine("     ,C.CUST_CD    ");
            sb.AppendLine("     ,D.CUST_NM ");
            sb.AppendLine("     ,C.UNIT_CD ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.UNIT_CD) as UNIT_NM    ");
            sb.AppendLine("     ,B.TOTAL_AMT AS SOYO_AMT ");
            sb.AppendLine("     ," + inst_amt + "*B.TOTAL_AMT AS TOTAL_SOYO_AMT ");
            sb.AppendLine("     ,C.BAL_STOCK  ");
            sb.AppendLine(" FROM N_ITEM_CODE A ");
            sb.AppendLine(" left outer join N_ITEM_COMP_HALF B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(" inner join N_ITEM_CODE C   ");
            sb.AppendLine(" on B.HALF_ITEM_CD = C.ITEM_CD	 ");
            sb.AppendLine(" left outer join N_CUST_CODE D	 ");
            sb.AppendLine(" on C.CUST_CD = D.CUST_CD	 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Pln_Rm_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select B.ITEM_CD");
            sb.AppendLine("     ,C.RAW_MAT_CD ");
            sb.AppendLine("     ,D.RAW_MAT_NM ");
            sb.AppendLine("     ,D.SPEC ");
            sb.AppendLine("     ,D.CUST_CD  ");
            sb.AppendLine("     ,E.CUST_NM   ");
            sb.AppendLine("     ,D.INPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = D.INPUT_UNIT) as INPUT_UNIT_NM  ");
            sb.AppendLine("     ,D.OUTPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = D.OUTPUT_UNIT) as OUTPUT_UNIT_NM   ");
            sb.AppendLine("     ,C.TOTAL_AMT AS SOYO_AMT ");
            sb.AppendLine("     ,B.TOTAL_AMT * C.TOTAL_AMT AS TOTAL_SOYO_AMT ");
            sb.AppendLine("     ,D.BAL_STOCK ");
            sb.AppendLine("     ,D.CVR_RATIO ");
            sb.AppendLine(" from F_PLAN A ");
            sb.AppendLine(" inner join F_PLAN_DETAIL B");
            sb.AppendLine(" on A.PLAN_DATE = B.PLAN_DATE ");
            sb.AppendLine("     and A.PLAN_CD = B.PLAN_CD   ");
            sb.AppendLine(" left outer join N_ITEM_COMP C  ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" inner join N_RAW_CODE D   ");
            sb.AppendLine(" on C.RAW_MAT_CD = D.RAW_MAT_CD 	 ");
            sb.AppendLine(" left join N_CUST_CODE E	 ");
            sb.AppendLine(" on D.CUST_CD = E.CUST_CD	 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서 원부재료 산출
        public DataTable fn_Work_Rm_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE");
            sb.AppendLine("     ,A.W_INST_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.RAW_MAT_CD  ");
            sb.AppendLine("     ,B.RAW_MAT_NM   ");
            sb.AppendLine("     ,B.SPEC   ");
            sb.AppendLine("     ,B.CUST_CD ");
            sb.AppendLine("     ,C.CUST_NM ");
            sb.AppendLine("     ,B.INPUT_UNIT ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.INPUT_UNIT) as INPUT_UNIT_NM  ");
            sb.AppendLine("     ,B.OUTPUT_UNIT");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.OUTPUT_UNIT) as OUTPUT_UNIT_NM   ");
            sb.AppendLine("     ,A.SOYO_AMT  ");
            sb.AppendLine("     ,A.TOTAL_AMT as TOTAL_SOYO_AMT");
            sb.AppendLine("     ,B.BAL_STOCK  ");
            sb.AppendLine("     ,B.CVR_RATIO  ");
            sb.AppendLine("     ,F.LOT_NO  ");
            sb.AppendLine(" from F_WORK_INST_DETAIL A ");
            sb.AppendLine(" left outer join N_RAW_CODE B");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD");
            sb.AppendLine(" left outer join N_CUST_CODE C  ");
            sb.AppendLine(" on B.CUST_CD = C.CUST_CD	 ");
            sb.AppendLine(" inner join F_WORK_INST F ");
            sb.AppendLine(" on A.W_INST_DATE = F.W_INST_DATE ");
            sb.AppendLine("     and A.W_INST_CD = F.W_INST_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SEQ ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서 반제품 산출
        public DataTable fn_Work_Half_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE");
            sb.AppendLine("     ,A.W_INST_CD ");
            sb.AppendLine("     ,A.SEQ ");
            sb.AppendLine("     ,A.LOT_NO ");
            sb.AppendLine("     ,A.HALF_ITEM_CD  ");
            sb.AppendLine("     ,B.ITEM_NM   ");
            sb.AppendLine("     ,B.SPEC   ");
            sb.AppendLine("     ,B.CUST_CD ");
            sb.AppendLine("     ,C.CUST_NM ");
            sb.AppendLine("     ,B.UNIT_CD ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = B.UNIT_CD) as UNIT_NM   ");
            sb.AppendLine("     ,A.SOYO_AMT  ");
            sb.AppendLine("     ,A.TOTAL_AMT as TOTAL_SOYO_AMT");
            sb.AppendLine("     ,ISNULL(B.BAL_STOCK,0) AS BAL_STOCK   ");
            sb.AppendLine(" from F_WORK_INST_HALF_DETAIL A  ");
            sb.AppendLine(" left outer join N_ITEM_CODE B");
            sb.AppendLine(" on A.HALF_ITEM_CD = B.ITEM_CD");
            sb.AppendLine("     and B.ITEM_GUBUN = '2'");
            sb.AppendLine(" left outer join N_CUST_CODE C  ");
            sb.AppendLine(" on B.CUST_CD = C.CUST_CD	 ");
            sb.AppendLine(condition);
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Flow_Cnt(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as cnt");
            sb.AppendLine("from F_WORK_FLOW ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시 LOT_NO 여부 체크
        public DataTable fn_Work_Inst_Cnt(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as cnt");
            sb.AppendLine("from F_WORK_INST ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Flow_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("        ,A.FLOW_DATE ");
            sb.AppendLine("        ,B.W_INST_DATE ");
            sb.AppendLine("        ,B.W_INST_CD ");
            sb.AppendLine("        ,B.ITEM_CD ");
            sb.AppendLine("        ,C.ITEM_NM ");
            sb.AppendLine("        ,C.SPEC ");
            sb.AppendLine("        ,C.CHARGE_AMT ");
            sb.AppendLine("        ,B.INST_AMT ");
            sb.AppendLine("        ,C.PACK_AMT ");
            sb.AppendLine("        ,A.COMPLETE_YN ");
            sb.AppendLine("        ,B.RAW_OUT_YN ");
            sb.AppendLine("        ,B.POOR_WORK_YN ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("left outer join F_WORK_INST B ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("left outer join N_ITEM_CODE C ");
            sb.AppendLine("on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Flow_Detail(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("        ,A.LOT_SUB ");
            sb.AppendLine("        ,A.F_STEP ");
            sb.AppendLine("        ,A.FLOW_CD ");
            sb.AppendLine("        ,A.SEQ ");
            sb.AppendLine("        ,A.F_SUB_DATE ");
            sb.AppendLine("        ,A.LOSS ");
            sb.AppendLine("        ,A.F_SUB_AMT ");
            sb.AppendLine("        ,A.POOR_CD ");
            sb.AppendLine("        ,A.POOR_AMT ");
            sb.AppendLine("        ,A.COMPLETE_YN ");
            sb.AppendLine("        ,A.CHECK_YN ");
            sb.AppendLine("        ,A.INPUT_YN ");
            sb.AppendLine("        ,C.FLOW_NM ");
            sb.AppendLine("from F_WORK_FLOW_DETAIL A ");
            sb.AppendLine("left outer join N_POOR_CODE B ");
            sb.AppendLine("on A.POOR_CD = B.POOR_CD ");
            sb.AppendLine("left outer join N_FLOW_CODE C ");
            sb.AppendLine("on A.FLOW_CD = C.FLOW_CD ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO,A.F_STEP,A.LOT_SUB ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 제품입고식별표 리스트 
        public DataTable fn_Item_Input_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("        ,B.LOT_SUB ");
            sb.AppendLine("        ,A.LOT_NO + RIGHT('00'+ convert(varchar, B.LOT_SUB), 3) as LOT_BAR ");
            sb.AppendLine("        ,B.F_SUB_DATE AS PACK_DATE ");
            sb.AppendLine("        ,A.ITEM_CD ");
            sb.AppendLine("        ,C.ITEM_NM");
            sb.AppendLine("        ,C.SPEC ");
            sb.AppendLine("        ,C.UNIT_CD ");
            sb.AppendLine("        ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.UNIT_CD) AS UNIT_NM ");
            sb.AppendLine("        ,B.F_SUB_AMT ");
            sb.AppendLine("        ,J.CUST_NM ");
            //2019-11-04 이재원 : 제품입고 확정페이지를 위한 가격 출력 쿼리 생성
            sb.AppendLine("        ,(SELECT INPUT_PRICE from N_ITEM_CODE where Z.ITEM_CD = ITEM_CD) AS INPUT_PRICE");
            //2019-11-04 이재원 : 제품입고 확정 페이지를 위한 입고 여부를 확인하는 쿼리 생성
            sb.AppendLine("        ,Z.COMPLETE_YN");
            sb.AppendLine("        ,(SELECT LINK_CD from N_ITEM_CODE where Z.ITEM_CD = ITEM_CD) AS LINK_CD");

            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL B");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD   ");
            sb.AppendLine("left outer join N_FLOW_CODE D   ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD   ");
            sb.AppendLine("left outer join F_WORK_INST AS K on A.LOT_NO = K.LOT_NO ");
            sb.AppendLine("left outer join N_CUST_CODE AS J on K.CUST_CD = J.CUST_CD AND J.CUST_GUBUN = '1' ");
            sb.AppendLine("inner  join F_ITEM_INPUT Z    ");
            sb.AppendLine("on A.LOT_NO = Z.LOT_NO   ");
            sb.AppendLine(" and B.LOT_SUB = Z.LOT_SUB ");
            sb.AppendLine(" and B.F_STEP = Z.F_STEP  ");

            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO desc,B.LOT_SUB");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 제품입고식별표 리스트 씨지엠
        public DataTable fn_Item_Input_List_CZM2(string condition) // 2019-12-30 문세진 씨지엠 제품식별표 수정
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_SUB AS LOT_NO ");
            sb.AppendLine("        ,'' AS LOT_SUB ");
            sb.AppendLine("        ,A.LOT_SUB  as LOT_BAR ");
            sb.AppendLine("        ,B.INPUT_DATE AS PACK_DATE ");
            sb.AppendLine("        ,A.ITEM_CD ");
            sb.AppendLine("        ,C.ITEM_NM");
            sb.AppendLine("        ,C.TYPE_CD ");
            sb.AppendLine("        ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE C.TYPE_CD = TYPE_CD) AS TYPE_NM ");
            sb.AppendLine("        ,C.UNIT_CD ");
            sb.AppendLine("        ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE C.UNIT_CD = UNIT_CD) AS UNIT_NM ");
            sb.AppendLine("        ,C.CLASS_CD ");
            sb.AppendLine("        ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE C.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("        ,C.CHUGJONG_CD ");
            sb.AppendLine("        ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE C.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("        ,C.COUNTRY_CD ");
            sb.AppendLine("        ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE C.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("        ,C.HAMYANG ");
            sb.AppendLine("        ,C.LABEL_NM ");
            sb.AppendLine("        ,A.INPUT_AMT ");
            sb.AppendLine("        ,A.CURR_AMT ");
            sb.AppendLine("        ,A.EXPRT_DATE ");
            sb.AppendLine("        ,A.A_UNION_CD ");
            sb.AppendLine("        ,A.FROZEN_GUBUN ");
            sb.AppendLine("        ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_NM ");
            //sb.AppendLine("        ,'거래처테스트' AS CUST_NM ");
            //2019-11-04 이재원 : 제품입고 확정페이지를 위한 가격 출력 쿼리 생성
            sb.AppendLine("        ,'0' AS INPUT_PRICE");
            //2019-11-04 이재원 : 제품입고 확정 페이지를 위한 입고 여부를 확인하는 쿼리 생성
            sb.AppendLine("        ,'' AS COMPLETE_YN  ");
            sb.AppendLine("  FROM F_ITEM_INPUT_DETAIL A ");
            sb.AppendLine("  LEFT OUTER JOIN F_ITEM_INPUT B ");
            sb.AppendLine("  ON A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine("  AND A.INPUT_CD = B.INPUT_CD ");
            sb.AppendLine("  LEFT OUTER JOIN N_ITEM_CODE C ");
            sb.AppendLine("  ON A.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by B.LOT_NO desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //공정별 재공 현황
        public DataTable fn_Item_Flow_Con_List()  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,B.W_INST_DATE ");
            sb.AppendLine("         ,STUFF(( ");
            sb.AppendLine("             select ',' + FLOW_NM+' '+ CONVERT(nvarchar(20),FLOOR(SUM(F_SUB_AMT))) +' '    ");
            sb.AppendLine("             from F_WORK_FLOW_DETAIL A  ");
            sb.AppendLine("             left outer join N_FLOW_CODE B  ");
            sb.AppendLine("             on A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine("             where A.LOT_NO = A.LOT_NO  ");
            sb.AppendLine("             group by A.LOT_NO,A.F_STEP,B.FLOW_CD,B.FLOW_NM  ");
            sb.AppendLine("             FOR XML PATH('')),1,1,'')as LOT_TOT_FLOW_NM  ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("left outer join F_WORK_INST B ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("left outer join N_ITEM_CODE C ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine("order by A.ITEM_CD,A.LOT_NO ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //공정별 재공 현황
        public DataTable fn_Item_Flow_Con_Dt_List(string txt_lot_no)  //condition = 현황 , dt = detail
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.F_SUB_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.LOT_NO + RIGHT('00'+ convert(varchar, A.LOT_SUB), 3) as LOT_BAR ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,A.FLOW_CD ");
            sb.AppendLine("         ,B.FLOW_NM ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,A.LOSS ");
            sb.AppendLine("         ,A.POOR_AMT ");
            sb.AppendLine("         ,DATEDIFF(DD,F_SUB_DATE,GETDATE()) as OVER_DATE ");
            sb.AppendLine("         ,A.COMMENT ");
            sb.AppendLine("from F_WORK_FLOW_DETAIL A ");
            sb.AppendLine("left outer join N_FLOW_CODE B");
            sb.AppendLine("on A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine("where A.LOT_NO = '" + txt_lot_no + " '");
            sb.AppendLine("order by A.LOT_NO,A.F_STEP,A.LOT_SUB ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //공정별 기간 현황
        public DataTable fn_Flow_Product_List(string condition)  //condition = 현황 , dt = detail
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.F_SUB_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.LOT_NO + RIGHT('00'+ convert(varchar, A.LOT_SUB), 3) as LOT_BAR ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,A.FLOW_CD ");
            sb.AppendLine("         ,B.FLOW_NM ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,A.LOSS ");
            sb.AppendLine("         ,A.POOR_AMT ");
            sb.AppendLine("         ,DATEDIFF(DD,F_SUB_DATE,GETDATE()) as OVER_DATE ");
            sb.AppendLine("         ,C.INPUT_DATE ");
            sb.AppendLine("         ,A.COMMENT ");
            sb.AppendLine("from  F_WORK_FLOW K ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL A  ");
            sb.AppendLine("on K.LOT_NO = A.LOT_NO ");
            sb.AppendLine("left outer join N_FLOW_CODE B");
            sb.AppendLine("on A.FLOW_CD = B.FLOW_CD ");
            sb.AppendLine("left outer join F_ITEM_INPUT C");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine("where 1=1");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO,A.F_STEP,A.LOT_SUB ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시서 원자재 출고 여부
        public DataTable fn_Work_Raw_Out_Yn(string txt_lot_no)  //condition = 현황 , dt = detail
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         RAW_OUT_YN ");
            sb.AppendLine("from F_WORK_INST  ");
            sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //제품 출고에서 제품재고 검색 
        public DataTable fn_Item_In_Stock_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.LOT_NO,");
            sb.AppendLine("       A.LOT_SUB, ");
            sb.AppendLine("       A.INPUT_DATE, ");
            sb.AppendLine("       A.INPUT_CD, ");
            sb.AppendLine("       A.ITEM_CD, ");
            sb.AppendLine("       C.ITEM_NM,  ");
            sb.AppendLine("       C.SPEC,  ");
            sb.AppendLine("       ISNULL(C.OUTPUT_PRICE,0) AS OUTPUT_PRICE,  ");
            sb.AppendLine("       C.UNIT_CD,  ");
            sb.AppendLine("       (select UNIT_NM from N_UNIT_CODE where UNIT_CD = C.UNIT_CD) as UNIT_NM,  ");
            sb.AppendLine("       A.INPUT_AMT,    ");
            sb.AppendLine("       ISNULL(B.OUTPUT_AMT,0) AS OUTPUT_AMT, ");
            sb.AppendLine("       A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) AS STOCK_AMT, ");
            sb.AppendLine("       D.CUST_CD, ");
            sb.AppendLine("       E.CUST_NM ");
            sb.AppendLine("from F_ITEM_INPUT A ");
            sb.AppendLine("left outer join (   ");
            sb.AppendLine("                 select BB.LOT_NO,BB.LOT_SUB,ISNULL(SUM(OUTPUT_AMT),0) AS OUTPUT_AMT ");
            sb.AppendLine("                 from F_ITEM_OUT AA  ");
            sb.AppendLine("                 inner join F_ITEM_OUT_DETAIL BB ");
            sb.AppendLine("                 on AA.OUTPUT_DATE = BB.OUTPUT_DATE ");
            sb.AppendLine("                     and AA.OUTPUT_CD = BB.OUTPUT_CD ");
            //sb.AppendLine("                     where AA.CUST_CD = '" + cust_cd + "' ");
            sb.AppendLine("                    group by LOT_NO,LOT_SUB) B ");
            sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
            sb.AppendLine(" left outer join N_ITEM_CODE C ");
            sb.AppendLine(" on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine(" left outer join F_WORK_INST D ");
            sb.AppendLine(" on A.LOT_NO = D.LOT_NO ");
            sb.AppendLine(" left outer join N_CUST_CODE E ");
            sb.AppendLine(" on D.CUST_CD = E.CUST_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("     and A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) > 0 ");
            //sb.AppendLine(" where D.CUST_CD = '" + cust_cd + "' ");
            //sb.AppendLine("     and A.INPUT_AMT - ISNULL(B.OUTPUT_AMT,0) > 0 ");

            //sb.AppendLine(condition);
            sb.AppendLine(" order by A.LOT_NO,A.LOT_SUB ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 제품 출고 조회

        public DataTable fn_Item_Output_List(string condition, string condition2)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.OUTPUT_DATE,");
            sb.AppendLine("       A.OUTPUT_CD, ");
            sb.AppendLine("       A.CUST_CD, ");
            sb.AppendLine("       C.CUST_NM, ");
            sb.AppendLine("       A.STORAGE_CD, ");
            sb.AppendLine("       D.STORAGE_NM, ");
            sb.AppendLine("       B.ITEM_CNT, ");
            sb.AppendLine("       A.SELF_YN ");
            sb.AppendLine(" from F_ITEM_OUT A ");
            sb.AppendLine(" inner join(  ");
            sb.AppendLine("                 select OUTPUT_DATE,OUTPUT_CD,COUNT(*) AS ITEM_CNT ");
            sb.AppendLine("                 from F_ITEM_OUT_DETAIL A ");
            // 2019-09-06 유정훈 추가 
            sb.AppendLine("                 left outer join N_ITEM_CODE B ");
            sb.AppendLine("                 on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("                 left outer join N_CUST_CODE C ");
            sb.AppendLine("                 on A.CUST_CD = C.CUST_CD ");
            sb.AppendLine("                     and C.CUST_GUBUN = '1' ");
            // 2019-09-06 유정훈 끝 
            sb.AppendLine(condition);
            sb.AppendLine(condition2);
            sb.AppendLine("                 group by OUTPUT_DATE,OUTPUT_CD)B  ");
            sb.AppendLine(" on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and A.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" left outer join N_CUST_CODE C  ");
            sb.AppendLine(" on A.CUST_CD = C.CUST_CD ");
            sb.AppendLine(" left outer join N_STORAGE_CODE D ");
            sb.AppendLine(" on A.STORAGE_CD = D.STORAGE_CD ");

            sb.AppendLine(condition);
            sb.AppendLine(" order by A.OUTPUT_DATE desc, A.OUTPUT_CD desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Item_Output_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.OUTPUT_DATE,");
            sb.AppendLine("       A.OUTPUT_CD, ");
            sb.AppendLine("       B.SEQ, ");
            sb.AppendLine("       A.CUST_CD, ");
            sb.AppendLine("       E.CUST_NM, ");
            sb.AppendLine("       B.LOT_NO, ");
            sb.AppendLine("       B.LOT_SUB, ");
            sb.AppendLine("       B.ITEM_CD, ");
            sb.AppendLine("       C.ITEM_NM, ");
            sb.AppendLine("       C.SPEC, ");
            sb.AppendLine("       B.UNIT_CD, ");
            sb.AppendLine("       D.UNIT_NM, ");
            sb.AppendLine("       B.OUTPUT_AMT, ");
            sb.AppendLine("       B.PRICE, ");
            sb.AppendLine("       B.TOTAL_MONEY, ");
            sb.AppendLine("       B.INPUT_DATE,");
            sb.AppendLine("       B.INPUT_CD, ");
            sb.AppendLine("       B.CUST_CD AS CUST_CD2,");
            sb.AppendLine("       F.OUT_INST_YN, ");
            sb.AppendLine("       (select CUST_NM from N_CUST_CODE where CUST_CD = B.CUST_CD) AS CUST_NM2 ");
            sb.AppendLine(" from F_ITEM_OUT A");
            sb.AppendLine(" inner join F_ITEM_OUT_DETAIL B  ");
            sb.AppendLine(" on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and A.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" left outer join N_ITEM_CODE C  ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" left outer join N_UNIT_CODE D ");
            sb.AppendLine(" on B.UNIT_CD = D.UNIT_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE E ");
            sb.AppendLine(" on A.CUST_CD = E.CUST_CD ");
            sb.AppendLine(" left outer join F_ITEM_OUT_INST F ");
            sb.AppendLine(" on B.OUTPUT_DATE = F.OUTPUT_DATE ");
            sb.AppendLine("     and B.OUTPUT_CD = F.OUTPUT_CD ");
            sb.AppendLine("     and B.SEQ = F.SEQ");


            sb.AppendLine(condition);
            sb.AppendLine(" order by A.OUTPUT_DATE, A.OUTPUT_CD, B.SEQ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //제품재고현황 
        public DataTable fn_Item_Stock_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select '' as no, A.ITEM_NM ");
            sb.AppendLine("      , A.ITEM_CD");
            sb.AppendLine("      , A.SPEC  ");
            sb.AppendLine("      , A.LABEL_NM  ");
            sb.AppendLine("      , A.HAMYANG  ");
            sb.AppendLine("      , (SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD ) AS TYPE_NM ");
            sb.AppendLine("      , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("      , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM  ");
            sb.AppendLine("      , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM  ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) AS INPUT_AMT ");
            sb.AppendLine("      , ISNULL(C.OUTPUT_AMT,0) AS OUTPUT_AMT ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) - ISNULL(C.OUTPUT_AMT,0) AS BAL_STOCK ");
            sb.AppendLine("      , A.LABEL_NM ");

            sb.AppendLine("from N_ITEM_CODE A ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select ITEM_CD");
            sb.AppendLine("                      , SUM(ISNULL(INPUT_AMT,0)) as INPUT_AMT ");
            sb.AppendLine("                 from F_ITEM_INPUT_DETAIL ");
            sb.AppendLine("                 where INPUT_DATE <=   '" + DateTime.Today.ToString("yyyy-MM-dd") + "'  ");
            sb.AppendLine("                 group by ITEM_CD) B ");
            sb.AppendLine("ON A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select ITEM_CD");
            sb.AppendLine("                      , SUM(ISNULL(OUTPUT_AMT,0)) as OUTPUT_AMT ");
            sb.AppendLine("                 from F_ITEM_OUT ");
            sb.AppendLine("                 where OUTPUT_DATE <= '" + DateTime.Today.ToString("yyyy-MM-dd") + "'  ");
            sb.AppendLine("                 group by ITEM_CD) C ");
            sb.AppendLine("ON A.ITEM_CD = C.ITEM_CD  ");
            sb.AppendLine(condition);



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //원자재 출고 현황
        public DataTable fn_Raw_Output_List(string condition) // 2019-12-31 문세진 바코드번호 자동 생성되게 수정
        {
            StringBuilder sb = new StringBuilder();

            //---hsp 출력물하면서 수정
            sb.AppendLine("      select '' as no, ");
            sb.AppendLine("      A.OUTPUT_DATE AS 출고일자,");
            sb.AppendLine("      A.RAW_MAT_CD AS 원부재료코드, ");
            sb.AppendLine("      A.LOT_NO AS 제조번호, ");
            sb.AppendLine("      B.RAW_MAT_NM AS 원부재료명, ");
            sb.AppendLine("      B.SPEC AS  규격, ");
            sb.AppendLine("      FLOOR(ISNULL(A.TOTAL_AMT,0)) AS 투입량,");
            sb.AppendLine("      D.UNIT_NM AS 단위명,");
            sb.AppendLine("      E.CHUGJONG_NM AS 축종,");
            sb.AppendLine("      G.CLASS_NM AS 부위,");
            sb.AppendLine("      H.GRADE_NM AS 등급,");
            sb.AppendLine("      I.COUNTRY_NM AS 원산지,");
            sb.AppendLine("      J.TYPE_NM AS 유형,");
            sb.AppendLine("      C.INPUT_DATE AS 입고일자,");
            sb.AppendLine("      C.INPUT_CD AS 입고번호,");
            sb.AppendLine("      C.SEQ AS 입고순번,");
            sb.AppendLine("      (REPLACE(C.INPUT_DATE,'-','') + RIGHT('0000' + CONVERT(NVARCHAR(5),C.INPUT_CD),4) + RIGHT('00' + CONVERT(NVARCHAR(3),C.SEQ),2)) AS 바코드");
            sb.AppendLine("      from F_RAW_OUTPUT A");
            sb.AppendLine("      left outer join N_RAW_CODE B ");
            sb.AppendLine("      on A.RAW_MAT_CD = B.RAW_MAT_CD");
            sb.AppendLine("      INNER join F_RAW_DETAIL C");
            sb.AppendLine("      on C.INPUT_DATE = A.INPUT_DATE and C.INPUT_CD = A.INPUT_CD and C.SEQ = A.INPUT_SEQ");
            sb.AppendLine("      LEFT outer join N_UNIT_CODE D");
            sb.AppendLine("      on C.UNIT_CD = D.UNIT_CD");
            sb.AppendLine("      left outer join N_CHUGJONG_CODE E");
            sb.AppendLine("      on C.CHUGJONG_CD = E.CHUGJONG_CD");
            sb.AppendLine("      left outer join N_MEAT_CLASS_CODE G");
            sb.AppendLine("      on C.CLASS_CD = G.CLASS_CD");
            sb.AppendLine("      left outer join N_GRADE_CODE H");
            sb.AppendLine("      on C.GRADE_CD = H.GRADE_CD");
            sb.AppendLine("      left outer join N_RAW_COUNTRY_CODE I");
            sb.AppendLine("      on C.COUNTRY_CD = I.COUNTRY_CD");
            sb.AppendLine("      left outer join N_TYPE_CODE J");
            sb.AppendLine("      on C.TYPE_CD = J.TYPE_CD");
            sb.AppendLine(condition);
            sb.AppendLine("      order by A.OUTPUT_DATE ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        // LOT추적조회 
        public DataTable fn_Lot_Item_Srch_List(string txt_lot_bar)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.ITEM_CD ");
            sb.AppendLine("         ,A.FLOW_DATE ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,D.ITEM_NM ");
            sb.AppendLine("         ,D.SPEC ");
            sb.AppendLine("         ,A.COMPLETE_YN ");
            sb.AppendLine("         ,C.W_INST_DATE ");
            sb.AppendLine("         ,C.W_INST_CD ");
            sb.AppendLine("         ,C.INST_AMT ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("inner join ( ");
            sb.AppendLine("    select LOT_NO  ");
            sb.AppendLine("    from F_WORK_FLOW_DETAIL  ");
            sb.AppendLine("    where LOT_NO + RIGHT('00'+ convert(varchar, LOT_SUB), 3) = '" + txt_lot_bar + "'  ");
            sb.AppendLine("    group by LOT_NO  ");
            sb.AppendLine("    )B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("left outer join F_WORK_INST C ");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine("left outer join N_ITEM_CODE D ");
            sb.AppendLine("on A.ITEM_CD = D.ITEM_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //LOT 추적조회 상세 
        public DataTable fn_Lot_Detail(string txt_lot_bar)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("          C.F_SUB_DATE ");
            sb.AppendLine("         ,D.RAW_MAT_NM ");
            sb.AppendLine("         ,B.TOTAL_AMT ");
            sb.AppendLine("         ,A.W_INST_DATE ");
            sb.AppendLine("         ,A.W_INST_CD ");
            sb.AppendLine("         ,C.FLOW_CD ");
            sb.AppendLine("         ,E.FLOW_NM ");
            sb.AppendLine("         ,C.F_SUB_AMT ");
            sb.AppendLine("         ,C.LOSS ");
            sb.AppendLine("         ,C.POOR_AMT ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,A.CUST_CD AS SALES_CUST_CD ");
            sb.AppendLine("         ,(select CUST_NM from N_CUST_CODE where CUST_CD = A.CUST_CD and CUST_GUBUN = '1') AS SALES_CUST_NM ");
            sb.AppendLine("         ,C.F_STEP ");
            sb.AppendLine("         ,C.F_SUB_AMT ");
            sb.AppendLine("         ,F.OUTPUT_DATE ");
            sb.AppendLine("         ,G.INPUT_DATE ");
            sb.AppendLine("         ,G.CUST_CD AS PUR_CUST_CD ");
            sb.AppendLine("         ,G.INPUT_DATE ");
            sb.AppendLine("         ,(select CUST_NM from N_CUST_CODE where CUST_CD = G.CUST_CD and CUST_GUBUN = '2') AS PUR_CUST_NM");
            sb.AppendLine("from F_WORK_INST A ");
            sb.AppendLine("inner join F_WORK_INST_DETAIL B");
            sb.AppendLine("on A.W_INST_DATE = B.W_INST_DATE ");
            sb.AppendLine("     and A.W_INST_CD = B.W_INST_CD ");
            sb.AppendLine("inner join F_WORK_FLOW_DETAIL C");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO");
            sb.AppendLine("left outer join N_RAW_CODE D ");
            sb.AppendLine("on B.RAW_MAT_CD = D.RAW_MAT_CD ");
            sb.AppendLine("left outer join N_FLOW_CODE E ");
            sb.AppendLine("on C.FLOW_CD = E.FLOW_CD ");
            sb.AppendLine("left outer join F_RAW_OUTPUT F ");
            sb.AppendLine("on A.LOT_NO = F.LOT_NO ");
            sb.AppendLine(" and B.RAW_MAT_CD = F.RAW_MAT_CD ");
            sb.AppendLine("left outer join F_RAW_INPUT G ");
            sb.AppendLine("on F.INPUT_DATE = G.INPUT_DATE ");
            sb.AppendLine("     and F.INPUT_CD = G.INPUT_CD ");
            sb.AppendLine("left outer join F_RAW_DETAIL H ");
            sb.AppendLine("on F.INPUT_DATE = H.INPUT_DATE ");
            sb.AppendLine("     and F.INPUT_CD = H.INPUT_CD ");
            sb.AppendLine("     and F.INPUT_SEQ = H.SEQ ");
            sb.AppendLine("    where A.LOT_NO + RIGHT('00'+ convert(varchar, C.LOT_SUB), 3) = '" + txt_lot_bar + "'  ");
            sb.AppendLine("    ORDER BY E.FLOW_CD,B.RAW_MAT_CD  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 공정검사 요청현황  
        public DataTable fn_Flow_Chk_Req_List(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,B.F_SUB_DATE ");
            sb.AppendLine("         ,B.LOT_SUB ");
            sb.AppendLine("         ,B.FLOW_CD ");
            sb.AppendLine("         ,D.FLOW_NM ");
            sb.AppendLine("         ,B.F_STEP ");
            sb.AppendLine("         ,B.F_SUB_AMT ");
            sb.AppendLine("         ,B.COMPLETE_YN ");
            sb.AppendLine("         ,B.CHECK_YN ");
            sb.AppendLine("         ,B.ITEM_CHECK_YN ");
            sb.AppendLine("         ,C.ITEM_GUBUN ");
            //sb.AppendLine("         ,E.MEASURE_CNT ");
            //sb.AppendLine("         ,E.EVA_GUBUN ");
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '400' and S_CODE = C.ITEM_GUBUN)  AS ITEM_GUBUN_NM "); //제품구분 코드 600
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '620' and S_CODE = E.EVA_GUBUN)  AS EVA_GUBUN_NM "); //평가구분 코드 620
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = B.CHECK_YN)  AS CHECK_NM "); //평가구분 코드 620
            sb.AppendLine("         ,F.PASS_YN ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("inner join F_WORK_FLOW_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine("left outer join N_FLOW_CODE D ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD ");
            sb.AppendLine("left outer join N_FLOW_CHK E ");
            sb.AppendLine("on A.ITEM_CD = E.ITEM_CD ");
            sb.AppendLine(" and B.FLOW_CD = E.FLOW_CD ");
            sb.AppendLine("left outer join F_FLOW_CHK F ");
            sb.AppendLine("on A.LOT_NO = F.LOT_NO ");
            sb.AppendLine(" and B.LOT_SUB = F.LOT_SUB ");
            sb.AppendLine(" and B.F_STEP = F.F_STEP ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO desc,B.LOT_SUB ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }


        // 제품검사 요청현황 쿼리가 같음
        public DataTable fn_Item_Chk_Req_List(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,B.F_SUB_DATE ");
            sb.AppendLine("         ,B.LOT_SUB ");
            sb.AppendLine("         ,B.FLOW_CD ");
            sb.AppendLine("         ,D.FLOW_NM ");
            sb.AppendLine("         ,B.F_STEP ");
            sb.AppendLine("         ,B.F_SUB_AMT ");
            sb.AppendLine("         ,B.COMPLETE_YN ");
            sb.AppendLine("         ,B.CHECK_YN ");
            sb.AppendLine("         ,B.ITEM_CHECK_YN ");
            sb.AppendLine("         ,C.ITEM_GUBUN ");
            //sb.AppendLine("         ,E.MEASURE_CNT ");
            //sb.AppendLine("         ,E.EVA_GUBUN ");
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '400' and S_CODE = C.ITEM_GUBUN)  AS ITEM_GUBUN_NM "); //제품구분 코드 600
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '620' and S_CODE = E.EVA_GUBUN)  AS EVA_GUBUN_NM "); //평가구분 코드 620
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = B.ITEM_CHECK_YN)  AS ITEM_CHECK_NM "); //평가구분 코드 620
            sb.AppendLine("         ,F.PASS_YN ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("inner join F_WORK_FLOW_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine("left outer join N_FLOW_CODE D ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD ");
            sb.AppendLine("left outer join N_ITEM_CHK E ");
            sb.AppendLine("on A.ITEM_CD = E.ITEM_CD ");
            sb.AppendLine("left outer join F_ITEM_CHK F ");
            sb.AppendLine("on A.LOT_NO = F.LOT_NO ");
            sb.AppendLine(" and B.LOT_SUB = F.LOT_SUB ");
            sb.AppendLine(" and B.F_STEP = F.F_STEP ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine("order by A.LOT_NO desc,B.LOT_SUB ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 공정검사 현황이 요청이 아닌 미완료 혹은 완료일 경우
        public DataTable fn_Flow_Chk_Main_List(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("          A.F_CHK_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,A.FLOW_CD ");
            sb.AppendLine("         ,D.FLOW_NM ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,B.COMPLETE_YN ");
            sb.AppendLine("         ,B.CHECK_YN ");
            sb.AppendLine("         ,C.ITEM_GUBUN ");
            sb.AppendLine("         ,A.MEASURE_CNT ");
            //sb.AppendLine("         ,A.EVA_GUBUN ");
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '400' and S_CODE = C.ITEM_GUBUN)  AS ITEM_GUBUN_NM "); //제품구분 코드 600
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '620' and S_CODE = E.EVA_GUBUN)  AS EVA_GUBUN_NM "); //평가구분 코드 620
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = B.CHECK_YN)  AS CHECK_NM "); //평가구분 코드 620
            sb.AppendLine("         ,A.MAP ");
            sb.AppendLine("         ,A.MAP_SIZE ");
            sb.AppendLine("         ,A.PASS_YN ");
            sb.AppendLine("from F_FLOW_CHK A ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO");
            sb.AppendLine(" and A.LOT_SUB = B.LOT_SUB");
            sb.AppendLine(" and A.F_STEP = B.F_STEP");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine("left outer join N_FLOW_CODE D ");
            sb.AppendLine("on A.FLOW_CD = D.FLOW_CD ");
            sb.AppendLine("left outer join N_FLOW_CHK E ");
            sb.AppendLine("on A.ITEM_CD = E.ITEM_CD ");
            sb.AppendLine(" and B.FLOW_CD = E.FLOW_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 제품 현황이 요청이 아닌 미완료 혹은 완료일 경우
        public DataTable fn_Item_Chk_Main_List(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("          A.F_CHK_DATE ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,C.ITEM_NM ");
            sb.AppendLine("         ,C.SPEC ");
            sb.AppendLine("         ,A.LOT_SUB ");
            sb.AppendLine("         ,B.FLOW_CD ");
            sb.AppendLine("         ,D.FLOW_NM ");
            sb.AppendLine("         ,A.F_STEP ");
            sb.AppendLine("         ,A.F_SUB_AMT ");
            sb.AppendLine("         ,B.COMPLETE_YN ");
            sb.AppendLine("         ,B.ITEM_CHECK_YN ");
            sb.AppendLine("         ,C.ITEM_GUBUN ");
            sb.AppendLine("         ,A.MEASURE_CNT ");
            //sb.AppendLine("         ,A.EVA_GUBUN ");
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '400' and S_CODE = C.ITEM_GUBUN)  AS ITEM_GUBUN_NM "); //제품구분 코드 600
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '620' and S_CODE = E.EVA_GUBUN)  AS EVA_GUBUN_NM "); //평가구분 코드 620
            sb.AppendLine("         ,(select S_CODE_NM from [SM_FACTORY_COM].[dbo].[T_S_CODE] where L_CODE = '610' and S_CODE = B.ITEM_CHECK_YN)  AS ITEM_CHECK_NM "); //평가구분 코드 620
            sb.AppendLine("         ,A.MAP ");
            sb.AppendLine("         ,A.MAP_SIZE ");
            sb.AppendLine("         ,A.PASS_YN ");
            sb.AppendLine("from F_ITEM_CHK A ");
            sb.AppendLine("left outer join F_WORK_FLOW_DETAIL B  ");
            sb.AppendLine("on A.LOT_NO = B.LOT_NO");
            sb.AppendLine(" and A.LOT_SUB = B.LOT_SUB");
            sb.AppendLine(" and A.F_STEP = B.F_STEP");
            sb.AppendLine("left outer join N_ITEM_CODE C  ");
            sb.AppendLine("on A.ITEM_CD = C.ITEM_CD");
            sb.AppendLine("left outer join N_FLOW_CODE D  ");
            sb.AppendLine("on B.FLOW_CD = D.FLOW_CD");
            sb.AppendLine("left outer join N_ITEM_CHK E ");
            sb.AppendLine("on A.ITEM_CD = E.ITEM_CD ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        // 공정검사 시작 전 공정검사 기준등록 확인했는지 체크 
        public DataTable fn_Flow_Chk_Cnt(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as cnt ");
            sb.AppendLine("from N_FLOW_CHK  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //제품검사 Count
        public DataTable fn_Item_Chk_Cnt(string condition)  //condition = 현황
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select count(*) as cnt ");
            sb.AppendLine("from N_ITEM_CHK  ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //공정이동표 제품 SUB_NO의 현재 공정진행 데이터 추출
        public DataTable fn_wf_LotNo_Sub_Status(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.LOT_NO,A.LOT_SUB,ISNULL(A.F_STEP,0)AS F_STEP,A.FLOW_CD,C.FLOW_NM,A.F_SUB_AMT,A.F_SUB_DATE");
            sb.AppendLine(" from F_WORK_FLOW_DETAIL A ");
            sb.AppendLine(" inner join ( ");
            sb.AppendLine("             select LOT_NO,LOT_SUB,MAX(F_STEP)AS F_STEP ");
            sb.AppendLine("             from F_WORK_FLOW_DETAIL ");
            sb.AppendLine("             group by LOT_NO,LOT_SUB ");
            sb.AppendLine("             )B ");
            sb.AppendLine(" on A.LOT_NO = B.LOT_NO ");
            sb.AppendLine("     and A.LOT_SUB = B.LOT_SUB ");
            sb.AppendLine("     and A.F_STEP=  B.F_STEP ");
            sb.AppendLine(" left outer join N_FLOW_CODE C  ");
            sb.AppendLine(" on A.FLOW_CD = C.FLOW_CD  ");

            //sb.AppendLine("     and C.POOR_TYPE_YN = 'Y' ");
            sb.AppendLine("where 1=1");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.LOT_NO,A.LOT_SUB");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //작업지시 진행 될 또는 진행된 제품 찾기 
        public DataTable fn_wf_item_srch(string lot_no)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.ITEM_CD,B.ITEM_NM,B.SPEC");
            sb.AppendLine(" from F_WORK_INST A ");
            sb.AppendLine("inner join N_ITEM_CODE B ");
            sb.AppendLine(" on A.ITEM_CD = B.ITEM_CD ");

            //sb.AppendLine("     and C.POOR_TYPE_YN = 'Y' ");
            sb.AppendLine("where 1=1");
            sb.AppendLine("     and A.LOT_NO = '" + lot_no + "' ");
            sb.AppendLine(" order by A.LOT_NO ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Flow_Step_Curr(string lot_no, string lot_sub)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.LOT_NO,C.LOT_SUB,B.FLOW_SEQ,C.F_STEP ");
            sb.AppendLine("from F_WORK_FLOW A ");
            sb.AppendLine("left outer join ( ");
            sb.AppendLine("     select ITEM_CD,MAX(SEQ)AS FLOW_SEQ  ");
            sb.AppendLine("     from N_ITEM_FLOW ");
            sb.AppendLine("     group by ITEM_CD)B ");
            sb.AppendLine("on A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("inner join ( ");
            sb.AppendLine("     select LOT_NO,LOT_SUB,MAX(F_STEP) AS F_STEP ");
            sb.AppendLine("     from F_WORK_FLOW_DETAIL ");
            sb.AppendLine("     group by LOT_NO,LOT_SUB)C ");
            sb.AppendLine("on A.LOT_NO = C.LOT_NO ");
            sb.AppendLine("and C.LOT_SUB = '" + lot_sub + "' ");
            sb.AppendLine("where 1=1 ");
            sb.AppendLine("and C.LOT_NO = '" + lot_no + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        //수입검사기준 등록과 결과값 뿌려주기
        public DataTable fn_Raw_Chk_Rst_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select A.RAW_MAT_CD");
            sb.AppendLine("       ,A.CHK_CD ");
            sb.AppendLine("       ,A.CHK_STAN_VALUE ");
            sb.AppendLine("       ,B.RAW_MAT_CD AS RAW_MAT_CD_RST ");
            sb.AppendLine("       ,B.CHK_CD AS CHK_CD_RST");
            sb.AppendLine("       ,B.CHK_VALUE  ");
            sb.AppendLine("       ,C.CHK_NM  ");
            sb.AppendLine("       ,C.CHK_ORD  ");

            sb.AppendLine(" from N_RAW_CHK_STAN A");
            sb.AppendLine(" left outer join F_RAW_CHK_RST B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD   ");
            sb.AppendLine("     and A.CHK_CD = B.CHK_CD   ");
            sb.AppendLine(" left outer join N_CHK_CODE C ");
            sb.AppendLine(" on A.CHK_CD = C.CHK_CD   ");
            sb.AppendLine("     and C.CHK_GUBUN = '3'   ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.RAW_MAT_CD,C.CHK_ORD  ");

            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        #region insert

        public int insertStaff(
             string txt_user_cd
            , string txt_user_nm
            , string dept_cd
            , string pos_cd
            , string stor_cd
            , string join_date
            , string txt_phone
            , string txt_login
            , string txt_pw
            , string auth_cd
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_STAFF_CODE");
                sb.AppendLine(" where STAFF_CD = '" + txt_user_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_STAFF_CODE(");
                sb.AppendLine("     STAFF_CD ");
                sb.AppendLine("     ,STAFF_NM ");
                sb.AppendLine("     ,JOIN_DATE ");
                sb.AppendLine("     ,PHONE_NUM ");
                sb.AppendLine("     ,DEPT_CD ");
                sb.AppendLine("     ,POS_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,LOGIN_ID ");
                sb.AppendLine("     ,PW ");
                sb.AppendLine("     ,AUTH_SET ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @STAFF_CD ");
                sb.AppendLine(" ,@STAFF_NM ");
                sb.AppendLine(" ,@JOIN_DATE ");
                sb.AppendLine(" ,@PHONE_NUM ");
                sb.AppendLine(" ,@DEPT_CD ");
                sb.AppendLine(" ,@POS_CD ");
                sb.AppendLine(" ,@STORAGE_CD ");
                sb.AppendLine(" ,@LOGIN_ID ");
                sb.AppendLine(" ,@PW ");
                sb.AppendLine(" ,@AUTH_SET ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STAFF_CD", txt_user_cd);
                sCommand.Parameters.AddWithValue("@STAFF_NM", txt_user_nm);
                sCommand.Parameters.AddWithValue("@JOIN_DATE", join_date);
                sCommand.Parameters.AddWithValue("@PHONE_NUM", txt_phone);
                sCommand.Parameters.AddWithValue("@DEPT_CD", dept_cd);
                sCommand.Parameters.AddWithValue("@POS_CD", pos_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", stor_cd);
                sCommand.Parameters.AddWithValue("@LOGIN_ID", txt_login);
                sCommand.Parameters.AddWithValue("@PW", txt_pw);
                sCommand.Parameters.AddWithValue("@AUTH_SET", auth_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertDept(string txtDeptCd, string txtDeptNm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_dept_code");
                sb.AppendLine(" where dept_cd = '" + txtDeptCd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_DEPT_CODE(");
                sb.AppendLine("     DEPT_CD ");
                sb.AppendLine("     ,DEPT_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @DEPT_CD ");
                sb.AppendLine(" ,@DEPT_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DEPT_CD", txtDeptCd);
                sCommand.Parameters.AddWithValue("@DEPT_NM", txtDeptNm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertPos(string txt_pos_cd, string txt_pos_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_pos_code");
                sb.AppendLine(" where pos_cd = '" + txt_pos_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_POS_CODE(");
                sb.AppendLine("     POS_CD ");
                sb.AppendLine("     ,POS_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @POS_CD ");
                sb.AppendLine(" ,@POS_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POS_CD", txt_pos_cd);
                sCommand.Parameters.AddWithValue("@POS_NM", txt_pos_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_POS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertStor(string txt_stor_cd, string txt_stor_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_STORAGE_CODE");
                sb.AppendLine(" where STORAGE_CD = '" + txt_stor_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_STORAGE_CODE(");
                sb.AppendLine("     STORAGE_CD ");
                sb.AppendLine("     ,STORAGE_NM ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @STORAGE_CD ");
                sb.AppendLine(" ,@STORAGE_NM ");

                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STORAGE_CD", txt_stor_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_NM", txt_stor_nm);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_STOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        // 유형 코드 

        public int insertType(string txt_type_cd, string txt_type_nm, string chk_poor_yn, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_type_code");
                sb.AppendLine(" where type_cd = '" + txt_type_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_TYPE_CODE(");
                sb.AppendLine("     TYPE_CD ");
                sb.AppendLine("     ,TYPE_NM ");
                sb.AppendLine("     ,POOR_TYPE_YN ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @TYPE_CD ");
                sb.AppendLine(" ,@TYPE_NM ");
                sb.AppendLine(" ,@POOR_TYPE_YN ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@TYPE_CD", txt_type_cd);
                sCommand.Parameters.AddWithValue("@TYPE_NM", txt_type_nm);
                sCommand.Parameters.AddWithValue("@POOR_TYPE_YN", chk_poor_yn);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertUnit(string txt_unit_cd, string txt_unit_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_unit_code");
                sb.AppendLine(" where unit_cd = '" + txt_unit_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_UNIT_CODE(");
                sb.AppendLine("     UNIT_CD ");
                sb.AppendLine("     ,UNIT_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @UNIT_CD ");
                sb.AppendLine(" ,@UNIT_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@UNIT_CD", txt_unit_cd);
                sCommand.Parameters.AddWithValue("@UNIT_NM", txt_unit_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_UNIT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertLine(string txt_line_cd, string txt_line_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_line_code");
                sb.AppendLine(" where line_cd = '" + txt_line_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_LINE_CODE(");
                sb.AppendLine("     LINE_CD ");
                sb.AppendLine("     ,LINE_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @LINE_CD ");
                sb.AppendLine(" ,@LINE_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LINE_CD", txt_line_cd);
                sCommand.Parameters.AddWithValue("@LINE_NM", txt_line_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_LINE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertPoor(string txt_poor_cd, string txt_poor_nm, string chk_poor_cd, string comment) // 불량 삽입
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_poor_code");
                sb.AppendLine(" where poor_cd = '" + txt_poor_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_POOR_CODE(");
                sb.AppendLine("     POOR_CD ");
                sb.AppendLine("     ,POOR_NM ");
                sb.AppendLine("     ,TYPE_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @POOR_CD ");
                sb.AppendLine(" ,@POOR_NM ");
                sb.AppendLine(" ,@TYPE_CD ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POOR_CD", txt_poor_cd);
                sCommand.Parameters.AddWithValue("@POOR_NM", txt_poor_nm);
                sCommand.Parameters.AddWithValue("@TYPE_CD", chk_poor_cd);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_POOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }

        }
        public int insertChugjong(string txt_ChugJong_cd, string txt_ChugJong_nm, string comment) // 축종 삽입
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_ChugJong_code");
                sb.AppendLine(" where ChugJong_cd = '" + txt_ChugJong_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_ChugJong_CODE(");
                sb.AppendLine("     ChugJong_CD ");
                sb.AppendLine("     ,ChugJong_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @ChugJong_CD ");
                sb.AppendLine(" ,@ChugJong_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CHUGJONG_CD", txt_ChugJong_cd);
                sCommand.Parameters.AddWithValue("@CHUGJONG_NM", txt_ChugJong_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ChugJong_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertExprt(string txt_Exprt_date, string cmb_Exprt_gbn) // 유통 일수 삽입
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_exprt_date");
                sb.AppendLine(" where exprt_count = '" + txt_Exprt_date + "'");
                sb.AppendLine(" and   exprt_gubun= '" + cmb_Exprt_gbn + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_EXPRT_DATE(");
                sb.AppendLine("     EXPRT_COUNT ");
                sb.AppendLine("     ,EXPRT_GUBUN ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @EXPRT_COUNT ");
                sb.AppendLine(" ,@EXPRT_GUBUN ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@EXPRT_COUNT", txt_Exprt_date);
                sCommand.Parameters.AddWithValue("@EXPRT_GUBUN", cmb_Exprt_gbn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_EXPRT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertCountry(string txt_country_cd, string txt_country_nm, string txt_country_cmt, string cmb_country_usdcd) // 원산지 삽입
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_raw_country_code");
                sb.AppendLine(" where country_cd = '" + txt_country_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_RAW_COUNTRY_CODE(");
                sb.AppendLine("     COUNTRY_CD ");
                sb.AppendLine("     ,COUNTRY_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @COUNTRY_CD ");
                sb.AppendLine(" ,@COUNTRY_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ,@USED_CD ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);
                sCommand.Parameters.AddWithValue("@COUNTRY_NM", txt_country_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_country_cmt);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_country_usdcd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COUNTRY_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertMeatClass(string txt_MeatClass_cd, string txt_MeatClass_nm, string txt_HAMYANG) // 육류 분류 삽입
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_meat_class_code");
                sb.AppendLine(" where class_cd = '" + txt_MeatClass_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_MEAT_CLASS_CODE(");
                sb.AppendLine("     CLASS_CD ");
                sb.AppendLine("     ,CLASS_NM ");
                sb.AppendLine("     ,HAMYANG ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @CLASS_CD ");
                sb.AppendLine(" ,@CLASS_NM ");
                sb.AppendLine(" ,@HAMYANG ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CLASS_CD", txt_MeatClass_cd);
                sCommand.Parameters.AddWithValue("@CLASS_NM", txt_MeatClass_nm);
                sCommand.Parameters.AddWithValue("@HAMYANG", txt_HAMYANG);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_MEATCLASS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertFrozen(string txt_frozen_cd, string txt_frozen_nm, string txt_frozen_exprt, string cmb_frozen_dategbn, string txt_frozen_cmt) // 냉장 냉동 삽입
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_frozen_code");
                sb.AppendLine(" where frozen_cd = '" + txt_frozen_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_FROZEN_CODE(");
                sb.AppendLine("     FROZEN_CD ");
                sb.AppendLine("     ,FROZEN_NM ");
                sb.AppendLine("     ,EXPRT_COUNT ");
                sb.AppendLine("     ,DAY_GUBUN ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @FROZEN_CD ");
                sb.AppendLine(" ,@FROZEN_NM ");
                sb.AppendLine(" ,@EXPRT_COUNT ");
                sb.AppendLine(" ,@DAY_GUBUN ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FROZEN_CD", txt_frozen_cd);
                sCommand.Parameters.AddWithValue("@FROZEN_NM", txt_frozen_nm);
                sCommand.Parameters.AddWithValue("@EXPRT_COUNT", txt_frozen_exprt);
                sCommand.Parameters.AddWithValue("@DAY_GUBUN", cmb_frozen_dategbn);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_frozen_cmt);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FROZEN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertGrade(string txt_grade_cd, string txt_grade_nm) // 냉장 냉동 삽입
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_grade_code");
                sb.AppendLine(" where grade_cd = '" + txt_grade_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_GRADE_CODE(");
                sb.AppendLine("     GRADE_CD ");
                sb.AppendLine("     ,GRADE_NM ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @GRADE_CD ");
                sb.AppendLine(" ,@GRADE_NM ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@GRADE_CD", txt_grade_cd);
                sCommand.Parameters.AddWithValue("@GRADE_NM", txt_grade_nm);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_GRADE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertFlow(string txt_flow_cd
            , string txt_flow_nm
            , string cmb_stor
            , string chk_flow_yn
            , string chk_item_gbn
            , string chk_flow_chk_yn
            , string chk_temp_yn
            , string chk_mold_yn
            , string cmb_poor
            , string chk_manager_yn
            , string manager_cd
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from n_flow_code");
                sb.AppendLine(" where flow_cd = '" + txt_flow_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_FLOW_CODE(");
                sb.AppendLine("     FLOW_CD ");
                sb.AppendLine("     ,FLOW_NM ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,FLOW_INSERT_YN ");
                sb.AppendLine("     ,ITEM_IDEN_YN ");
                sb.AppendLine("     ,FLOW_CHK_YN ");
                sb.AppendLine("     ,TEMP_TIME_YN ");
                sb.AppendLine("     ,MOLD_YN ");
                sb.AppendLine("     ,POOR_TYPE_CD ");
                sb.AppendLine("     ,STAFF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @FLOW_CD ");
                sb.AppendLine("     ,@FLOW_NM ");
                sb.AppendLine("     ,@STORAGE_CD ");
                sb.AppendLine("     ,@FLOW_INSERT_YN ");
                sb.AppendLine("     ,@ITEM_IDEN_YN ");
                sb.AppendLine("     ,@FLOW_CHK_YN ");
                sb.AppendLine("     ,@TEMP_TIME_YN ");
                sb.AppendLine("     ,@MOLD_YN ");
                sb.AppendLine("     ,@POOR_TYPE_CD ");
                sb.AppendLine("     ,@STAFF_YN ");
                sb.AppendLine("     ,@STAFF_CD ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);
                sCommand.Parameters.AddWithValue("@FLOW_NM", txt_flow_nm);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);
                sCommand.Parameters.AddWithValue("@FLOW_INSERT_YN", chk_flow_yn);
                sCommand.Parameters.AddWithValue("@ITEM_IDEN_YN", chk_item_gbn);
                sCommand.Parameters.AddWithValue("@FLOW_CHK_YN", chk_flow_chk_yn);
                sCommand.Parameters.AddWithValue("@TEMP_TIME_YN", chk_temp_yn);
                sCommand.Parameters.AddWithValue("@MOLD_YN", chk_mold_yn);
                sCommand.Parameters.AddWithValue("@POOR_TYPE_CD", cmb_poor);
                sCommand.Parameters.AddWithValue("@STAFF_YN", chk_manager_yn);
                sCommand.Parameters.AddWithValue("@STAFF_CD", manager_cd);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertRawMat(
              string txt_raw_mat_cd
            , string txt_raw_mat_nm
            , string txt_spec
            , string txt_quality
            , string cmb_rat_mat_gbn
            , string cmb_type
            , string cmb_input_unit
            , string cmb_output_unit
            , double txt_conver_ratio
            , double txt_input_price
            , double txt_output_price
            , string cmb_line
            , string st_status_yn
            , string cmb_raw_stor
            , string cmb_used
            , string cmb_cust
            , string cmb_raw_chk
            , string txt_part_no
            , string comment
            , string cmb_chugjong
            , string cmb_class
            , string cmb_country
            , string cmb_grade
            , string txt_hamyang
            , string txt_label_nm
            , string txt_box_amt
            , string txt_exprt_count
            , string cmb_pattern
            , string cmb_vat_cd
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_RAW_CODE");
                sb.AppendLine(" where RAW_MAT_CD = '" + txt_raw_mat_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_RAW_CODE(");
                sb.AppendLine("     RAW_MAT_CD ");
                sb.AppendLine("     ,RAW_MAT_NM ");
                sb.AppendLine("     ,SPEC ");
                sb.AppendLine("     ,RAW_MAT_GUBUN ");
                sb.AppendLine("     ,TYPE_CD ");
                sb.AppendLine("     ,INPUT_UNIT ");
                sb.AppendLine("     ,OUTPUT_UNIT ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,CVR_RATIO ");
                sb.AppendLine("     ,INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE ");
                sb.AppendLine("     ,ST_STATUS_YN ");
                sb.AppendLine("     ,RAW_STORAGE ");
                sb.AppendLine("     ,EX_STAN_QUALITY ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,BASIC_STOCK ");
                sb.AppendLine("     ,BAL_STOCK ");
                sb.AppendLine("     ,CHECK_GUBUN ");
                sb.AppendLine("     ,PART_NO ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,CHUGJONG_CD ");
                sb.AppendLine("     ,CLASS_CD ");
                sb.AppendLine("     ,GRADE_CD ");
                sb.AppendLine("     ,COUNTRY_CD ");
                sb.AppendLine("     ,HAMYANG ");
                sb.AppendLine("     ,LABEL_NM ");
                sb.AppendLine("     ,BOX_AMT ");
                sb.AppendLine("     ,EXPRT_COUNT ");
                sb.AppendLine("     ,PATTERN_CD ");
                sb.AppendLine("     ,VAT_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @RAW_MAT_CD ");
                sb.AppendLine("     ,@RAW_MAT_NM ");
                sb.AppendLine("     ,@SPEC ");
                sb.AppendLine("     ,@RAW_MAT_GUBUN ");
                sb.AppendLine("     ,@TYPE_CD ");
                sb.AppendLine("     ,@INPUT_UNIT ");
                sb.AppendLine("     ,@OUTPUT_UNIT ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@CVR_RATIO ");
                sb.AppendLine("     ,@INPUT_PRICE ");
                sb.AppendLine("     ,@OUTPUT_PRICE ");
                sb.AppendLine("     ,@ST_STATUS_YN ");
                sb.AppendLine("     ,@RAW_STORAGE ");
                sb.AppendLine("     ,@EX_STAN_QUALITY ");
                sb.AppendLine("     ,@USED_CD ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,'0' ");
                sb.AppendLine("     ,'0' ");
                sb.AppendLine("     ,@CHECK_GUBUN ");
                sb.AppendLine("     ,@PART_NO ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@CHUGJONG_CD ");
                sb.AppendLine("     ,@CLASS_CD ");
                sb.AppendLine("     ,@GRADE_CD ");
                sb.AppendLine("     ,@COUNTRY_CD  ");
                sb.AppendLine("     ,@HAMYANG ");
                sb.AppendLine("     ,@LABEL_NM ");
                sb.AppendLine("     ,@BOX_AMT ");
                sb.AppendLine("     ,@EXPRT_COUNT ");
                sb.AppendLine("     ,@PATTERN_CD ");
                sb.AppendLine("     ,@VAT_CD ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_mat_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_NM", txt_raw_mat_nm);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@RAW_MAT_GUBUN", cmb_rat_mat_gbn);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@INPUT_UNIT", cmb_input_unit);
                sCommand.Parameters.AddWithValue("@OUTPUT_UNIT", cmb_output_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@CVR_RATIO", txt_conver_ratio);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@ST_STATUS_YN", st_status_yn);
                sCommand.Parameters.AddWithValue("@RAW_STORAGE", cmb_raw_stor);
                sCommand.Parameters.AddWithValue("@EX_STAN_QUALITY", txt_quality);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@CHECK_GUBUN", cmb_raw_chk);
                sCommand.Parameters.AddWithValue("@PART_NO", txt_part_no);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@CHUGJONG_CD", cmb_chugjong);
                sCommand.Parameters.AddWithValue("@CLASS_CD", cmb_class);
                sCommand.Parameters.AddWithValue("@GRADE_CD", cmb_grade);
                sCommand.Parameters.AddWithValue("@COUNTRY_CD", cmb_country);
                sCommand.Parameters.AddWithValue("@HAMYANG", txt_hamyang);
                sCommand.Parameters.AddWithValue("@LABEL_NM", txt_label_nm);
                sCommand.Parameters.AddWithValue("@BOX_AMT", txt_box_amt);
                sCommand.Parameters.AddWithValue("@EXPRT_COUNT", txt_exprt_count);
                sCommand.Parameters.AddWithValue("@PATTERN_CD", cmb_pattern);
                sCommand.Parameters.AddWithValue("@VAT_CD", cmb_vat_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_MAT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                Console.WriteLine(e.Message + "/" + e.ToString());
                return 9;
            }
        }

        public int insertFac(
              string txt_fac_cd
            , string txt_fac_nm
            , string txt_model_nm
            , string txt_spec
            , string txt_manu_comp
            , string txt_acq_date
            , string txt_acq_price
            , string cmb_dept
            , string txt_used
            , string txt_pro_capa
            , string txt_power_num
            , string cmb_mainten)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_FAC_CODE");
                sb.AppendLine(" where FAC_CD = '" + txt_fac_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_FAC_CODE(");
                sb.AppendLine("     FAC_CD ");
                sb.AppendLine("     ,FAC_NM ");
                sb.AppendLine("     ,MODEL_NM ");
                sb.AppendLine("     ,SPEC ");
                sb.AppendLine("     ,MANU_COMPANY ");
                sb.AppendLine("     ,ACQ_DATE ");
                sb.AppendLine("     ,ACQ_PRICE ");
                sb.AppendLine("     ,DEPT_CD ");
                sb.AppendLine("     ,USED ");
                sb.AppendLine("     ,PRO_CAPA ");
                sb.AppendLine("     ,POWER_NUMBER ");
                sb.AppendLine("     ,MAINTEN_CLASS ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @FAC_CD ");
                sb.AppendLine("     ,@FAC_NM ");
                sb.AppendLine("     ,@MODEL_NM ");
                sb.AppendLine("     ,@SPEC ");
                sb.AppendLine("     ,@MANU_COMPANY ");
                sb.AppendLine("     ,@ACQ_DATE ");
                sb.AppendLine("     ,@ACQ_PRICE ");
                sb.AppendLine("     ,@DEPT_CD ");
                sb.AppendLine("     ,@USED ");
                sb.AppendLine("     ,@PRO_CAPA ");
                sb.AppendLine("     ,@POWER_NUMBER ");
                sb.AppendLine("     ,@MAINTEN_CLASS ");
                sb.AppendLine("     ,'' ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_fac_cd);
                sCommand.Parameters.AddWithValue("@FAC_NM", txt_fac_nm);
                sCommand.Parameters.AddWithValue("@MODEL_NM", txt_model_nm);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@MANU_COMPANY", txt_manu_comp);
                sCommand.Parameters.AddWithValue("@ACQ_DATE", txt_acq_date);
                sCommand.Parameters.AddWithValue("@ACQ_PRICE", txt_acq_price);
                sCommand.Parameters.AddWithValue("@DEPT_CD", cmb_dept);
                sCommand.Parameters.AddWithValue("@USED", txt_used);
                sCommand.Parameters.AddWithValue("@PRO_CAPA", txt_pro_capa);
                sCommand.Parameters.AddWithValue("@POWER_NUMBER", txt_power_num);
                sCommand.Parameters.AddWithValue("@MAINTEN_CLASS", cmb_mainten);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //거래처 등록 

        public int insertCust(
              string txt_cust_cd
            , string cust_gbn
            , string txt_cust_nm
            , string txt_owner
            , string txt_saup_no
            , string txt_uptae
            , string txt_jong
            , string txt_deal_type
            , string txt_post_no
            , string txt_addr
            , string txt_cust_manager
            , string txt_email
            , string txt_comp_phone
            , string txt_phone
            , string txt_fax
            , string txt_start_date
            , string cmb_manager
            , string cmb_used
            , string comment
            , string cmb_tax
            , string txt_balance
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_CUST_CODE");
                sb.AppendLine(" where CUST_CD = '" + txt_cust_cd + "'");
                sb.AppendLine(" and CUST_GUBUN = '" + cust_gbn + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_CUST_CODE(");
                sb.AppendLine("     CUST_CD ");
                sb.AppendLine("     ,CUST_GUBUN ");
                sb.AppendLine("     ,CUST_NM ");
                sb.AppendLine("     ,OWNER ");
                sb.AppendLine("     ,SAUP_NO ");
                sb.AppendLine("     ,UPTAE ");
                sb.AppendLine("     ,JONGMOK ");
                sb.AppendLine("     ,DEAL_TYPE ");
                sb.AppendLine("     ,POST_NO ");
                sb.AppendLine("     ,ADDR ");
                sb.AppendLine("     ,CUST_MANAGER ");
                sb.AppendLine("     ,CUST_EMAIL ");
                sb.AppendLine("     ,CUST_COMP_PHONE ");
                sb.AppendLine("     ,CUST_PHONE ");
                sb.AppendLine("     ,CUST_FAX ");
                sb.AppendLine("     ,CUST_OPEN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine("     ,BALANCE ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @CUST_CD ");
                sb.AppendLine("     ,@CUST_GUBUN ");
                sb.AppendLine("     ,@CUST_NM ");
                sb.AppendLine("     ,@OWNER ");
                sb.AppendLine("     ,@SAUP_NO ");
                sb.AppendLine("     ,@UPTAE ");
                sb.AppendLine("     ,@JONGMOK ");
                sb.AppendLine("     ,@DEAL_TYPE ");
                sb.AppendLine("     ,@POST_NO ");
                sb.AppendLine("     ,@ADDR ");
                sb.AppendLine("     ,@CUST_MANAGER ");
                sb.AppendLine("     ,@CUST_EMAIL ");
                sb.AppendLine("     ,@CUST_COMP_PHONE ");
                sb.AppendLine("     ,@CUST_PHONE ");
                sb.AppendLine("     ,@CUST_FAX ");
                sb.AppendLine("     ,@CUST_OPEN ");
                sb.AppendLine("     ,@STAFF_CD ");
                sb.AppendLine("     ,@USED_CD ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@TAX_CD ");
                sb.AppendLine("     ,@BALANCE ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@CUST_GUBUN", cust_gbn);
                sCommand.Parameters.AddWithValue("@CUST_NM", txt_cust_nm);
                sCommand.Parameters.AddWithValue("@OWNER", txt_owner);
                sCommand.Parameters.AddWithValue("@SAUP_NO", txt_saup_no);
                sCommand.Parameters.AddWithValue("@UPTAE", txt_uptae);
                sCommand.Parameters.AddWithValue("@JONGMOK", txt_jong);
                sCommand.Parameters.AddWithValue("@DEAL_TYPE", txt_deal_type);
                sCommand.Parameters.AddWithValue("@POST_NO", txt_post_no);
                sCommand.Parameters.AddWithValue("@ADDR", txt_addr);
                sCommand.Parameters.AddWithValue("@CUST_MANAGER", txt_cust_manager);
                sCommand.Parameters.AddWithValue("@CUST_EMAIL", txt_email);
                sCommand.Parameters.AddWithValue("@CUST_COMP_PHONE", txt_comp_phone);
                sCommand.Parameters.AddWithValue("@CUST_PHONE", txt_phone);
                sCommand.Parameters.AddWithValue("@CUST_FAX", txt_fax);
                sCommand.Parameters.AddWithValue("@CUST_OPEN", txt_start_date);
                sCommand.Parameters.AddWithValue("@STAFF_cD", cmb_manager);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@TAX_CD", cmb_tax);
                sCommand.Parameters.AddWithValue("@BALANCE", int.Parse(txt_balance));

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_CUST_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }





        public int insertItem(
              string txt_item_cd
            , string txt_item_nm
            , string cmb_item_gbn
            , string txt_spec
            , string cmb_type
            , string cmb_line
            , string cmb_unit
            , string cmb_stor_loc
            , double txt_prop_stock
            , double txt_item_weight
            , double txt_input_price
            , double txt_output_price
            , double txt_char_amt
            , double txt_pack_amt
            , string cmb_cust
            , string chk_print_yn
            , string cmb_used
            , string input_date
            , string box_bar_cd
            , string box_amt
            , string unit_bar_cd
            , string unit_amt
            , string comment
            , string cmb_vat_cd
            , string chugjong_cd
            , string class_cd
            , string country_cd
            , string label_nm
            , string hamyang
            , conDataGridView comp_dgv
            , conDataGridView flow_dgv
            , conDataGridView half_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_ITEM_CODE");
                sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_ITEM_CODE(");
                sb.AppendLine("     ITEM_CD ");
                sb.AppendLine("     ,ITEM_NM ");
                sb.AppendLine("     ,ITEM_GUBUN ");
                sb.AppendLine("     ,SPEC ");
                sb.AppendLine("     ,TYPE_CD ");
                sb.AppendLine("     ,UNIT_CD ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,STOCK_LOC ");
                sb.AppendLine("     ,PROP_STOCK ");
                sb.AppendLine("     ,BAL_STOCK ");
                sb.AppendLine("     ,BASIC_STOCK ");
                sb.AppendLine("     ,ITEM_WEIGHT ");
                sb.AppendLine("     ,INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE ");
                sb.AppendLine("     ,CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,PRINT_YN ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("     ,INPUT_DATE ");
                sb.AppendLine("     ,BOX_BAR_CD ");
                sb.AppendLine("     ,BOX_AMT ");
                sb.AppendLine("     ,UNIT_BAR_CD ");
                sb.AppendLine("     ,UNIT_AMT ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,VAT_CD ");
                sb.AppendLine("     ,CHUGJONG_CD ");
                sb.AppendLine("     ,CLASS_CD ");
                sb.AppendLine("     ,COUNTRY_CD ");
                sb.AppendLine("     ,LABEL_NM ");
                sb.AppendLine("     ,HAMYANG ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @ITEM_CD ");
                sb.AppendLine("     ,@ITEM_NM ");
                sb.AppendLine("     ,@ITEM_GUBUN ");
                sb.AppendLine("     ,@SPEC ");
                sb.AppendLine("     ,@TYPE_CD ");
                sb.AppendLine("     ,@UNIT_CD ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@STOCK_LOC ");
                sb.AppendLine("     ,@PROP_STOCK ");
                sb.AppendLine("     ,0 ");
                sb.AppendLine("     ,0 ");
                sb.AppendLine("     ,@ITEM_WEIGHT ");
                sb.AppendLine("     ,@INPUT_PRICE ");
                sb.AppendLine("     ,@OUTPUT_PRICE ");
                sb.AppendLine("     ,@CHARGE_AMT ");
                sb.AppendLine("     ,@PACK_AMT ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@PRINT_YN ");
                sb.AppendLine("     ,@USED_CD ");
                sb.AppendLine("     ,@INPUT_DATE ");
                sb.AppendLine("     ,@BOX_BAR_CD ");
                sb.AppendLine("     ,@BOX_AMT ");
                sb.AppendLine("     ,@UNIT_BAR_CD ");
                sb.AppendLine("     ,@UNIT_AMT ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@VAT_CD ");
                sb.AppendLine("     ,@CHUGJONG_CD ");
                sb.AppendLine("     ,@CLASS_CD       ");
                sb.AppendLine("     ,@COUNTRY_CD     ");
                sb.AppendLine("     ,@LABEL_NM      ");
                sb.AppendLine("     ,@HAMYANG       ");
                sb.AppendLine(" ) ");

                if (comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < comp_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                        sb.AppendLine("insert into N_ITEM_COMP(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,@seq" + i + " ");
                        sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("  )");
                    }
                }



                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@ITEM_NM", txt_item_nm);
                sCommand.Parameters.AddWithValue("@ITEM_GUBUN", cmb_item_gbn);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@UNIT_CD", cmb_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@STOCK_LOC", "");
                sCommand.Parameters.AddWithValue("@PROP_STOCK", txt_prop_stock);
                sCommand.Parameters.AddWithValue("@ITEM_WEIGHT", txt_item_weight);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt);
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@PRINT_YN", chk_print_yn);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);

                sCommand.Parameters.AddWithValue("@BOX_BAR_CD", box_bar_cd);
                sCommand.Parameters.AddWithValue("@BOX_AMT", box_amt);
                sCommand.Parameters.AddWithValue("@UNIT_BAR_CD", unit_bar_cd);
                sCommand.Parameters.AddWithValue("@UNIT_AMT", unit_amt);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@VAT_CD", cmb_vat_cd);
                sCommand.Parameters.AddWithValue("@CHUGJONG_CD", chugjong_cd);
                sCommand.Parameters.AddWithValue("@CLASS_CD", class_cd);
                sCommand.Parameters.AddWithValue("@COUNTRY_CD", country_cd);
                sCommand.Parameters.AddWithValue("@LABEL_NM", label_nm);
                sCommand.Parameters.AddWithValue("@HAMYANG", hamyang);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //공정검사 항목 
        public int insertRawChk(
              string txt_raw_mat_cd
            , string txt_control_no
            , conDataGridView raw_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_RAW_CHK");
                sb.AppendLine(" where RAW_MAT_CD = '" + txt_raw_mat_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_RAW_CHK(");
                sb.AppendLine("     RAW_MAT_CD ");
                sb.AppendLine("     ,CONTROL_NO ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @RAW_MAT_CD ");
                sb.AppendLine("     ,@CONTROL_NO ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (raw_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < raw_chk_dgv.Rows.Count; i++)
                    {

                        sb.AppendLine("insert into N_RAW_CHK_STAN(");
                        sb.AppendLine("     RAW_MAT_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,CHK_STAN_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("     ,'" + raw_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + raw_chk_dgv.Rows[i].Cells["CHK_STAN_VALUE"].Value + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_mat_cd);
                sCommand.Parameters.AddWithValue("@CONTROL_NO", txt_control_no);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //공정검사 항목 
        public int insertFlowChk(
              string txt_item_cd
            , string txt_flow_cd
            , string txt_item_img
            , string txt_measure_cnt
            , conDataGridView flow_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_FLOW_CHK");
                sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "'");
                sb.AppendLine("     and FLOW_CD = '" + txt_flow_cd + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_FLOW_CHK(");
                sb.AppendLine("     ITEM_CD ");
                sb.AppendLine("     ,FLOW_CD ");
                sb.AppendLine("     ,MEASURE_CNT ");
                //sb.AppendLine("     ,ITEM_IMG ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @ITEM_CD ");
                sb.AppendLine("     ,@FLOW_CD ");
                sb.AppendLine("     ,@MEASURE_CNT ");
                //sb.AppendLine("     ,@ITEM_IMG ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (flow_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_FLOW_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_FLOW_CHK_STAN ");
                        sb.AppendLine("set CHK_LOC = '" + (string)flow_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("   ,EVA_GUBUN = '" + (string)flow_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("   ,RULE_SIZE = '" + (string)flow_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("   ,RULE_LIMIT = '" + (string)flow_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("   ,MEASURE_APP = '" + (string)flow_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("   ,CHK_METHOD = '" + (string)flow_chk_dgv.Rows[i].Cells["CHK_METHOD"].Value + "' ");
                        sb.AppendLine("   ,LOWER_SIZE = " + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SIZE = " + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,LOWER_SELF = " + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SELF = " + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_FLOW_CHK_STAN(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,FLOW_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,EVA_GUBUN ");
                        sb.AppendLine("     ,CHK_LOC ");
                        sb.AppendLine("     ,RULE_SIZE ");
                        sb.AppendLine("     ,RULE_LIMIT ");
                        sb.AppendLine("     ,MEASURE_APP ");
                        sb.AppendLine("     ,CHK_METHOD ");
                        sb.AppendLine("     ,LOWER_SIZE ");
                        sb.AppendLine("     ,UPPER_SIZE ");
                        sb.AppendLine("     ,LOWER_SELF ");
                        sb.AppendLine("     ,UPPER_SELF ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,'" + txt_flow_cd + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (string)flow_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_METHOD"].Value + "' ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);
                sCommand.Parameters.AddWithValue("@MEASURE_CNT", txt_measure_cnt);
                //sCommand.Parameters.AddWithValue("@ITEM_IMG", txt_item_img);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //공정검사 등록 
        public int insertFlowChkExam(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , string txt_item_cd
            , string txt_flow_cd
            , string txt_sub_amt
            , string txt_measure_cnt
            , int startIdx
            , Label lblSearch
            , byte[] img
            , int img_size
            , DataGridView flow_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from F_FLOW_CHK");
                sb.AppendLine(" where LOT_NO = '" + txt_lot_no + "'");
                sb.AppendLine("     and LOT_SUB = '" + txt_lot_sub + "' ");
                sb.AppendLine("     and F_STEP = '" + txt_f_step + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }
                string f_chk_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                sb.AppendLine("insert into F_FLOW_CHK(");
                sb.AppendLine("     LOT_NO ");
                sb.AppendLine("     ,LOT_SUB ");
                sb.AppendLine("     ,F_STEP ");
                sb.AppendLine("     ,F_CHK_DATE ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,FLOW_CD ");
                sb.AppendLine("     ,F_SUB_AMT ");
                sb.AppendLine("     ,MEASURE_CNT ");
                sb.AppendLine("     ,MAP ");
                sb.AppendLine("     ,MAP_SIZE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @LOT_NO ");
                sb.AppendLine("     ,@LOT_SUB ");
                sb.AppendLine("     ,@F_STEP ");
                sb.AppendLine("     ,@F_CHK_DATE ");
                sb.AppendLine("     ,@ITEM_CD ");
                sb.AppendLine("     ,@FLOW_CD ");
                sb.AppendLine("     ,@F_SUB_AMT ");
                sb.AppendLine("     ,@MEASURE_CNT ");
                if (img_size > 0)
                {
                    sb.AppendLine("     ,@MAP ");
                    sb.AppendLine("     ,@MAP_SIZE ");

                }
                else
                {
                    sb.AppendLine("     ,null ");
                    sb.AppendLine("     ,0 ");
                }

                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                {
                    sb.AppendLine("insert into F_FLOW_CHK_RST(");
                    sb.AppendLine("     LOT_NO ");
                    sb.AppendLine("     ,LOT_SUB ");
                    sb.AppendLine("     ,F_STEP ");
                    sb.AppendLine("     ,CHK_CD ");
                    sb.AppendLine("     ,CHK_ORD ");
                    sb.AppendLine("     ,GRADE ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("      @LOT_NO ");
                    sb.AppendLine("     ,@LOT_SUB ");
                    sb.AppendLine("     ,@F_STEP ");
                    sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "'  ");
                    sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_ORD"].Value + "'  ");
                    if (flow_chk_dgv.Rows[i].Cells["GRADE"].Value == null)
                    {
                        flow_chk_dgv.Rows[i].Cells["GRADE"].Value = "";
                    }
                    sb.AppendLine("      , '" + (string)flow_chk_dgv.Rows[i].Cells["GRADE"].Value + "' ");
                    sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");

                    int k = 1;
                    for (int j = startIdx; j < flow_chk_dgv.Columns.Count; j++)
                    {
                        sb.AppendLine("insert into F_FLOW_CHK_DETAIL(");
                        sb.AppendLine("     LOT_NO ");
                        sb.AppendLine("     ,LOT_SUB ");
                        sb.AppendLine("     ,F_STEP ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,CHK_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      @LOT_NO ");
                        sb.AppendLine("     ,@LOT_SUB ");
                        sb.AppendLine("     ,@F_STEP ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "'  ");
                        sb.AppendLine("     , " + k + " "); //flow_chk_dgv.Columns[j].HeaderText.ToString()
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK" + k.ToString()].Value + "'  ");
                        sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");

                        k++;
                    }
                }

                sb.AppendLine(" update F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" set CHECK_YN = 'N' ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@F_CHK_DATE", f_chk_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);
                sCommand.Parameters.AddWithValue("@F_SUB_AMT", txt_sub_amt);
                sCommand.Parameters.AddWithValue("@MEASURE_CNT", txt_measure_cnt);

                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@MAP", img);
                    sCommand.Parameters.AddWithValue("@MAP_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //수입검사 등록 
        public int insertRawChkExam(
              string txt_input_date
            , string txt_input_cd
            , string txt_seq
            , string txt_raw_mat_cd
            , string txt_control_cd
            , string txt_part_no
            , string txt_chk_total_amt
            , string txt_pass_amt
            , string pri_non_pass_amt
            , string upd_com_amt
            , string final_non_pass_amt
            , string final_pass_amt
            , string comment
            , DataGridView rawStanGrid
            , DataGridView rawPoorGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from F_RAW_CHK");
                sb.AppendLine(" where INPUT_DATE = '" + txt_input_date + "'");
                sb.AppendLine("     and INPUT_CD = '" + txt_input_cd + "' ");
                sb.AppendLine("     and SEQ = '" + txt_seq + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }
                string r_chk_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                sb.AppendLine("insert into F_RAW_CHK(");
                sb.AppendLine("     INPUT_DATE ");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,SEQ ");
                sb.AppendLine("     ,RAW_MAT_CD ");
                sb.AppendLine("     ,CHK_DATE ");
                sb.AppendLine("     ,CONTROL_NO ");
                sb.AppendLine("     ,PART_NO ");
                sb.AppendLine("     ,CHK_TOTAL_AMT ");
                sb.AppendLine("     ,PASS_AMT ");
                sb.AppendLine("     ,PRI_NON_PASS_AMT ");
                sb.AppendLine("     ,UPD_COM_AMT ");
                sb.AppendLine("     ,FINAL_NON_PASS_AMT ");
                sb.AppendLine("     ,FINAL_PASS_AMT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @INPUT_DATE ");
                sb.AppendLine("     ,@INPUT_CD ");
                sb.AppendLine("     ,@SEQ ");
                sb.AppendLine("     ,@RAW_MAT_CD ");
                sb.AppendLine("     ,@CHK_DATE ");
                sb.AppendLine("     ,@CONTROL_NO ");
                sb.AppendLine("     ,@PART_NO ");
                sb.AppendLine("     ,@CHK_TOTAL_AMT ");
                sb.AppendLine("     ,@PASS_AMT ");
                sb.AppendLine("     ,@PRI_NON_PASS_AMT ");
                sb.AppendLine("     ,@UPD_COM_AMT ");
                sb.AppendLine("     ,@FINAL_NON_PASS_AMT ");
                sb.AppendLine("     ,@FINAL_PASS_AMT ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                if (rawStanGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < rawStanGrid.Rows.Count; i++)
                    {
                        sb.AppendLine("insert into F_RAW_CHK_RST(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,CHK_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      '" + txt_input_date + "' ");
                        sb.AppendLine("      ," + txt_input_cd + " ");
                        sb.AppendLine("      ," + txt_seq + " ");
                        sb.AppendLine("      ,'" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("      ,'" + rawStanGrid.Rows[i].Cells["CHK_CD"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + rawStanGrid.Rows[i].Cells["CHK_VALUE"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("      ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" )");
                    }
                }

                if (rawPoorGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < rawPoorGrid.Rows.Count; i++)
                    {

                        sb.AppendLine("declare @p_seq" + i + " int ");
                        sb.AppendLine("select @p_seq" + i + " =ISNULL(MAX(POOR_SEQ),0)+1 from F_RAW_CHK_POOR ");
                        sb.AppendLine("where INPUT_DATE = '" + txt_input_date + "' ");
                        sb.AppendLine("     and INPUT_CD = '" + txt_input_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + txt_seq + "' ");

                        sb.AppendLine("insert into F_RAW_CHK_POOR(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,POOR_SEQ ");
                        sb.AppendLine("     ,TYPE_CD ");
                        sb.AppendLine("     ,POOR_NM ");
                        sb.AppendLine("     ,PRI_NON_PASS_AMT ");
                        sb.AppendLine("     ,UPD_DETAIL ");
                        sb.AppendLine("     ,UPD_PASS_AMT ");
                        //sb.AppendLine("     ,COMMENT ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      '" + txt_input_date + "' ");
                        sb.AppendLine("      ," + txt_input_cd + " ");
                        sb.AppendLine("      ," + txt_seq + " ");
                        sb.AppendLine("      ,@p_seq" + i + " ");
                        sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["POOR_NM"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + ((string)rawPoorGrid.Rows[i].Cells["PRI_NON_PASS_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["UPD_DETAIL"].Value.ToString() + "' ");
                        sb.AppendLine("      ,'" + ((string)rawPoorGrid.Rows[i].Cells["UPD_PASS_AMT"].Value).Replace(",", "") + "' ");
                        // sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");

                    }
                }

                sb.AppendLine(" update F_RAW_DETAIL ");
                sb.AppendLine(" set CHECK_YN = 'N' ");
                sb.AppendLine(" where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     and INPUT_CD = @INPUT_CD ");
                sb.AppendLine("     and SEQ = @SEQ ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);
                sCommand.Parameters.AddWithValue("@SEQ", txt_seq);
                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_mat_cd);
                sCommand.Parameters.AddWithValue("@CHK_DATE", r_chk_date);
                sCommand.Parameters.AddWithValue("@CONTROL_NO", txt_control_cd);
                sCommand.Parameters.AddWithValue("@PART_NO", txt_part_no);
                sCommand.Parameters.AddWithValue("@CHK_TOTAL_AMT", txt_chk_total_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PASS_AMT", txt_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PRI_NON_PASS_AMT", pri_non_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@UPD_COM_AMT", upd_com_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@FINAL_NON_PASS_AMT", final_non_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@FINAL_PASS_AMT", final_pass_amt.Replace(",", ""));

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }







        //제품검사 등록 
        public int insertItemChkExam(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , string txt_item_cd
            , string txt_sub_amt
            , string txt_measure_cnt
            , int startIdx
            , Label lblSearch
            , byte[] img
            , int img_size
            , DataGridView flow_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from F_ITEM_CHK");
                sb.AppendLine(" where LOT_NO = '" + txt_lot_no + "'");
                sb.AppendLine("     and LOT_SUB = '" + txt_lot_sub + "' ");
                sb.AppendLine("     and F_STEP = '" + txt_f_step + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }
                string f_chk_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                sb.AppendLine("insert into F_ITEM_CHK(");
                sb.AppendLine("     LOT_NO ");
                sb.AppendLine("     ,LOT_SUB ");
                sb.AppendLine("     ,F_STEP ");
                sb.AppendLine("     ,F_CHK_DATE ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,F_SUB_AMT ");
                sb.AppendLine("     ,MEASURE_CNT ");
                sb.AppendLine("     ,PASS_YN ");
                sb.AppendLine("     ,MAP ");
                sb.AppendLine("     ,MAP_SIZE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @LOT_NO ");
                sb.AppendLine("     ,@LOT_SUB ");
                sb.AppendLine("     ,@F_STEP ");
                sb.AppendLine("     ,@F_CHK_DATE ");
                sb.AppendLine("     ,@ITEM_CD ");
                sb.AppendLine("     ,@F_SUB_AMT ");
                sb.AppendLine("     ,@MEASURE_CNT ");
                sb.AppendLine("     ,'N' ");
                if (img_size > 0)
                {
                    sb.AppendLine("     ,@MAP ");
                    sb.AppendLine("     ,@MAP_SIZE ");

                }
                else
                {
                    sb.AppendLine("     ,null ");
                    sb.AppendLine("     ,0 ");
                }

                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                {
                    sb.AppendLine("insert into F_ITEM_CHK_RST(");
                    sb.AppendLine("     LOT_NO ");
                    sb.AppendLine("     ,LOT_SUB ");
                    sb.AppendLine("     ,F_STEP ");
                    sb.AppendLine("     ,CHK_CD ");
                    sb.AppendLine("     ,CHK_ORD ");
                    sb.AppendLine("     ,GRADE ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("      @LOT_NO ");
                    sb.AppendLine("     ,@LOT_SUB ");
                    sb.AppendLine("     ,@F_STEP ");
                    sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "'  ");
                    sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_ORD"].Value + "'  ");
                    if (flow_chk_dgv.Rows[i].Cells["GRADE"].Value == null)
                    {
                        flow_chk_dgv.Rows[i].Cells["GRADE"].Value = "";
                    }
                    sb.AppendLine("      , '" + (string)flow_chk_dgv.Rows[i].Cells["GRADE"].Value + "' ");
                    sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");

                    int k = 1;
                    for (int j = startIdx; j < flow_chk_dgv.Columns.Count; j++)
                    {
                        sb.AppendLine("insert into F_ITEM_CHK_DETAIL(");
                        sb.AppendLine("     LOT_NO ");
                        sb.AppendLine("     ,LOT_SUB ");
                        sb.AppendLine("     ,F_STEP ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,CHK_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      @LOT_NO ");
                        sb.AppendLine("     ,@LOT_SUB ");
                        sb.AppendLine("     ,@F_STEP ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "'  ");
                        sb.AppendLine("     , " + k + " "); //flow_chk_dgv.Columns[j].HeaderText.ToString()
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK" + k.ToString()].Value + "'  ");
                        sb.AppendLine("      ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");

                        k++;
                    }
                }

                sb.AppendLine(" update F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" set ITEM_CHECK_YN = 'N' ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@F_CHK_DATE", f_chk_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@F_SUB_AMT", txt_sub_amt);
                sCommand.Parameters.AddWithValue("@MEASURE_CNT", txt_measure_cnt);

                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@MAP", img);
                    sCommand.Parameters.AddWithValue("@MAP_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }
        //공정검사 항목 
        public int insertItemChk(
              string txt_item_cd
            , string txt_item_img
            , string txt_measure_cnt
            , conDataGridView item_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_ITEM_CHK");
                sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_ITEM_CHK(");
                sb.AppendLine("     ITEM_CD ");
                sb.AppendLine("     ,MEASURE_CNT ");
                //sb.AppendLine("     ,ITEM_IMG ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @ITEM_CD ");
                sb.AppendLine("     ,@MEASURE_CNT ");
                //sb.AppendLine("     ,@ITEM_IMG ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (item_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_ITEM_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_ITEM_CHK_STAN ");
                        sb.AppendLine("set CHK_LOC = '" + (string)item_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("   ,EVA_GUBUN = '" + (string)item_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("   ,RULE_SIZE = '" + (string)item_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("   ,RULE_LIMIT = '" + (string)item_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("   ,MEASURE_APP = '" + (string)item_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("   ,CHK_INTERVAL = '" + (string)item_chk_dgv.Rows[i].Cells["CHK_INTERVAL"].Value + "' ");
                        sb.AppendLine("   ,LOWER_SIZE = " + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SIZE = " + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,LOWER_SELF = " + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SELF = " + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_ITEM_CHK_STAN(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,EVA_GUBUN ");
                        sb.AppendLine("     ,CHK_LOC ");
                        sb.AppendLine("     ,RULE_SIZE ");
                        sb.AppendLine("     ,RULE_LIMIT ");
                        sb.AppendLine("     ,MEASURE_APP ");
                        sb.AppendLine("     ,CHK_INTERVAL ");
                        sb.AppendLine("     ,LOWER_SIZE ");
                        sb.AppendLine("     ,UPPER_SIZE ");
                        sb.AppendLine("     ,LOWER_SELF ");
                        sb.AppendLine("     ,UPPER_SELF ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (string)item_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_INTERVAL"].Value + "' ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@MEASURE_CNT", txt_measure_cnt);
                //sCommand.Parameters.AddWithValue("@ITEM_IMG", txt_item_img);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        #region 검사항목 마스터 코드
        public int insertChk(
              string txt_chk_cd
            , string chk_gbn
            , string txt_chk_nm
            , string txt_chk_ord
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_CHK_CODE");
                sb.AppendLine(" where CHK_CD = '" + txt_chk_cd + "'");
                sb.AppendLine(" and CHK_GUBUN = '" + chk_gbn + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_CHK_CODE(");
                sb.AppendLine("      CHK_CD ");
                sb.AppendLine("     ,CHK_GUBUN ");
                sb.AppendLine("     ,CHK_ORD ");
                sb.AppendLine("     ,CHK_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @CHK_CD ");
                sb.AppendLine("     ,@CHK_GUBUN ");
                sb.AppendLine("     ,@CHK_ORD ");
                sb.AppendLine("     ,@CHK_NM ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CHK_CD", txt_chk_cd);
                sCommand.Parameters.AddWithValue("@CHK_GUBUN", chk_gbn);
                sCommand.Parameters.AddWithValue("@CHK_ORD", txt_chk_ord);
                sCommand.Parameters.AddWithValue("@CHK_NM", txt_chk_nm);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }
        #endregion 검사항목 마스터 코드

        public int insertPlan(
              string plan_date
            , string txt_cust_cd
            , string deliver_req_date
            , string order_yn
            , string txt_plan_num
            , string comment
            , conDataGridView p_item_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(PLAN_CD),0)+1 from F_PLAN ");
                sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");

                sb.AppendLine("insert into F_PLAN(");
                sb.AppendLine("     PLAN_DATE");
                sb.AppendLine("     ,PLAN_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,DELIVER_REQ_DATE ");
                sb.AppendLine("     ,STAFF_CD");
                sb.AppendLine("     ,ORDER_YN");
                sb.AppendLine("     ,WORK_YN");
                sb.AppendLine("     ,PLAN_NUM");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + plan_date + "' ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,'" + txt_cust_cd + "' ");
                sb.AppendLine("     ,'" + deliver_req_date + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + order_yn + "' ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + txt_plan_num + "'+RIGHT('000'+ convert(varchar, @seq), 4) "); //yyMMdd000n
                sb.AppendLine("     ,'" + comment + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (p_item_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < p_item_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @item_seq" + i + " int ");
                        sb.AppendLine("select @item_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_PLAN_DETAIL ");
                        sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");
                        sb.AppendLine("and PLAN_CD =  @seq ");

                        sb.AppendLine("insert into F_PLAN_DETAIL(");
                        sb.AppendLine("     PLAN_DATE ");
                        sb.AppendLine("     ,PLAN_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_ITEM_GUBUN ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,WORK_YN ");
                        sb.AppendLine("     ,F_LEVEL ");
                        sb.AppendLine("     ,DEFAULT_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + plan_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@item_seq" + i + " ");
                        sb.AppendLine("     ,'" + (p_item_dgv.Rows[i].Cells["RAW_ITEM_GUBUN"].Value.ToString().Equals("상품") ? "1" : "2") + "' ");
                        sb.AppendLine("     ,'" + p_item_dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + p_item_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,'N' ");
                        sb.AppendLine("      , 1 ");
                        sb.AppendLine("      , 1  ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@PLAN_DATE", plan_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@DELIVER_REQ_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@ORDER_YN", order_yn);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                if (wAdo.SqlCommandEtc(sCommand, "insert_PLAN_TB") > 0)
                {
                    return 0;
                }
                else
                {

                    return 1;
                }
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        #region 지육 관련

        //지육 입고 테이블 출력
        public DataTable fn_Meat_Input_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select INPUT_DATE");
            sb.AppendLine("     ,INPUT_CD ");
            sb.AppendLine("     ,CUST_CD ");
            sb.AppendLine("     ,RAW_MAT_NM ");
            sb.AppendLine("     ,RAW_MAT_AMOUNT ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine("     ,INPUT_PRICE ");
            sb.AppendLine("     ,(select CUST_NM from N_CUST_CODE where CUST_GUBUN = '2' and CUST_CD = A.CUST_CD) as CUST_NM  ");
            sb.AppendLine("     ,RAW_MAT_WEIGHT ");
            sb.AppendLine("     ,OUTPUT_YN ");
            sb.AppendLine("     ,MF_DATE ");
            sb.AppendLine("     ,COUNTRY_ORIGIN ");
            sb.AppendLine("     ,(select FROZEN_NM from N_FROZEN_CODE where FROZEN_CD = A.FROZEN_GUBUN) as FROZEN_GUBUN ");
            sb.AppendLine("     ,EXPRT_DATE ");
            sb.AppendLine("     ,(select GRADE_NM from N_GRADE_CODE where GRADE_CD = A.GRADE) as GRADE ");
            sb.AppendLine("     ,UNION_CD ");
            sb.AppendLine("     ,SLAUHOUSE_CD ");
            sb.AppendLine("     ,(SELECT SLAUHOUSE_NM FROM N_SLAUHOUSE_CODE WHERE SLAUHOUSE_CD = A.SLAUHOUSE_CD) AS SLAUHOUSE_NM ");
            sb.AppendLine(" from F_RAW_MEAT_INPUT A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by INPUT_DATE desc, INPUT_CD desc ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Meat_Detail_List(string condition)
        {
            //2019-10-31 이재원 컬럼 명칭을 수정하였음
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.GRADE");
            sb.AppendLine("     ,A.SEQ");
            sb.AppendLine("     ,A.INPUT_PRICE ");
            sb.AppendLine("     ,A.RAW_MAT_WEIGHT ");
            sb.AppendLine("     ,A.OUTPUT_YN ");
            sb.AppendLine("     ,A.UNION_CD ");
            sb.AppendLine(" from F_RAW_MEAT_DETAIL A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SEQ ");



            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public int insertMeatOutCome(
            string txt_source_cd
           , conDataGridView comp_dgv
          )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_RAW_MEAT_SOURCE");
                sb.AppendLine(" where RAW_SOURCE_CD = '" + txt_source_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                sb = new StringBuilder();

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    sb.AppendLine("delete from N_RAW_MEAT_SOURCE    ");
                    sb.AppendLine("  where RAW_SOURCE_CD = '" + txt_source_cd + "' ");

                }




                if (comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < comp_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_RAW_MEAT_SOURCE ");
                        sb.AppendLine("where RAW_SOURCE_CD = '" + txt_source_cd + "' ");

                        sb.AppendLine("insert into N_RAW_MEAT_SOURCE(");
                        sb.AppendLine("     RAW_SOURCE_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,RAW_MAT_NM ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_source_cd + "' ");
                        sb.AppendLine("     ,@seq" + i + " ");
                        sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)comp_dgv.Rows[i].Cells["RAW_MAT_NM"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("  )");
                    }
                }



                sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_MEAT_SOURCE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insert_Meat_Input(
              string meat_cd
            , string meat_nm
            , string meat_amount
            , string meat_weight
            , string meat_price
            , string input_date
            , string comment
            , string cust_cd
            , string complete_yn
            , string mf_date
            , string unioin_cd
            , string grade_gubun
            , string frozen_gubun
            , string saluhouse_cd
            , DataGridView sourceRawGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_MEAT_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                Console.WriteLine(sb.ToString());

                sb.AppendLine("insert into F_RAW_MEAT_INPUT(");
                sb.AppendLine("     INPUT_DATE");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,RAW_MAT_CD ");
                sb.AppendLine("     ,RAW_MAT_NM");
                sb.AppendLine("     ,INPUT_PRICE");
                sb.AppendLine("     ,RAW_MAT_AMOUNT");
                sb.AppendLine("     ,RAW_MAT_WEIGHT ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,OUTPUT_YN ");
                sb.AppendLine("     ,MF_DATE ");
                sb.AppendLine("     ,EXPRT_DATE ");
                sb.AppendLine("     ,SLAUHOUSE_CD ");
                sb.AppendLine("     ,FROZEN_GUBUN ");
                sb.AppendLine("     ,UNION_CD ");
                sb.AppendLine("     ,GRADE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @INPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@RAW_MAT_CD ");
                sb.AppendLine("     ,@RAW_MAT_NM ");
                sb.AppendLine("     ,@INPUT_PRICE ");
                sb.AppendLine("     ,@RAW_MAT_AMOUNT ");
                sb.AppendLine("     ,@RAW_MAT_WEIGHT ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@OUTPUT_YN ");
                sb.AppendLine("     ,@MF_DATE ");
                sb.AppendLine("     ,REPLACE(CONVERT(NVARCHAR(10),DATEADD(DAY, ");
                sb.AppendLine("     (select EXPRT_COUNT from N_FROZEN_CODE where FROZEN_CD = @FROZEN_GUBUN ) ");
                sb.AppendLine("     ,@MF_DATE),120),'/','-') ");
                sb.AppendLine("     ,@SLAUHOUSE_CD ");
                sb.AppendLine("     ,@FROZEN_GUBUN ");
                sb.AppendLine("     ,@UNION_CD ");
                sb.AppendLine("     ,@GRADE ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", cust_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", meat_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_NM", meat_nm);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", meat_price);
                sCommand.Parameters.AddWithValue("@RAW_MAT_AMOUNT", meat_amount);
                sCommand.Parameters.AddWithValue("@RAW_MAT_WEIGHT", meat_weight);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@OUTPUT_YN", complete_yn);
                sCommand.Parameters.AddWithValue("@MF_DATE", mf_date);
                sCommand.Parameters.AddWithValue("@SLAUHOUSE_CD", saluhouse_cd);
                sCommand.Parameters.AddWithValue("@FROZEN_GUBUN", frozen_gubun);
                sCommand.Parameters.AddWithValue("@UNION_CD", unioin_cd);
                sCommand.Parameters.AddWithValue("@GRADE", grade_gubun);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_meat_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }


        public int Update_Meat_Input(
             string meat_cd
            , string meat_nm
            , string meat_amount
            , string meat_weight
            , string meat_price
            , string input_date
            , string input_cd
            , string comment
            , string cust_cd
            , string complete_yn
            , string mf_date
            , string unioin_cd
            , string grade_gubun
            , string frozen_gubun
            , string slauhouse_cd
            , DataGridView sourceRawGrid
            )
        {
            try
            {

                //2019-10-31 이재원 도입기업의 요구에 따라 테이블 구조를 수정하였음
                // 그에 따른 로직 변경

                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("Update F_RAW_MEAT_INPUT SET ");
                sb.AppendLine("     CUST_CD =  @CUST_CD   ");
                sb.AppendLine("     ,INPUT_PRICE = @INPUT_PRICE   ");
                sb.AppendLine("     ,RAW_MAT_CD = @RAW_MAT_CD   ");
                sb.AppendLine("     ,RAW_MAT_NM = @RAW_MAT_NM   ");
                sb.AppendLine("     ,RAW_MAT_AMOUNT = @RAW_MAT_AMOUNT   ");
                sb.AppendLine("     ,RAW_MAT_WEIGHT = @RAW_MAT_WEIGHT   ");
                sb.AppendLine("     ,COMMENT = @COMMENT   ");
                sb.AppendLine("     ,MF_DATE = @MF_DATE   ");
                sb.AppendLine("     ,SLAUHOUSE_CD = @SLAUHOUSE_CD   ");
                sb.AppendLine("     ,FROZEN_GUBUN = @FROZEN_GUBUN   ");
                sb.AppendLine("     ,UNION_CD = @UNION_CD   ");
                sb.AppendLine("     ,GRADE = @GRADE   ");
                sb.AppendLine("     ,OUTPUT_YN  =  @OUTPUT_YN");
                sb.AppendLine("     ,EXPRT_DATE  =  REPLACE(CONVERT(NVARCHAR(10),DATEADD(DAY, (select EXPRT_COUNT from N_FROZEN_CODE where FROZEN_CD = @FROZEN_GUBUN ) ,@MF_DATE),120),'/','-')");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120)  ");
                sb.AppendLine("     WHERE INPUT_DATE = '" + input_date + "'    ");
                sb.AppendLine("     and INPUT_CD = '" + input_cd + "'   ");




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", input_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", cust_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", meat_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_NM", meat_nm);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", meat_price);
                sCommand.Parameters.AddWithValue("@RAW_MAT_AMOUNT", meat_amount);
                sCommand.Parameters.AddWithValue("@RAW_MAT_WEIGHT", meat_weight);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@OUTPUT_YN", complete_yn);
                sCommand.Parameters.AddWithValue("@MF_DATE", mf_date);
                sCommand.Parameters.AddWithValue("@SLAUHOUSE_CD", slauhouse_cd);
                sCommand.Parameters.AddWithValue("@FROZEN_GUBUN", frozen_gubun);
                sCommand.Parameters.AddWithValue("@UNION_CD", unioin_cd);
                sCommand.Parameters.AddWithValue("@GRADE", grade_gubun);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_meat_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int Delete_Meat_Input(
            string input_date
            , string input_cd
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM F_RAW_MEAT_INPUT  ");
                sb.AppendLine("WHERE INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("AND INPUT_CD = @INPUT_CD");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", input_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_meat_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }
        #endregion


        #region 발주서
        public int insertOrder(
          string order_date
        , string txt_cust_cd
        , string in_req_date
        , string pur_yn
        , string comment
        , conDataGridView o_rm_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(ORDER_CD),0)+1 from F_ORDER ");
                sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");

                sb.AppendLine("insert into F_ORDER(");
                sb.AppendLine("     ORDER_DATE");
                sb.AppendLine("     ,ORDER_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,INPUT_REQ_DATE ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @ORDER_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@INPUT_REQ_DATE ");
                sb.AppendLine("     ,'" + pur_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (o_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < o_rm_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @order_seq" + i + " int ");
                        sb.AppendLine("select @order_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ORDER_DETAIL ");
                        sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");
                        sb.AppendLine("and ORDER_CD =  @seq ");

                        sb.AppendLine("insert into F_ORDER_DETAIL(");
                        sb.AppendLine("     ORDER_DATE ");
                        sb.AppendLine("     ,ORDER_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ,TOTAL_BOX_AMT ");
                        sb.AppendLine("     ,BOX_AMT ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + order_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@order_seq" + i + " ");
                        sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_BOX_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["BOX_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("  )");
                    }
                }
                //Common.p_strStaffNo 

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ORDER_DATE", order_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INPUT_REQ_DATE", in_req_date);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ORDER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }
        #endregion 발주서

        #region 원자재입고등록
        //2019-11-21 이재원 원자재 입고등록에 냉동냉장 구분값 추가
        public int insertRmInput(
          string input_date
        , string txt_cust_cd
        , string input_yn
        , string comment
        , string cmb_frozen_gubun
        , string cmb_stor
        , string cmb_loc
        , string txt_slauhouse_cd
        , string txt_all_supply_money
        , string txt_all_tax_money
        , string txt_all_total_money
        , string txt_tax_cd
        , conDataGridView in_rm_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb;
                SqlCommand sCommand;


                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_RAW_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                sb.AppendLine("declare @Bseq int ");
                sb.AppendLine("select @Bseq =ISNULL(MAX(BUY_CD),0)+1 from F_BUY ");
                sb.AppendLine("where BUY_DATE = '" + input_date + "' ");

                sb.AppendLine("insert into F_RAW_INPUT(");
                sb.AppendLine("     INPUT_DATE");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                //2019-11-29 이재원 도축장 추가
                sb.AppendLine("     ,SLAUHOUSE_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,LOC_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");

                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @INPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@SLAUHOUSE_CD ");
                sb.AppendLine("     ,@STORAGE_CD ");
                sb.AppendLine("     ,@LOC_CD ");
                sb.AppendLine("     ,'" + input_yn + "' ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                sb.AppendLine("insert into F_BUY (");
                sb.AppendLine(" BUY_DATE  ");
                sb.AppendLine(" ,BUY_CD  ");
                sb.AppendLine(" ,BUY_GUBUN  ");
                sb.AppendLine(" ,CUST_CD  ");
                sb.AppendLine(" ,INPUT_DATE  ");
                sb.AppendLine(" ,INPUT_CD  ");
                sb.AppendLine(" ,ALL_TOTAL_MONEY  ");
                sb.AppendLine(" ,ALL_SUPPLY_MONEY  ");
                sb.AppendLine(" ,ALL_TAX_MONEY  ");
                sb.AppendLine(" ,INSTAFF  ");
                sb.AppendLine(" ,INTIME  ");
                sb.AppendLine(" ,TAX_CD  ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine(" @INPUT_DATE ");
                sb.AppendLine(" ,@Bseq ");
                sb.AppendLine(" ,'1' ");
                sb.AppendLine(" ,@CUST_CD ");
                sb.AppendLine(" ,@INPUT_DATE ");
                sb.AppendLine(" ,@seq ");
                sb.AppendLine(" ," + txt_all_total_money.Replace(",", "") + " ");
                sb.AppendLine(" ," + txt_all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ," + txt_all_tax_money.Replace(",", "") + " ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ,'" + txt_tax_cd + "' ");
                sb.AppendLine(" ) ");

                bool isCustDay = isCustDayTotal(input_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(input_date, txt_cust_cd));
                }

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" P_SUPPLY_MONEY = P_SUPPLY_MONEY + " + txt_all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,P_TAX_MONEY = P_TAX_MONEY + " + txt_all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,P_TOTAL_MONEY = P_TOTAL_MONEY + " + txt_all_total_money.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(input_date, txt_cust_cd));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    input_date
                    , txt_cust_cd
                    , txt_all_total_money.Replace(",", "")
                    , "-"));


                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE - " + txt_all_total_money.Replace(",", "") + " ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");



                if (in_rm_dgv.Rows.Count > 0)
                {
                    string storageTemp_1f = "";
                    string storageTemp_2f = "";
                    string storage_cd = "";
                    string loc_cd = "";
                    string frozen_cd = "";

                    for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                    {
                        if (in_rm_dgv.Rows[i].Cells["RAW_MAT_GUBUN"].Value.ToString().Equals("1"))
                        {
                            storageTemp_1f = ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "");
                            storageTemp_2f = "0";
                            if (in_rm_dgv.Rows[i].Cells["STORE_GUBUN"].Value == null ||
                                in_rm_dgv.Rows[i].Cells["STORE_GUBUN"].Value.ToString().Equals("") ||
                                in_rm_dgv.Rows[i].Cells["LOC_GUBUN"].Value == null ||
                                in_rm_dgv.Rows[i].Cells["LOC_GUBUN"].Value.ToString().Equals(""))
                            {
                                return 4;
                            }
                            if (txt_slauhouse_cd == null || txt_slauhouse_cd.Equals(""))
                            {
                                return 5;
                            }
                            storage_cd = in_rm_dgv.Rows[i].Cells["STORE_GUBUN"].Value.ToString();
                            loc_cd = in_rm_dgv.Rows[i].Cells["LOC_GUBUN"].Value.ToString();
                            frozen_cd = in_rm_dgv.Rows[i].Cells["FROZEN_GUBUN"].Value.ToString();
                        }
                        else
                        {
                            storageTemp_1f = "0";
                            storageTemp_2f = ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "");
                            storage_cd = in_rm_dgv.Rows[i].Cells["STORE_GUBUN"].Value.ToString();
                            loc_cd = in_rm_dgv.Rows[i].Cells["LOC_GUBUN"].Value.ToString();
                            frozen_cd = "";
                        }

                        sb.AppendLine("declare @input_seq" + i + " int, @chk_gbn" + i + "  nvarchar(1), @chk_yn" + i + " nvarchar(1), @final_amt" + i + " nvarchar(20) ");
                        sb.AppendLine("select @input_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                        sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("and INPUT_CD =  @seq ");

                        sb.AppendLine("select @chk_gbn" + i + " = check_gubun from N_RAW_CODE ");
                        sb.AppendLine("where RAW_MAT_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");

                        sb.AppendLine("IF @chk_gbn" + i + " = '1' BEGIN set @chk_yn" + i + " = 'S' set @final_amt" + i + " = '0' END "); //원자재 검사여부가 검사일 경우 'S' 대기 
                        sb.AppendLine("ELSE BEGIN set @chk_yn" + i + " = 'O' set @final_amt" + i + " = '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' END "); //원자재 검사여부가 생략일 경우 'O'

                        sb.AppendLine("insert into F_RAW_DETAIL(");
                        sb.AppendLine("     INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,TEMP_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,CURR_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,HEAT_NO ");
                        sb.AppendLine("     ,HEAT_TIME ");
                        sb.AppendLine("     ,ORDER_DATE ");
                        sb.AppendLine("     ,ORDER_CD ");
                        sb.AppendLine("     ,ORDER_SEQ ");
                        sb.AppendLine("     ,COMPLETE_YN ");
                        sb.AppendLine("     ,CHECK_YN ");
                        sb.AppendLine("     ,MF_DATE ");
                        sb.AppendLine("     ,EXPRT_DATE ");
                        sb.AppendLine("     ,FROZEN_GUBUN ");
                        sb.AppendLine("     ,UNION_CD ");
                        sb.AppendLine("     ,CHUGJONG_CD ");
                        sb.AppendLine("     ,CLASS_CD ");
                        sb.AppendLine("     ,GRADE_CD ");
                        sb.AppendLine("     ,COUNTRY_CD ");
                        sb.AppendLine("     ,TYPE_CD ");
                        sb.AppendLine("     ,STORE_1F ");
                        sb.AppendLine("     ,STORE_1NF ");
                        sb.AppendLine("     ,STORE_2F ");
                        sb.AppendLine("     ,REMAIN_AMT ");
                        sb.AppendLine("     ,STORE_UF ");
                        sb.AppendLine("     ,STORAGE_CD ");
                        sb.AppendLine("     ,LOC_CD ");
                        sb.AppendLine("     ,SLAUHOUSE_CD ");
                        sb.AppendLine("     ,INPUT_GUBUN ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + input_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@input_seq" + i + " ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' "); //가입고
                        sb.AppendLine("     ,@final_amt" + i + " "); //최종입고
                        sb.AppendLine("     ,@final_amt" + i + " "); //현재입고
                        sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["HEAT_NO"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["HEAT_TIME"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");
                        sb.AppendLine("     ,'N' ");
                        sb.AppendLine("     , @chk_yn" + i + "  "); //BE
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["MF_DATE"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["EXPRT_DATE"].Value + "' ");
                        sb.AppendLine("     ,'" + frozen_cd + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["UNION_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["CHUGJONG_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["CLASS_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["GRADE_NM"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["COUNTRY_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["TYPE_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (frozen_cd.Equals("F") ? storageTemp_1f : "0") + "' ");
                        sb.AppendLine("     ,'" + (frozen_cd.Equals("NF") ? storageTemp_1f : "0") + "' ");
                        sb.AppendLine("     ,'" + storageTemp_2f + "' ");
                        sb.AppendLine("     , 0  ");
                        sb.AppendLine("     , 0  ");
                        sb.AppendLine("     ,'" + storage_cd + "' ");
                        sb.AppendLine("     ,'" + loc_cd + "' ");
                        sb.AppendLine("     ,'" + txt_slauhouse_cd + "' ");
                        sb.AppendLine("     ,'1' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("  )");


                        sb.AppendLine("declare @input_seqB" + i + " int  ");
                        sb.AppendLine("select @input_seqB" + i + " =ISNULL(MAX(BUY_SEQ),0)+1 from F_BUY_DETAIL ");
                        sb.AppendLine("where BUY_DATE = '" + input_date + "' ");
                        sb.AppendLine("and BUY_CD =  @Bseq ");

                        sb.AppendLine("insert into F_BUY_DETAIL (");
                        sb.AppendLine("     BUY_DATE ");
                        sb.AppendLine("     ,BUY_CD ");
                        sb.AppendLine("     ,BUY_SEQ ");
                        sb.AppendLine("     ,INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,INPUT_SEQ ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,VAT_CD ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + input_date + "' ");
                        sb.AppendLine("      ,@Bseq ");
                        sb.AppendLine("     ,@input_seqB" + i + " ");
                        sb.AppendLine("     ,'" + input_date + "' ");
                        sb.AppendLine("     ,@seq ");
                        sb.AppendLine("     ,@input_seq" + i + " ");
                        sb.AppendLine("     ," + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["VAT_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("  )");



                        //sb.AppendLine(" update N_RAW_CODE set ");
                        //sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ") );
                        //sb.AppendLine(" where RAW_MAT_CD = '" +in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@SLAUHOUSE_CD", txt_slauhouse_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);
                sCommand.Parameters.AddWithValue("@LOC_CD", cmb_loc);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_RAW_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        #endregion 원자재입고등록


        #region 소요산출량 발주서 일괄 등록

        public int insertSoyo(
              DataGridView dgv
            , DataGridView chk_dgv
            , int cust_max_num)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //2019-07-29 유정훈
                //거래처를 GROUP으로 나눠 번호 순을 매김..  

                for (int i = 1; i <= cust_max_num; i++)
                {
                    string cust_cd = "";
                    for (int j = 0; j < dgv.Rows.Count; j++)
                    {
                        if (int.Parse(dgv.Rows[j].Cells["CUST_NUM"].Value.ToString()) == i)
                        {
                            cust_cd = dgv.Rows[j].Cells["PUR_CUST_CD"].Value.ToString(); //거래처 번호가 맞으면 cust_cd를 변수에 저장
                            break;
                        }
                    }

                    string order_date = DateTime.Now.ToString("yyyy-MM-dd");
                    sb.AppendLine("declare @seq" + i + " int ");
                    sb.AppendLine("select  @seq" + i + " =ISNULL(MAX(ORDER_CD),0)+1 from F_ORDER ");
                    sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");

                    sb.AppendLine("insert into F_ORDER(");
                    sb.AppendLine("     ORDER_DATE");
                    sb.AppendLine("     ,ORDER_CD ");
                    sb.AppendLine("     ,CUST_CD ");
                    sb.AppendLine("     ,INPUT_REQ_DATE ");
                    sb.AppendLine("     ,COMPLETE_YN ");
                    sb.AppendLine("     ,STAFF_CD ");
                    sb.AppendLine("     ,COMMENT ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("      '" + order_date + "' ");
                    sb.AppendLine("     ,@seq" + i + " ");
                    sb.AppendLine("     ,'" + cust_cd + "' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 23) ");
                    sb.AppendLine("     ,'N' ");
                    sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,'' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");

                    for (int j = 0; j < dgv.Rows.Count; j++)
                    {
                        string rs_amt = ((string)dgv.Rows[j].Cells["RS_AMT"].Value).Replace(",", "");
                        double d_rs_amt = double.Parse(rs_amt);
                        if (cust_cd.ToString().Equals(dgv.Rows[j].Cells["PUR_CUST_CD"].Value.ToString()) && d_rs_amt >= 0)
                        {
                            sb.AppendLine("declare @order_seq" + j + " int ");
                            sb.AppendLine("select @order_seq" + j + " =ISNULL(MAX(SEQ),0)+1 from F_ORDER_DETAIL ");
                            sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");
                            sb.AppendLine("and ORDER_CD =  @seq" + i + " ");

                            sb.AppendLine("insert into F_ORDER_DETAIL(");
                            sb.AppendLine("     ORDER_DATE ");
                            sb.AppendLine("     ,ORDER_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + order_date + "' ");
                            sb.AppendLine("      ,@seq" + i + " ");
                            sb.AppendLine("     ,@order_seq" + j + " ");
                            sb.AppendLine("     ,'" + dgv.Rows[j].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + dgv.Rows[j].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)dgv.Rows[j].Cells["RS_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)dgv.Rows[j].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)dgv.Rows[j].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("  )");
                        }
                    }
                }

                for (int i = 0; i < chk_dgv.Rows.Count; i++)
                {
                    sb.AppendLine("update F_PLAN set");
                    sb.AppendLine("      ORDER_YN = 'Y'");
                    sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                    sb.AppendLine(" where PLAN_DATE = '" + chk_dgv.Rows[i].Cells["PLAN_DATE"].Value + "'  and PLAN_CD= '" + chk_dgv.Rows[i].Cells["PLAN_CD"].Value + "' ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_SOYO_ORDER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        #endregion 소요산출량 발주서 일괄 등록

        #region 작업지시서 등록

        public int insertWork(
              string work_date
            , string txt_work_cd
            , string txt_lot_no
            , string txt_item_cd
            , string txt_cust_cd
            , string txt_inst_amt
            , string deliver_req_date
            , string cmb_line
            , string cmb_worker
            , string txt_plan_num
            , string txt_plan_item
            , string txt_inst_notice
            , string txt_char_amt
            , string txt_pack_amt
            , conDataGridView w_rm_dgv
            , DataGridView w_half_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(RIGHT(LOT_NO,4)),0)+1 from F_WORK_INST "); //0001 이면 1+1 = 2로 SEQ에 저장
                sb.AppendLine("where W_INST_DATE LIKE '" + work_date.Substring(0, 7).ToString() + "%'"); //2019-05

                sb.AppendLine("declare @seq1 int ");
                sb.AppendLine("select @seq1 =ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                sb.AppendLine("where W_INST_DATE = '" + work_date + "' "); //일별 체크 

                sb.AppendLine("insert into F_WORK_INST(");
                sb.AppendLine("     W_INST_DATE");
                sb.AppendLine("     ,W_INST_CD ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,ITEM_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,INST_AMT ");
                sb.AppendLine("     ,DELIVERY_DATE ");
                sb.AppendLine("     ,LINE_CD ");
                sb.AppendLine("     ,WORKER_CD");
                sb.AppendLine("     ,PLAN_NUM");
                sb.AppendLine("     ,PLAN_ITEM");
                sb.AppendLine("     ,CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,RAW_OUT_YN ");
                sb.AppendLine("     ,INST_NOTICE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @W_INST_DATE ");
                sb.AppendLine("     ,@seq1");
                sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) "); //yyMMdd000n
                sb.AppendLine("     ,@ITEM_CD ");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@INST_AMT ");
                sb.AppendLine("     ,@DELIVERY_DATE ");
                sb.AppendLine("     ,@LINE_CD ");
                sb.AppendLine("     ,@WORKER_CD ");
                sb.AppendLine("     ,@PLAN_NUM ");
                sb.AppendLine("     ,@PLAN_ITEM ");
                sb.AppendLine("     ,@CHARGE_AMT ");
                sb.AppendLine("     ,@PACK_AMT ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,@INST_NOTICE ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (w_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_rm_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @work_seq" + i + " int ");
                        sb.AppendLine("select @work_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("and W_INST_CD =  @seq1 ");

                        sb.AppendLine("insert into F_WORK_INST_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + work_date + "' ");
                        sb.AppendLine("      ,@seq1 ");
                        sb.AppendLine("     ,@work_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }

                if (w_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @half_seq" + i + " int ");
                        sb.AppendLine("select @half_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_HALF_DETAIL ");
                        sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("and W_INST_CD =  @seq1 ");

                        sb.AppendLine("insert into F_WORK_INST_HALF_DETAIL(");
                        sb.AppendLine("     W_INST_DATE ");
                        sb.AppendLine("     ,W_INST_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,HALF_ITEM_CD ");
                        sb.AppendLine("     ,SOYO_AMT ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INSTAFF");
                        sb.AppendLine("     ,INTIME");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + work_date + "' ");
                        sb.AppendLine("      ,@seq1 ");
                        sb.AppendLine("     ,@half_seq" + i + " ");
                        sb.AppendLine("     ,'" + txt_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)w_half_dgv.Rows[i].Cells["H_TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                        sb.AppendLine("  )");
                    }
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", work_date);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INST_AMT", txt_inst_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@DELIVERY_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@WORKER_CD", cmb_worker);
                sCommand.Parameters.AddWithValue("@PLAN_NUM", txt_plan_num);
                sCommand.Parameters.AddWithValue("@PLAN_ITEM", txt_plan_item);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@INST_NOTICE", txt_inst_notice);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        #endregion 작업지시서 등록


        #region 작업공정 등록
        public int insert_Work_Flow(
              string txt_lot_no
            , string txt_item_cd
            , conDataGridView[] dgv
            , Label[] lbl_flow_cd
            , Label[] lbl_flow_seq
            , Label[] lbl_item_iden
            , int flow_cnt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                //sb.AppendLine("declare @seq int ");
                //sb.AppendLine("select @seq =ISNULL(MAX(FLOW_CD),0)+1 from F_FLOW ");
                //sb.AppendLine("where FLOW_DATE = '" + flow_date + "' ");

                sb.AppendLine("insert into F_WORK_FLOW(");
                //sb.AppendLine("     ,FLOW_CD ");
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("     ,FLOW_DATE");
                sb.AppendLine("     ,ITEM_CD");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                //sb.AppendLine("     ,@seq");
                sb.AppendLine("      @LOT_NO");
                sb.AppendLine("      ,@FLOW_DATE ");
                sb.AppendLine("      ,@ITEM_CD ");
                sb.AppendLine("     ,'N'");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < flow_cnt; i++) //제품 공정 마지막 단계까지 ..  
                {
                    if (dgv[i].Rows.Count > 0)
                    {
                        for (int j = 0; j < dgv[i].Rows.Count; j++)
                        {
                            sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                            sb.AppendLine("      LOT_NO ");
                            sb.AppendLine("      ,LOT_SUB ");
                            sb.AppendLine("      ,F_STEP ");
                            sb.AppendLine("      ,FLOW_CD ");
                            sb.AppendLine("      ,SEQ ");
                            sb.AppendLine("      ,F_SUB_DATE ");
                            sb.AppendLine("      ,F_SUB_AMT ");
                            sb.AppendLine("      ,LOSS ");
                            sb.AppendLine("      ,POOR_CD ");
                            sb.AppendLine("      ,POOR_AMT ");
                            sb.AppendLine("      ,COMPLETE_YN ");
                            sb.AppendLine("      ,CHECK_YN ");
                            sb.AppendLine("      ,ITEM_CHECK_YN ");
                            sb.AppendLine("      ,INSTAFF ");
                            sb.AppendLine("      ,INTIME ");
                            sb.AppendLine("      ,COMMENT ");
                            sb.AppendLine(" ) values ( ");
                            sb.AppendLine("      '" + (string)dgv[i].Rows[j].Cells[0].Value + "' ");
                            sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[1].Value + "' ");
                            sb.AppendLine("      , '" + (i + 1) + "' ");
                            sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' ");
                            sb.AppendLine("      , '" + lbl_flow_seq[i].Text.ToString() + "' ");
                            sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[2].Value + "' ");
                            sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[3].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "") + "' ");
                            if (dgv[i].Rows[j].Cells[5].Value == null)
                            {
                                dgv[i].Rows[j].Cells[5].Value = "";
                            }
                            sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[5].Value + "' "); //POOR_CD
                            sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", "") + "' "); //POOR_AMT
                            sb.AppendLine("      , 'N' ");
                            sb.AppendLine("      , 'S' "); //S -> 대기 
                            sb.AppendLine("      , 'S' "); //S -> 대기 
                            //sb.AppendLine("      , (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '"+ lbl_flow_cd[i].Text.ToString()+"') ");
                            sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                            sb.AppendLine("      ,'' ");
                            sb.AppendLine("      ) ");
                        }
                    }
                }

                bool chk = false;
                //int input_amt = 0;
                for (int i = 0; i < flow_cnt; i++)
                {
                    if (lbl_item_iden[i].Text.ToString().Equals("Y"))
                    {
                        chk = true;
                        break;
                    }
                }

                if (chk)  //제품식별표가 Y
                {
                    for (int i = 0; i < dgv[flow_cnt - 1].Rows.Count; i++)
                    {
                        string item_date = flow_date;

                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                        sb.AppendLine("where INPUT_DATE = '" + flow_date + "' ");

                        sb.AppendLine("insert into F_ITEM_INPUT(");
                        sb.AppendLine("      INPUT_DATE ");
                        sb.AppendLine("      ,INPUT_CD ");
                        sb.AppendLine("      ,ITEM_CD ");
                        sb.AppendLine("      ,LOT_NO ");
                        sb.AppendLine("      ,LOT_SUB ");
                        sb.AppendLine("      ,F_STEP ");
                        sb.AppendLine("      ,FLOW_CD ");
                        sb.AppendLine("      ,INPUT_AMT ");
                        sb.AppendLine("      ,INSTAFF ");
                        sb.AppendLine("      ,INTIME ");
                        sb.AppendLine("      ,CURR_AMT ");
                        sb.AppendLine("      ,COMPLETE_YN ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("       '" + item_date + "' ");
                        sb.AppendLine("      ,@seq" + i + " ");
                        sb.AppendLine("      ,'" + txt_item_cd + "' ");
                        sb.AppendLine("      ,'" + txt_lot_no + "' ");
                        sb.AppendLine("      , '" + (string)dgv[flow_cnt - 1].Rows[i].Cells[1].Value + "' ");
                        sb.AppendLine("      , '" + (flow_cnt).ToString() + "' "); //f_step
                        sb.AppendLine("      , '" + lbl_flow_cd[flow_cnt - 1].Text.ToString() + "' "); //flow_cd
                        sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                        sb.AppendLine("      , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      , 'N' ");
                        sb.AppendLine("      ) ");
                        //input_amt += int.Parse(((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", ""));
                    }

                    //string item_date = flow_date;

                    //sb.AppendLine("declare @seq int ");
                    //sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                    //sb.AppendLine("where INPUT_DATE = '" + flow_date + "' ");

                    //sb.AppendLine("insert into F_ITEM_INPUT(");
                    //sb.AppendLine("      INPUT_DATE ");
                    //sb.AppendLine("      ,INPUT_CD ");
                    //sb.AppendLine("      ,ITEM_CD ");
                    //sb.AppendLine("      ,LOT_NO ");
                    //sb.AppendLine("      ,INPUT_AMT ");
                    //sb.AppendLine("      ,INSTAFF ");
                    //sb.AppendLine("      ,INTIME ");
                    //sb.AppendLine(" ) values ( ");
                    //sb.AppendLine("       '" + item_date + "' ");
                    //sb.AppendLine("      ,@seq ");
                    //sb.AppendLine("      ,'" + txt_item_cd + "' ");
                    //sb.AppendLine("      ,'" + txt_lot_no + "' ");
                    //sb.AppendLine("      ,'" + input_amt + "' ");
                    //sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                    //sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                    //sb.AppendLine("      ) ");
                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_DATE", flow_date);
                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }

        }
        #endregion 작업공정 등록


        #region 제품출고 등록
        public int insertItemOut(
          string out_date
        , string txt_cust_cd
        , string cmb_stor
        , string self_yn
        , conDataGridView item_out_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                //for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                //{
                //    sb.AppendLine(" select A.ORDER_DATE,A.ORDER_CD,B.SEQ,C.ORDER_AMT, C.INPUT_AMT");
                //    sb.AppendLine(" FROM F_ORDER A ");
                //    sb.AppendLine(" LEFT OUTER JOIN F_ORDER_DETAIL B  ");
                //    sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
                //    sb.AppendLine("     AND A.ORDER_CD = B.ORDER_CD ");
                //    sb.AppendLine(" LEFT OUTER JOIN(	 ");
                //    sb.AppendLine("                     SELECT AA.ORDER_DATE	 ");
                //    sb.AppendLine("                           ,AA.ORDER_CD       ");
                //    sb.AppendLine("                           ,AA.SEQ ");
                //    sb.AppendLine("                           ,FLOOR(ISNULL(AA.TOTAL_AMT,0)) AS ORDER_AMT ");
                //    sb.AppendLine("                           ,ISNULL(SUM(BB.TOTAL_AMT),0) AS INPUT_AMT ");
                //    sb.AppendLine("                           , ISNULL(AA.TOTAL_AMT,0)-ISNULL(SUM(BB.TOTAL_AMT),0) AS NO_INPUT_AMT ");
                //    sb.AppendLine("                     FROM F_ORDER_DETAIL AA ");
                //    sb.AppendLine("                     LEFT OUTER JOIN F_RAW_DETAIL BB ");
                //    sb.AppendLine("                     ON AA.ORDER_DATE = BB.ORDER_DATE ");
                //    sb.AppendLine("                         AND AA.ORDER_CD = BB.ORDER_CD ");
                //    sb.AppendLine("                         AND AA.SEQ = BB.ORDER_SEQ ");
                //    sb.AppendLine("                     GROUP BY AA.ORDER_DATE,AA.ORDER_CD,AA.SEQ,AA.TOTAL_AMT)C ");
                //    sb.AppendLine(" ON A.ORDER_DATE = C.ORDER_DATE  ");
                //    sb.AppendLine("     AND A.ORDER_CD = C.ORDER_CD ");
                //    sb.AppendLine("     AND B.SEQ = C.SEQ  ");
                //    sb.AppendLine(" WHERE A.ORDER_DATE = '" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                //    sb.AppendLine("      AND A.ORDER_CD = '" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                //    sb.AppendLine("      AND B.SEQ = '" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");

                //    sCommand = new SqlCommand(sb.ToString());
                //    if (sCommand.CommandText.Equals(null))
                //    {
                //        wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                //        return 2;
                //    }

                //    DataTable dt = wAdo.SqlCommandSelect(sCommand);

                //    double order_amt = double.Parse(dt.Rows[0]["ORDER_AMT"].ToString());
                //    double input_amt = double.Parse(dt.Rows[0]["INPUT_AMT"].ToString());
                //    double grd_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", ""));
                //    double grd_ord_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["OLD_TOTAL_AMT"].Value)); //백업은 콤마 정의 안함

                //    // 발주수량 - 입고수량 - 입력한 수량 값 = 결과값

                //    double rs_num = order_amt - input_amt - grd_total_amt;
                //    if (rs_num < 0)
                //    {
                //        StringBuilder alert_sb = new StringBuilder();
                //        alert_sb.AppendLine(i + 1 + "번째 줄 원부재료에 포함된 발주번호 \n ");
                //        alert_sb.AppendLine(in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + " [" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "] 의 발주수량보다 더 많게 입력하셨습니다. \n");
                //        alert_sb.AppendLine("그대로 저장하시겠습니까? (저장:예 / 취소:아니오)");

                //        DialogResult msgOk = MessageBox.Show(alert_sb.ToString(), "삭제여부", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                //        if (msgOk == DialogResult.No)
                //        {
                //            return 3;
                //        }
                //    }
                //}

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(OUTPUT_CD),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                sb.AppendLine("insert into F_ITEM_OUT(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,SELF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");

                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @OUTPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@STORAGE_CD ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + self_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @out_seq" + i + " int ");
                        sb.AppendLine("select @out_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("and OUTPUT_CD =  @seq ");

                        sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                        sb.AppendLine("     OUTPUT_DATE ");
                        sb.AppendLine("     ,OUTPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,LOT_SUB ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,OUTPUT_AMT ");
                        sb.AppendLine("     ,PRICE ");
                        sb.AppendLine("     ,TOTAL_MONEY ");
                        sb.AppendLine("     ,INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,CUST_CD ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + out_date + "' ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("     ,@out_seq" + i + " ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                        sb.AppendLine("  )");

                        //sb.AppendLine(" update N_RAW_CODE set ");
                        //sb.AppendLine("     BAL_STOCK = ISNULL(BAL_STOCK,0) +" + double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ") );
                        //sb.AppendLine(" where RAW_MAT_CD = '" +in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_OUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }
        //제품 출하 지시 

        public int insertItemOutInst(
          string out_date
        , string out_cd
        , string out_seq)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();

                sb.AppendLine("insert into F_ITEM_OUT_INST(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,SEQ ");
                sb.AppendLine("     ,OUT_INST_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + out_date + "' ");
                sb.AppendLine("     ,'" + out_cd + "'");
                sb.AppendLine("     ,'" + out_seq + "'");
                sb.AppendLine("     ,'Y' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_OUT_INST_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insertHalfOut(
          string out_date
        , string txt_cust_cd
        , string cmb_stor
        , string self_yn
        , conDataGridView item_out_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(OUTPUT_CD),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                sb.AppendLine("insert into F_ITEM_OUT(");
                sb.AppendLine("     OUTPUT_DATE");
                sb.AppendLine("     ,OUTPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,SELF_YN ");
                sb.AppendLine("     ,STAFF_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");

                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @OUTPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@CUST_CD ");
                sb.AppendLine("     ,@STORAGE_CD ");
                sb.AppendLine("     ,'N' ");
                sb.AppendLine("     ,'" + self_yn + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_HALF_OUT_TB");
                if (qResult > 0)
                {
                    sb = new StringBuilder();
                    sb.AppendLine("declare @OUT_CD int ");
                    sb.AppendLine("select @OUT_CD =ISNULL(MAX(OUTPUT_CD),0) from F_ITEM_OUT ");
                    sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");

                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("DECLARE	@return_value" + i + " int ");
                        sb.AppendLine("EXEC	@return_value" + i + " = [dbo].[SP_HALF_OUT] ");
                        sb.AppendLine("@OUTPUT_DATE = '" + out_date + "',");
                        sb.AppendLine("@OUTPUT_CD = @OUT_CD, ");
                        sb.AppendLine("@LOT_NO = '" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' , ");
                        sb.AppendLine("@LOT_SUB = '" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' , ");
                        sb.AppendLine("@ITEM_CD = '" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' , ");
                        sb.AppendLine("@OUT_AMT = '" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' , ");
                        sb.AppendLine("@STAFF_CD = '" + Common.p_strStaffNo + "'  ");
                        sb.AppendLine("SELECT	'RV' = @return_value" + i + " ");
                    }

                    sCommand = new SqlCommand(sb.ToString());

                    DataTable dt = wAdo.SqlCommandSelect(sCommand);
                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0]["RV"].ToString().Equals("0"))
                        {
                            return 0;
                        }
                        else return 1;
                    }
                    else return 1;
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }
        #endregion 제품출고 등록


        #region 공정이동표 자동 설정
        public int insert_Work_Flow_Move(
              string txt_lot_no
            , string txt_lot_sub
            , int f_step
            , int f_sub_amt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string f_sub_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();
                sb.AppendLine("declare @item_cd nvarchar(20), @flow_cd nvarchar(20) ,@n_step int, @f_sub_amt numeric(18,0)");
                sb.AppendLine("select @item_cd = ITEM_CD ");
                sb.AppendLine("from F_WORK_FLOW ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                int n_step = f_step + 1;
                sb.AppendLine("select @flow_cd =  FLOW_CD, @n_step = SEQ ");
                sb.AppendLine(" from N_ITEM_FLOW ");
                sb.AppendLine("where ITEM_CD =@item_cd  ");
                sb.AppendLine("and SEQ = " + n_step + " "); //다음단계의 공정

                if (f_step > 0)
                {
                    sb.AppendLine("select @f_sub_amt = ISNULL(f_sub_amt,0)  ");
                    sb.AppendLine("from F_WORK_FLOW_DETAIL ");
                    sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' and LOT_SUB = '" + txt_lot_sub + "' and F_STEP = " + f_step + "  "); //공정 이동 전 마지막 단계의 수량 가져오기 
                }
                else
                {
                    sb.AppendLine("select @f_sub_amt = " + f_sub_amt + "  ");
                }

                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("      ,LOT_SUB ");
                sb.AppendLine("      ,F_STEP ");
                sb.AppendLine("      ,FLOW_CD ");
                sb.AppendLine("      ,SEQ ");
                sb.AppendLine("      ,F_SUB_DATE ");
                sb.AppendLine("      ,F_SUB_AMT ");
                sb.AppendLine("      ,LOSS ");
                sb.AppendLine("      ,POOR_CD ");
                sb.AppendLine("      ,POOR_AMT ");
                sb.AppendLine("      ,COMPLETE_YN ");
                sb.AppendLine("      ,CHECK_YN ");
                sb.AppendLine("      ,ITEM_CHECK_YN ");
                sb.AppendLine("      ,INSTAFF ");
                sb.AppendLine("      ,INTIME ");
                sb.AppendLine("      ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + txt_lot_no + "' ");
                sb.AppendLine("      , '" + txt_lot_sub + "' ");
                sb.AppendLine("      , '" + n_step + "' ");
                sb.AppendLine("      , @flow_cd ");
                sb.AppendLine("      , @n_step ");
                sb.AppendLine("      , '" + f_sub_date + "' ");
                sb.AppendLine("      , @f_sub_amt");
                sb.AppendLine("      , '0' ");
                sb.AppendLine("      , '' ");
                sb.AppendLine("      , '0' ");
                sb.AppendLine("      , 'N' ");
                sb.AppendLine("      , 'S' "); //S -> 대기 
                sb.AppendLine("      , 'S' "); //S -> 대기 
                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                sb.AppendLine("      ,'' ");
                sb.AppendLine("      ) ");
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_MOVE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }

        }


        public int insert_Work_Flow_Move_First(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_item_cd
            , int txt_f_sub_amt
            , int f_step)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string f_date = DateTime.Today.ToString("yyyy-MM-dd");
                string f_sub_date = f_date;

                sb.AppendLine("insert into F_WORK_FLOW(");
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("      ,FLOW_DATE ");
                sb.AppendLine("      ,ITEM_CD ");
                sb.AppendLine("      ,COMPLETE_YN ");
                sb.AppendLine("      ,INSTAFF ");
                sb.AppendLine("      ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + txt_lot_no + "' ");
                sb.AppendLine("      , '" + f_date + "' ");
                sb.AppendLine("      , '" + txt_item_cd + "' ");
                sb.AppendLine("      , 'N' ");
                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                int n_step = f_step + 1;
                sb.AppendLine("declare @flow_cd nvarchar(20) ,@n_step int");
                sb.AppendLine("select @flow_cd =  FLOW_CD, @n_step = SEQ ");
                sb.AppendLine(" from N_ITEM_FLOW ");
                sb.AppendLine("where ITEM_CD ='" + txt_item_cd + "'  ");
                sb.AppendLine("and SEQ = " + n_step + " "); //다음단계의 공정

                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                sb.AppendLine("      LOT_NO ");
                sb.AppendLine("      ,LOT_SUB ");
                sb.AppendLine("      ,F_STEP ");
                sb.AppendLine("      ,FLOW_CD ");
                sb.AppendLine("      ,SEQ ");
                sb.AppendLine("      ,F_SUB_DATE ");
                sb.AppendLine("      ,F_SUB_AMT ");
                sb.AppendLine("      ,LOSS ");
                sb.AppendLine("      ,POOR_CD ");
                sb.AppendLine("      ,POOR_AMT ");
                sb.AppendLine("      ,COMPLETE_YN ");
                sb.AppendLine("      ,CHECK_YN ");
                sb.AppendLine("      ,ITEM_CHECK_YN ");
                sb.AppendLine("      ,INSTAFF ");
                sb.AppendLine("      ,INTIME ");
                sb.AppendLine("      ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + txt_lot_no + "' ");
                sb.AppendLine("      , '" + txt_lot_sub + "' ");
                sb.AppendLine("      , '" + n_step + "' ");
                sb.AppendLine("      , @flow_cd ");
                sb.AppendLine("      , @n_step ");
                sb.AppendLine("      , '" + f_sub_date + "' ");
                sb.AppendLine("      , " + txt_f_sub_amt + " ");
                sb.AppendLine("      , '0' ");
                sb.AppendLine("      , '' ");
                sb.AppendLine("      , '0' ");
                sb.AppendLine("      , 'N' ");
                sb.AppendLine("      , 'S' "); //S -> 대기 
                sb.AppendLine("      , 'S' "); //S -> 대기 
                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                sb.AppendLine("      ,'' ");
                sb.AppendLine("      ) ");
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_F_WORK_FLOW_MOVE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }

        }
        #endregion 공정이동표 자동 설정
        #endregion insert

        #region update

        public int updateStaff(
            string txt_user_cd
            , string txt_user_nm
            , string dept_cd
            , string pos_cd
            , string stor_cd
            , string join_date
            , string txt_phone
            , string txt_login
            , string txt_pw
            , string auth_cd
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_STAFF_CODE set");
                sb.AppendLine("     STAFF_CD = @STAFF_CD ");
                sb.AppendLine("     ,STAFF_NM = @STAFF_NM ");
                sb.AppendLine("     ,JOIN_DATE  =@JOIN_DATE");
                sb.AppendLine("     ,PHONE_NUM = @PHONE_NUM ");
                sb.AppendLine("     ,DEPT_CD = @DEPT_CD ");
                sb.AppendLine("     ,POS_CD = @POS_CD");
                sb.AppendLine("     ,STORAGE_CD = @STORAGE_CD ");
                sb.AppendLine("     ,LOGIN_ID = @LOGIN_ID ");
                sb.AppendLine("     ,PW = @PW");
                sb.AppendLine("     ,AUTH_SET = @AUTH_SET ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine(" where STAFF_CD = @STAFF_CD");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STAFF_CD", txt_user_cd);
                sCommand.Parameters.AddWithValue("@STAFF_NM", txt_user_nm);
                sCommand.Parameters.AddWithValue("@JOIN_DATE", join_date);
                sCommand.Parameters.AddWithValue("@PHONE_NUM", txt_phone);
                sCommand.Parameters.AddWithValue("@DEPT_CD", dept_cd);
                sCommand.Parameters.AddWithValue("@POS_CD", pos_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", stor_cd);
                sCommand.Parameters.AddWithValue("@LOGIN_ID", txt_login);
                sCommand.Parameters.AddWithValue("@PW", txt_pw);
                sCommand.Parameters.AddWithValue("@AUTH_SET", auth_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                int qResult = wAdo.SqlCommandEtc(sCommand, "update_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateDept(string txtDeptCd, string txtDeptNm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_DEPT_CODE set");
                sb.AppendLine("    DEPT_CD  = @DEPT_CD  ");
                sb.AppendLine("    ,DEPT_NM  = @DEPT_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where DEPT_CD =@DEPT_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DEPT_CD", txtDeptCd);
                sCommand.Parameters.AddWithValue("@DEPT_NM", txtDeptNm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updatePos(string txt_pos_cd, string txt_pos_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_POS_CODE set");
                sb.AppendLine("    POS_CD  = @POS_CD  ");
                sb.AppendLine("    ,POS_NM  = @POS_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where POS_CD =@POS_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POS_CD", txt_pos_cd);
                sCommand.Parameters.AddWithValue("@POS_NM", txt_pos_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_POS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateStor(string txt_stor_cd, string txt_stor_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_STORAGE_CODE set");
                sb.AppendLine("    STORAGE_CD  = @STORAGE_CD  ");
                sb.AppendLine("    ,STORAGE_NM  = @STORAGE_NM  ");
                sb.AppendLine("    where STORAGE_CD =@STORAGE_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STORAGE_CD", txt_stor_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_NM", txt_stor_nm);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_STOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateType(string txt_type_cd, string txt_type_nm, string chk_poor_yn, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_TYPE_CODE set");
                sb.AppendLine("    TYPE_CD  = @TYPE_CD  ");
                sb.AppendLine("    ,TYPE_NM  = @TYPE_NM  ");
                sb.AppendLine("    ,POOR_TYPE_YN  = @POOR_TYPE_YN  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where TYPE_CD = @TYPE_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@TYPE_CD", txt_type_cd);
                sCommand.Parameters.AddWithValue("@TYPE_NM", txt_type_nm);
                sCommand.Parameters.AddWithValue("@POOR_TYPE_YN", chk_poor_yn);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateUnit(string txt_unit_cd, string txt_unit_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_UNIT_CODE set");
                sb.AppendLine("    UNIT_CD  = @UNIT_CD  ");
                sb.AppendLine("    ,UNIT_NM  = @UNIT_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where UNIT_CD =@UNIT_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@UNIT_CD", txt_unit_cd);
                sCommand.Parameters.AddWithValue("@UNIT_NM", txt_unit_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_UNIT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateLine(string txt_line_cd, string txt_line_nm, string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_LINE_CODE set");
                sb.AppendLine("    LINE_CD  = @LINE_CD  ");
                sb.AppendLine("    ,LINE_NM  = @LINE_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where LINE_CD =@LINE_CD  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LINE_CD", txt_line_cd);
                sCommand.Parameters.AddWithValue("@LINE_NM", txt_line_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_LINE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updatePoor(string txt_poor_cd, string txt_poor_nm, string chk_poor_cd, string comment) // 불량 수정
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_POOR_CODE set");
                sb.AppendLine("    POOR_CD  = @POOR_CD  ");
                sb.AppendLine("    ,POOR_NM  = @POOR_NM  ");
                sb.AppendLine("    ,TYPE_CD  = @TYPE_CD  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where POOR_CD =@POOR_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POOR_CD", txt_poor_cd);
                sCommand.Parameters.AddWithValue("@POOR_NM", txt_poor_nm);
                sCommand.Parameters.AddWithValue("@TYPE_CD", chk_poor_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_POOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateChugJong(string txt_ChugJong_cd, string txt_ChugJong_nm, string comment) // 축종 수정
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_ChugJong_CODE set");
                sb.AppendLine("    ChugJong_CD  = @ChugJong_CD  ");
                sb.AppendLine("    ,ChugJong_NM  = @ChugJong_NM  ");
                sb.AppendLine("    ,ChugJong  = @COMMENT  ");
                sb.AppendLine("    where ChugJong_CD =@ChugJong_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ChugJong_CD", txt_ChugJong_cd);
                sCommand.Parameters.AddWithValue("@ChugJong_NM", txt_ChugJong_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ChugJong_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateExprt(string txt_exprt_date, string cmd_exprt_gbn) // 유통 일수 수정
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_EXPRT_DATE set");
                sb.AppendLine("    EXPRT_COUNT  = @EXPRT_COUNT  ");
                sb.AppendLine("    ,EXPRT_GUBUN  = @EXPRT_GUBUN  ");
                sb.AppendLine("    where EXPRT_COUNT =@EXPRT_COUNT  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@EXPRT_COUNT", txt_exprt_date);
                sCommand.Parameters.AddWithValue("@EXPRT_GUBUN", cmd_exprt_gbn);


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_EXPRT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateCountry(string txt_country_cd, string txt_country_nm, string txt_country_cmt, string cmb_country_usdcd) // 원산지 수정
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_RAW_COUNTRY_CODE set");
                sb.AppendLine("    COUNTRY_CD  = @COUNTRY_CD  ");
                sb.AppendLine("    ,COUNTRY_NM  = @COUNTRY_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    ,USED_CD  = @USED_CD  ");
                sb.AppendLine("    where COUNTRY_CD =@COUNTRY_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);
                sCommand.Parameters.AddWithValue("@COUNTRY_NM", txt_country_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_country_cmt);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_country_usdcd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_Country_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }


        public int updateMeatClass(string txt_MeatClass_cd, string txt_MeatClass_nm, string txt_HAMYANG) // 육류 분류 수정
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_MEAT_CLASS_CODE set");
                sb.AppendLine("    CLASS_CD  = @CLASS_CD  ");
                sb.AppendLine("    ,CLASS_NM  = @CLASS_NM  ");
                sb.AppendLine("    ,HAMYANG  = @HAMYANG  ");
                sb.AppendLine("    where CLASS_CD =@CLASS_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CLASS_CD", txt_MeatClass_cd);
                sCommand.Parameters.AddWithValue("@CLASS_NM", txt_MeatClass_nm);
                sCommand.Parameters.AddWithValue("@HAMYANG", txt_HAMYANG);


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_MEATCLASS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateFrozen(string txt_frozen_cd, string cmb_frozen_gbn, string txt_frozen_exprt, string cmb_frozen_dategbn, string txt_frozen_cmt) // ) // 냉장 내동 수정
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_FROZEN_CODE set");
                sb.AppendLine("    FROZEN_NM  = @FROZEN_NM ");
                //2019-11-22 이재원 오타 수정 EXRPT_COUNT >> EXPRT_COUNT
                sb.AppendLine("    ,EXPRT_COUNT  = @EXPRT_COUNT  ");
                sb.AppendLine("    ,DAY_GUBUN  = @DAYGUBUN  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where FROZEN_CD =@FROZEN_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FROZEN_CD", txt_frozen_cd);
                sCommand.Parameters.AddWithValue("@FROZEN_NM", cmb_frozen_gbn);
                sCommand.Parameters.AddWithValue("@EXPRT_COUNT", txt_frozen_exprt);
                sCommand.Parameters.AddWithValue("@DAYGUBUN", cmb_frozen_dategbn);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_frozen_cmt);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FROZEN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateGrade(string txt_grade_cd, string txt_grade_nm) // 육류 등급
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_GRADE_CODE set");
                sb.AppendLine("    GRADE_CD  = @GRADE_CD  ");
                sb.AppendLine("    ,GRADE_NM  = @GRADE_NM  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@GRADE_CD", txt_grade_cd);
                sCommand.Parameters.AddWithValue("@GRADE_NM", txt_grade_nm);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_GRADE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateFlow(string txt_flow_cd
            , string txt_flow_nm
            , string cmb_stor
            , string chk_flow_yn
            , string chk_item_gbn
            , string chk_flow_chk_yn
            , string chk_temp_yn
            , string chk_mold_yn
            , string cmb_poor
            , string chk_manager_yn
            , string manager_cd
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine(" update N_FLOW_CODE set");
                sb.AppendLine("     FLOW_CD = @FLOW_CD ");
                sb.AppendLine("     ,FLOW_NM = @FLOW_NM ");
                sb.AppendLine("     ,STORAGE_CD = @STORAGE_CD ");
                sb.AppendLine("     ,FLOW_INSERT_YN = @FLOW_INSERT_YN");
                sb.AppendLine("     ,ITEM_IDEN_YN = @ITEM_IDEN_YN ");
                sb.AppendLine("     ,FLOW_CHK_YN = @FLOW_CHK_YN ");
                sb.AppendLine("     ,TEMP_TIME_YN  = @TEMP_TIME_YN");
                sb.AppendLine("     ,MOLD_YN = @MOLD_YN");
                sb.AppendLine("     ,POOR_TYPE_CD = @POOR_TYPE_CD");
                sb.AppendLine("     ,STAFF_YN = @STAFF_YN ");
                sb.AppendLine("     ,STAFF_CD = @STAFF_CD ");
                sb.AppendLine("     ,COMMENT = @COMMENT");
                sb.AppendLine(" where FLOW_CD = @FLOW_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);
                sCommand.Parameters.AddWithValue("@FLOW_NM", txt_flow_nm);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);
                sCommand.Parameters.AddWithValue("@FLOW_INSERT_YN", chk_flow_yn);
                sCommand.Parameters.AddWithValue("@ITEM_IDEN_YN", chk_item_gbn);
                sCommand.Parameters.AddWithValue("@FLOW_CHK_YN", chk_flow_chk_yn);
                sCommand.Parameters.AddWithValue("@TEMP_TIME_YN", chk_temp_yn);
                sCommand.Parameters.AddWithValue("@MOLD_YN", chk_mold_yn);
                sCommand.Parameters.AddWithValue("@POOR_TYPE_CD", cmb_poor);
                sCommand.Parameters.AddWithValue("@STAFF_YN", chk_manager_yn);
                sCommand.Parameters.AddWithValue("@STAFF_CD", manager_cd);

                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateRawMat(
              string txt_raw_mat_cd
            , string txt_raw_mat_nm
            , string txt_spec
            , string txt_quality
            , string cmb_rat_mat_gbn
            , string cmb_type
            , string cmb_input_unit
            , string cmb_output_unit
            , double txt_conver_ratio
            , double txt_input_price
            , double txt_output_price
            , string cmb_line
            , string st_status_yn
            , string cmb_raw_stor
            , string cmb_used
            , string cmb_cust
            , string cmb_raw_chk
            , string part_no
            , string comment
            , string cmb_chugjong
            , string cmb_class
            , string cmb_country
            , string cmb_grade
            , string txt_hamyang
            , string txt_label_nm
            , string txt_box_amt
            , string txt_exprt_count
            , string cmb_pattern
            , string cmb_vat_cd
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" update N_RAW_CODE set");
                sb.AppendLine("     RAW_MAT_CD = @RAW_MAT_CD");
                sb.AppendLine("     ,RAW_MAT_NM = @RAW_MAT_NM ");
                sb.AppendLine("     ,SPEC = @SPEC ");
                sb.AppendLine("     ,RAW_MAT_GUBUN = @RAW_MAT_GUBUN ");
                sb.AppendLine("     ,TYPE_CD = @TYPE_CD ");
                sb.AppendLine("     ,INPUT_UNIT = @INPUT_UNIT ");
                sb.AppendLine("     ,OUTPUT_UNIT = @OUTPUT_UNIT ");
                sb.AppendLine("     ,LINE_CD = @LINE_CD ");
                sb.AppendLine("     ,CVR_RATIO = @CVR_RATIO ");
                sb.AppendLine("     ,INPUT_PRICE = @INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE = @OUTPUT_PRICE ");
                sb.AppendLine("     ,ST_STATUS_YN = @ST_STATUS_YN ");
                sb.AppendLine("     ,RAW_STORAGE = @RAW_STORAGE ");
                sb.AppendLine("     ,EX_STAN_QUALITY = @EX_STAN_QUALITY ");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     ,CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,CHECK_GUBUN = @CHECK_GUBUN ");
                sb.AppendLine("     ,PART_NO = @PART_NO ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,CHUGJONG_CD = @CHUGJONG_CD ");
                sb.AppendLine("     ,CLASS_CD = @CLASS_CD ");
                sb.AppendLine("     ,GRADE_CD = @GRADE_CD ");
                sb.AppendLine("     ,COUNTRY_CD = @COUNTRY_CD ");
                sb.AppendLine("     ,HAMYANG = @HAMYANG ");
                sb.AppendLine("     ,LABEL_NM = @LABEL_NM ");
                sb.AppendLine("     ,BOX_AMT = @BOX_AMT ");
                sb.AppendLine("     ,EXPRT_COUNT = @EXPRT_COUNT ");
                sb.AppendLine("     ,PATTERN_CD = @PATTERN_CD ");
                sb.AppendLine("     ,VAT_CD = @VAT_CD ");


                sb.AppendLine(" where RAW_MAT_CD = @RAW_MAT_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_mat_cd);
                sCommand.Parameters.AddWithValue("@RAW_MAT_NM", txt_raw_mat_nm);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@RAW_MAT_GUBUN", cmb_rat_mat_gbn);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@INPUT_UNIT", cmb_input_unit);
                sCommand.Parameters.AddWithValue("@OUTPUT_UNIT", cmb_output_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@CVR_RATIO", txt_conver_ratio);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@ST_STATUS_YN", st_status_yn);
                sCommand.Parameters.AddWithValue("@RAW_STORAGE", cmb_raw_stor);
                sCommand.Parameters.AddWithValue("@EX_STAN_QUALITY", txt_quality);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@CHECK_GUBUN", cmb_raw_chk);
                sCommand.Parameters.AddWithValue("@PART_NO", part_no);
                sCommand.Parameters.AddWithValue("@CHUGJONG_CD", cmb_chugjong);
                sCommand.Parameters.AddWithValue("@CLASS_CD", cmb_class);
                sCommand.Parameters.AddWithValue("@GRADE_CD", cmb_grade);
                sCommand.Parameters.AddWithValue("@COUNTRY_CD", cmb_country);
                sCommand.Parameters.AddWithValue("@HAMYANG", txt_hamyang);
                sCommand.Parameters.AddWithValue("@LABEL_NM", txt_label_nm);
                sCommand.Parameters.AddWithValue("@BOX_AMT", txt_box_amt);
                sCommand.Parameters.AddWithValue("@EXPRT_COUNT", txt_exprt_count);
                sCommand.Parameters.AddWithValue("@PATTERN_CD", cmb_pattern);
                sCommand.Parameters.AddWithValue("@VAT_CD", cmb_vat_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_MAT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateCust(
              string txt_cust_cd
            , string cust_gbn
            , string txt_cust_nm
            , string txt_owner
            , string txt_saup_no
            , string txt_uptae
            , string txt_jong
            , string txt_deal_type
            , string txt_post_no
            , string txt_addr
            , string txt_cust_manager
            , string txt_email
            , string txt_comp_phone
            , string txt_phone
            , string txt_fax
            , string txt_start_date
            , string cmb_manager
            , string cmb_used
            , string comment
            , string cmb_tax_cd
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_CUST_CODE set");
                sb.AppendLine("      CUST_GUBUN = @CUST_GUBUN ");
                sb.AppendLine("     ,CUST_NM = @CUST_NM");
                sb.AppendLine("     ,OWNER = @OWNER ");
                sb.AppendLine("     ,SAUP_NO = @SAUP_NO ");
                sb.AppendLine("     ,UPTAE = @UPTAE ");
                sb.AppendLine("     ,JONGMOK = @JONGMOK ");
                sb.AppendLine("     ,DEAL_TYPE  = @DEAL_TYPE");
                sb.AppendLine("     ,POST_NO = @POST_NO ");
                sb.AppendLine("     ,ADDR = @ADDR");
                sb.AppendLine("     ,CUST_MANAGER = @CUST_MANAGER ");
                sb.AppendLine("     ,CUST_EMAIL = @CUST_EMAIL ");
                sb.AppendLine("     ,CUST_COMP_PHONE = @CUST_COMP_PHONE");
                sb.AppendLine("     ,CUST_PHONE = @CUST_PHONE");
                sb.AppendLine("     ,CUST_FAX = @CUST_FAX ");
                sb.AppendLine("     ,CUST_OPEN = @CUST_OPEN ");
                sb.AppendLine("     ,STAFF_CD  = @STAFF_CD");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,TAX_CD = @TAX_CD ");

                sb.AppendLine(" where CUST_CD = @CUST_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_GUBUN", cust_gbn);
                sCommand.Parameters.AddWithValue("@CUST_NM", txt_cust_nm);
                sCommand.Parameters.AddWithValue("@OWNER", txt_owner);
                sCommand.Parameters.AddWithValue("@SAUP_NO", txt_saup_no);
                sCommand.Parameters.AddWithValue("@UPTAE", txt_uptae);
                sCommand.Parameters.AddWithValue("@JONGMOK", txt_jong);
                sCommand.Parameters.AddWithValue("@DEAL_TYPE", txt_deal_type);
                sCommand.Parameters.AddWithValue("@POST_NO", txt_post_no);
                sCommand.Parameters.AddWithValue("@ADDR", txt_addr);
                sCommand.Parameters.AddWithValue("@CUST_MANAGER", txt_cust_manager);
                sCommand.Parameters.AddWithValue("@CUST_EMAIL", txt_email);
                sCommand.Parameters.AddWithValue("@CUST_COMP_PHONE", txt_comp_phone);
                sCommand.Parameters.AddWithValue("@CUST_PHONE", txt_phone);
                sCommand.Parameters.AddWithValue("@CUST_FAX", txt_fax);
                sCommand.Parameters.AddWithValue("@CUST_OPEN", txt_start_date);
                sCommand.Parameters.AddWithValue("@STAFF_CD", cmb_manager);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@TAX_CD", cmb_tax_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_CUST_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateChk(
              string txt_chk_cd
            , string chk_gbn
            , string txt_chk_nm
            , string txt_chk_ord
            , string comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_CHK_CODE set");
                sb.AppendLine("      CHK_GUBUN = @CHK_GUBUN ");
                sb.AppendLine("     ,CHK_ORD = @CHK_ORD");
                sb.AppendLine("     ,CHK_NM = @CHK_NM");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                sb.AppendLine(" where CHK_CD = @CHK_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CHK_GUBUN", chk_gbn);
                sCommand.Parameters.AddWithValue("@CHK_ORD", txt_chk_ord);
                sCommand.Parameters.AddWithValue("@CHK_NM", txt_chk_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@CHK_CD", txt_chk_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateItem(
              string txt_item_cd
            , string txt_item_nm
            , string cmb_item_gbn
            , string txt_spec
            , string cmb_type
            , string cmb_line
            , string cmb_unit
            , string cmb_stor_loc
            , double txt_prop_stock
            , double txt_item_weight
            , double txt_input_price
            , double txt_output_price
            , double txt_char_amt
            , double txt_pack_amt
            , string cmb_cust
            , string chk_print_yn
            , string cmb_used
            , string input_date
            , string box_bar_cd
            , string box_amt
            , string unit_bar_cd
            , string unit_amt
            , string comment
            , string cmb_vat_cd
            , string chugjong_cd
            , string class_cd
            , string country_cd
            , string label_nm
            , string hamyang
            , conDataGridView comp_dgv
            , conDataGridView flow_dgv
            , conDataGridView half_dgv
            , DataGridView del_comp_dgv
            , DataGridView del_flow_dgv
            , DataGridView del_half_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_ITEM_CODE set");
                sb.AppendLine("      ITEM_NM = @ITEM_NM ");
                sb.AppendLine("     ,ITEM_GUBUN = @ITEM_GUBUN ");
                sb.AppendLine("     ,SPEC = @SPEC ");
                sb.AppendLine("     ,TYPE_CD = @TYPE_CD ");
                sb.AppendLine("     ,UNIT_CD = @UNIT_CD ");
                sb.AppendLine("     ,LINE_CD = @LINE_CD ");
                sb.AppendLine("     ,PROP_STOCK = @PROP_STOCK ");
                sb.AppendLine("     ,ITEM_WEIGHT = @ITEM_WEIGHT ");
                sb.AppendLine("     ,INPUT_PRICE = @INPUT_PRICE ");
                sb.AppendLine("     ,OUTPUT_PRICE = @OUTPUT_PRICE ");
                sb.AppendLine("     ,CHARGE_AMT = @CHARGE_AMT ");
                sb.AppendLine("     ,PACK_AMT = @PACK_AMT ");
                sb.AppendLine("     ,CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,PRINT_YN = @PRINT_YN ");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     ,INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     ,BOX_BAR_CD = @BOX_BAR_CD ");
                sb.AppendLine("     ,BOX_AMT = @BOX_AMT ");
                sb.AppendLine("     ,UNIT_BAR_CD = @UNIT_BAR_CD ");
                sb.AppendLine("     ,UNIT_AMT = @UNIT_AMT ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,VAT_CD = @VAT_CD");
                sb.AppendLine("     ,CHUGJONG_CD = @CHUGJONG_CD");
                sb.AppendLine("     ,CLASS_CD = @CLASS_CD");
                sb.AppendLine("     ,COUNTRY_CD = @COUNTRY_CD");
                sb.AppendLine("     ,LABEL_NM = @LABEL_NM");
                sb.AppendLine("     ,HAMYANG = @HAMYANG");

                sb.AppendLine(" where ITEM_CD = @ITEM_CD ");

                if (comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < comp_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)comp_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @seq" + i + " int ");
                            sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from N_ITEM_COMP ");
                            sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                            sb.AppendLine("insert into N_ITEM_COMP(");
                            sb.AppendLine("     ITEM_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + txt_item_cd + "' ");
                            sb.AppendLine("     ,@seq" + i + " ");
                            sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value + "' ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update N_ITEM_COMP set");
                            sb.AppendLine("      RAW_MAT_CD =  '" + comp_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,TOTAL_AMT =  '" + comp_dgv.Rows[i].Cells["TOTAL_AMT"].Value + "' ");
                            sb.AppendLine(" where ITEM_CD = '" + txt_item_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + comp_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }



                if (del_comp_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_comp_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_COMP ");
                        sb.AppendLine("    where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_comp_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_NM", txt_item_nm);
                sCommand.Parameters.AddWithValue("@ITEM_GUBUN", cmb_item_gbn);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@TYPE_CD", cmb_type);
                sCommand.Parameters.AddWithValue("@UNIT_CD", cmb_unit);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                //sCommand.Parameters.AddWithValue("@STOCK_LOC", "");
                sCommand.Parameters.AddWithValue("@PROP_STOCK", txt_prop_stock);
                sCommand.Parameters.AddWithValue("@ITEM_WEIGHT", txt_item_weight);
                sCommand.Parameters.AddWithValue("@INPUT_PRICE", txt_input_price);
                sCommand.Parameters.AddWithValue("@OUTPUT_PRICE", txt_output_price);
                sCommand.Parameters.AddWithValue("@CHARGE_AMT", txt_char_amt);
                sCommand.Parameters.AddWithValue("@PACK_AMT", txt_pack_amt);
                sCommand.Parameters.AddWithValue("@CUST_CD", cmb_cust);
                sCommand.Parameters.AddWithValue("@PRINT_YN", chk_print_yn);
                sCommand.Parameters.AddWithValue("@USED_CD", cmb_used);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@BOX_BAR_CD", box_bar_cd);
                sCommand.Parameters.AddWithValue("@BOX_AMT", box_amt);
                sCommand.Parameters.AddWithValue("@UNIT_BAR_CD", unit_bar_cd);
                sCommand.Parameters.AddWithValue("@UNIT_AMT", unit_amt);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@VAT_CD", cmb_vat_cd);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CHUGJONG_CD", chugjong_cd);
                sCommand.Parameters.AddWithValue("@CLASS_CD", class_cd);
                sCommand.Parameters.AddWithValue("@COUNTRY_CD", country_cd);
                sCommand.Parameters.AddWithValue("@LABEL_NM", label_nm);
                sCommand.Parameters.AddWithValue("@HAMYANG", hamyang);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateBsItem(
              System.Windows.Forms.DataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    string printYn = "";
                    if ((bool)dgv.Rows[i].Cells["PRINT_YN"].Value == true)
                        printYn = "Y";
                    else
                        printYn = "N";
                    sb.AppendLine("update N_ITEM_CODE set");
                    sb.AppendLine("      BASIC_STOCK =  " + int.Parse(dgv.Rows[i].Cells["BASIC_STOCK"].Value.ToString()) + " ");
                    sb.AppendLine("     ,PRINT_YN = '" + printYn + "' ");

                    sb.AppendLine(" where ITEM_CD = '" + dgv.Rows[i].Cells["ITEM_CD"].Value.ToString() + "' ");

                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_BS_ITEM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateBsRaw(System.Windows.Forms.DataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {

                    sb.AppendLine("update N_RAW_CODE set");
                    sb.AppendLine("      BASIC_STOCK =  " + int.Parse(dgv.Rows[i].Cells["BASIC_STOCK"].Value.ToString()) + " ");

                    sb.AppendLine(" where RAW_MAT_CD = '" + dgv.Rows[i].Cells["RAW_MAT_CD"].Value.ToString() + "' ");

                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_BS_RAW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateFac(
              string txt_fac_cd
            , string txt_fac_nm
            , string txt_model_nm
            , string txt_spec
            , string txt_manu_comp
            , string txt_acq_date
            , string txt_acq_price
            , string cmb_dept
            , string txt_used
            , string txt_pro_capa
            , string txt_power_num
            , string cmb_mainten)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_FAC_CODE set");
                sb.AppendLine("      FAC_NM = @FAC_NM ");
                sb.AppendLine("     ,MODEL_NM = @MODEL_NM ");
                sb.AppendLine("     ,SPEC = @SPEC ");
                sb.AppendLine("     ,MANU_COMPANY = @MANU_COMPANY ");
                sb.AppendLine("     ,ACQ_DATE = @ACQ_DATE ");
                sb.AppendLine("     ,ACQ_PRICE = @ACQ_PRICE ");
                sb.AppendLine("     ,DEPT_CD = @DEPT_CD ");
                sb.AppendLine("     ,USED = @USED ");
                sb.AppendLine("     ,PRO_CAPA = @PRO_CAPA ");
                sb.AppendLine("     ,POWER_NUMBER = @POWER_NUMBER ");
                sb.AppendLine("     ,MAINTEN_CLASS = @MAINTEN_CLASS ");

                sb.AppendLine(" where FAC_CD = @FAC_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_fac_cd);
                sCommand.Parameters.AddWithValue("@FAC_NM", txt_fac_nm);
                sCommand.Parameters.AddWithValue("@MODEL_NM", txt_model_nm);
                sCommand.Parameters.AddWithValue("@SPEC", txt_spec);
                sCommand.Parameters.AddWithValue("@MANU_COMPANY", txt_manu_comp);
                sCommand.Parameters.AddWithValue("@ACQ_DATE", txt_acq_date);
                sCommand.Parameters.AddWithValue("@ACQ_PRICE", txt_acq_price);
                sCommand.Parameters.AddWithValue("@DEPT_CD", cmb_dept);
                sCommand.Parameters.AddWithValue("@USED", txt_used);
                sCommand.Parameters.AddWithValue("@PRO_CAPA", txt_pro_capa);
                sCommand.Parameters.AddWithValue("@POWER_NUMBER", txt_power_num);
                sCommand.Parameters.AddWithValue("@MAINTEN_CLASS", cmb_mainten);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updatePlan(
              string plan_date
            , string txt_plan_cd
            , string txt_cust_cd
            , string deliver_req_date
            , string order_yn
            , string comment
            , conDataGridView p_item_dgv
            , DataGridView p_half_dgv
            , DataGridView del_dgv
            , DataGridView del_half_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update F_PLAN set");
                sb.AppendLine("      CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,DELIVER_REQ_DATE = @DELIVER_REQ_DATE ");
                sb.AppendLine("     ,ORDER_YN = @ORDER_YN ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");

                sb.AppendLine(" where PLAN_DATE = @PLAN_DATE and PLAN_CD= @PLAN_CD ");

                if (p_item_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < p_item_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)p_item_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @item_seq" + i + " int ");
                            sb.AppendLine("select @item_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_PLAN_DETAIL ");
                            sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");
                            sb.AppendLine("and PLAN_CD =  '" + txt_plan_cd + "' ");

                            sb.AppendLine("insert into F_PLAN_DETAIL(");
                            sb.AppendLine("     PLAN_DATE ");
                            sb.AppendLine("     ,PLAN_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_ITEM_GUBUN  ");
                            sb.AppendLine("     ,ITEM_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,WORK_YN ");
                            sb.AppendLine("     ,F_LEVEL ");
                            sb.AppendLine("     ,DEFAULT_AMT ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("       '" + plan_date + "' ");
                            sb.AppendLine("      ,'" + txt_plan_cd + "' ");
                            sb.AppendLine("     ,@item_seq" + i + " ");
                            sb.AppendLine("     ,'" + (p_item_dgv.Rows[i].Cells["RAW_ITEM_GUBUN"].Value.ToString().Equals("상품") ? "1" : "2") + "' ");
                            sb.AppendLine("     ,'" + p_item_dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + p_item_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'N' ");
                            sb.AppendLine("     , 1 ");
                            sb.AppendLine("     , 1  ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("  )");

                        }
                        else
                        {
                            sb.AppendLine("update F_PLAN_DETAIL set");
                            sb.AppendLine("      ITEM_CD =  '" + p_item_dgv.Rows[i].Cells["ITEM_CD"].Value + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)p_item_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)p_item_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");

                            if ((bool)p_item_dgv.Rows[i].Cells["WORK_YN"].Value == true)
                            {
                                sb.AppendLine("      ,WORK_YN =  'Y' ");
                            }
                            else
                            {
                                sb.AppendLine("      ,WORK_YN =  'N' ");
                            }

                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where PLAN_DATE = '" + plan_date + "' ");
                            sb.AppendLine(" and PLAN_CD = '" + txt_plan_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + p_item_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (p_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < p_half_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)p_half_dgv.Rows[i].Cells["H_SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {

                            sb.AppendLine("declare @half_seq" + i + " int ");
                            sb.AppendLine("select @half_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_PLAN_DETAIL ");
                            sb.AppendLine("where PLAN_DATE = '" + plan_date + "' ");
                            sb.AppendLine("and PLAN_CD =  '" + txt_plan_cd + "' ");

                            sb.AppendLine("insert into F_PLAN_DETAIL(");
                            sb.AppendLine("     PLAN_DATE ");
                            sb.AppendLine("     ,PLAN_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,ITEM_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,WORK_YN ");
                            sb.AppendLine("     ,F_LEVEL ");
                            sb.AppendLine("     ,TOP_ITEM_CD ");
                            sb.AppendLine("     ,P_ITEM_CD ");
                            sb.AppendLine("     ,DEFAULT_AMT ");
                            sb.AppendLine("     ,INSTAFF");
                            sb.AppendLine("     ,INTIME");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("      '" + plan_date + "' ");
                            sb.AppendLine("     ,'" + txt_plan_cd + "' ");
                            sb.AppendLine("     ,@half_seq" + i + " ");
                            sb.AppendLine("     ,'" + p_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + p_half_dgv.Rows[i].Cells["H_UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)p_half_dgv.Rows[i].Cells["H_TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,'N' ");
                            sb.AppendLine("      ,'" + ((string)p_half_dgv.Rows[i].Cells["F_LEVEL"].Value).Replace(",", "") + "'  ");
                            sb.AppendLine("      ,'" + p_half_dgv.Rows[i].Cells["TOP_ITEM_CD"].Value + "'  ");
                            sb.AppendLine("      ,'" + p_half_dgv.Rows[i].Cells["P_ITEM_CD"].Value + "'  ");
                            sb.AppendLine("      ,'" + ((string)p_half_dgv.Rows[i].Cells["DEFAULT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_PLAN_DETAIL set");
                            sb.AppendLine("      ITEM_CD =  '" + p_half_dgv.Rows[i].Cells["HALF_ITEM_CD"].Value + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)p_half_dgv.Rows[i].Cells["H_TOTAL_AMT"].Value).Replace(",", "") + "' ");

                            if ((bool)p_half_dgv.Rows[i].Cells["H_WORK_YN"].Value == true)
                            {
                                sb.AppendLine("      ,WORK_YN =  'Y' ");
                            }
                            else
                            {
                                sb.AppendLine("      ,WORK_YN =  'N' ");
                            }

                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where PLAN_DATE = '" + plan_date + "' ");
                            sb.AppendLine(" and PLAN_CD = '" + txt_plan_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + p_half_dgv.Rows[i].Cells["H_SEQ"].Value + "'");
                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_PLAN_DETAIL ");
                        sb.AppendLine("    where PLAN_DATE = '" + del_dgv.Rows[i].Cells["PLAN_DATE"].Value + "' ");
                        sb.AppendLine("     and PLAN_CD = '" + del_dgv.Rows[i].Cells["PLAN_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }
                if (del_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_PLAN_DETAIL ");
                        sb.AppendLine("    where PLAN_DATE = '" + del_half_dgv.Rows[i].Cells["PLAN_DATE"].Value + "' ");
                        sb.AppendLine("     and PLAN_CD = '" + del_half_dgv.Rows[i].Cells["PLAN_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = '" + del_half_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@DELIVER_REQ_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@ORDER_YN", order_yn);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                sCommand.Parameters.AddWithValue("@PLAN_DATE", plan_date);
                sCommand.Parameters.AddWithValue("@PLAN_CD", txt_plan_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_PLAN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateOrder(
              string order_date
            , string txt_order_cd
            , string txt_cust_cd
            , string in_req_date
            , string comment
            , string pur_yn
            , conDataGridView o_rm_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update F_ORDER set");
                sb.AppendLine("      CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,INPUT_REQ_DATE = @INPUT_REQ_DATE ");
                sb.AppendLine("     ,COMPLETE_YN = '" + pur_yn + "' ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");

                sb.AppendLine(" where ORDER_DATE = @ORDER_DATE and ORDER_CD= @ORDER_CD ");

                if (o_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < o_rm_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)o_rm_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @order_seq" + i + " int ");
                            sb.AppendLine("select @order_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ORDER_DETAIL ");
                            sb.AppendLine("where ORDER_DATE = '" + order_date + "' ");
                            sb.AppendLine("and ORDER_CD = '" + txt_order_cd + "' ");

                            sb.AppendLine("insert into F_ORDER_DETAIL(");
                            sb.AppendLine("     ORDER_DATE ");
                            sb.AppendLine("     ,ORDER_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("     ,TOTAL_BOX_AMT ");
                            sb.AppendLine("     ,BOX_AMT ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + order_date + "' ");
                            sb.AppendLine("     ,'" + txt_order_cd + "' ");
                            sb.AppendLine("     ,@order_seq" + i + " ");
                            sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + o_rm_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_BOX_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)o_rm_dgv.Rows[i].Cells["BOX_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_ORDER_DETAIL set");
                            sb.AppendLine("       RAW_MAT_CD =  '" + o_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)o_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine("      ,TOTAL_BOX_AMT =  '" + ((string)o_rm_dgv.Rows[i].Cells["TOTAL_BOX_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,BOX_AMT =  '" + ((string)o_rm_dgv.Rows[i].Cells["BOX_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine(" where ORDER_DATE = '" + order_date + "' ");
                            sb.AppendLine(" and ORDER_CD = '" + txt_order_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + o_rm_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_ORDER_DETAIL ");
                        sb.AppendLine("    where ORDER_DATE = '" + del_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                        sb.AppendLine("     and ORDER_CD = '" + del_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INPUT_REQ_DATE", in_req_date);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                sCommand.Parameters.AddWithValue("@ORDER_DATE", order_date);
                sCommand.Parameters.AddWithValue("@ORDER_CD", txt_order_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_PLAN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateRmInput(
              string input_date
            , string txt_input_cd
            , string txt_cust_cd
            , string comment
            , string input_yn
            , string cmb_frozen_gubun
            , string cmb_stor
            , string cmb_loc
            , string txt_slauhouse_cd
            , string txt_all_supply_money
            , string txt_all_tax_money
            , string txt_all_total_money
            , string txt_tax_cd
            , conDataGridView in_rm_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());


                sb = new StringBuilder();
                sb.AppendLine("update F_RAW_INPUT set");
                sb.AppendLine("      CUST_CD = @CUST_CD ");
                sb.AppendLine("      ,SLAUHOUSE_CD = @SLAUHOUSE_CD ");
                sb.AppendLine("      ,STORAGE_CD = @STORAGE_CD ");
                sb.AppendLine("      ,LOC_CD = @LOC_CD ");
                sb.AppendLine("     ,COMPLETE_YN = '" + input_yn + "' ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");

                sb.AppendLine(" where INPUT_DATE = @INPUT_DATE and INPUT_CD= @INPUT_CD ");


                bool isCustDay = isCustDayTotal(input_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(input_date, txt_cust_cd));
                }

                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE + (SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" P_SUPPLY_MONEY = P_SUPPLY_MONEY - (SELECT ALL_SUPPLY_MONEY FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                sb.AppendLine(" ,P_TAX_MONEY = P_TAX_MONEY - (SELECT ALL_TAX_MONEY FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                sb.AppendLine(" ,P_TOTAL_MONEY = P_TOTAL_MONEY - (SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE - " + txt_all_total_money.Replace(",", "") + " ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" P_SUPPLY_MONEY = P_SUPPLY_MONEY + " + txt_all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,P_TAX_MONEY = P_TAX_MONEY + " + txt_all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,P_TOTAL_MONEY = P_TOTAL_MONEY + " + txt_all_total_money.Replace(",", "") + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(input_date, txt_cust_cd));


                sb.AppendLine(CustDayTotal_Change_Balance(
                    input_date
                    , txt_cust_cd
                    , "(SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) "
                    , "+"));


                sb.AppendLine(CustDayTotal_Change_Balance(
                    input_date
                    , txt_cust_cd
                    , txt_all_total_money.Replace(",", "")
                    , "-"));


                sb.AppendLine("update F_BUY  SET  ");
                sb.AppendLine(" BUY_GUBUN  = '1' ");
                sb.AppendLine(" ,CUST_CD  = @CUST_CD ");
                sb.AppendLine(" ,ALL_TOTAL_MONEY  = " + txt_all_total_money.Replace(",", "") + " ");
                sb.AppendLine(" ,ALL_SUPPLY_MONEY  = " + txt_all_supply_money.Replace(",", "") + " ");
                sb.AppendLine(" ,ALL_TAX_MONEY  = " + txt_all_tax_money.Replace(",", "") + " ");
                sb.AppendLine(" ,TAX_CD  = '" + txt_tax_cd + "' ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine(" WHERE INPUT_DATE = '" + input_date + "'  ");
                sb.AppendLine(" AND INPUT_CD = '" + txt_input_cd + "'  ");








                if (in_rm_dgv.Rows.Count > 0)
                {
                    string storageTemp_1f = "";
                    string storageTemp_2f = "";
                    string storage_cd = "";
                    string loc_cd = "";
                    string frozen_cd = "";

                    for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                    {
                        if (in_rm_dgv.Rows[i].Cells["RAW_MAT_GUBUN"].Value.ToString().Equals("1"))
                        {
                            storageTemp_1f = ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "");
                            storageTemp_2f = "0";
                            if (in_rm_dgv.Rows[i].Cells["STORE_GUBUN"].Value == null ||
                                in_rm_dgv.Rows[i].Cells["STORE_GUBUN"].Value.ToString().Equals("") ||
                                in_rm_dgv.Rows[i].Cells["LOC_GUBUN"].Value == null ||
                                in_rm_dgv.Rows[i].Cells["LOC_GUBUN"].Value.ToString().Equals(""))
                            {
                                return 4;
                            }
                            if (txt_slauhouse_cd == null || txt_slauhouse_cd.Equals(""))
                            {
                                return 5;
                            }
                            storage_cd = in_rm_dgv.Rows[i].Cells["STORE_GUBUN"].Value.ToString();
                            loc_cd = in_rm_dgv.Rows[i].Cells["LOC_GUBUN"].Value.ToString();
                            frozen_cd = in_rm_dgv.Rows[i].Cells["FROZEN_GUBUN"].Value.ToString();
                        }
                        else
                        {
                            storageTemp_1f = "0";
                            storageTemp_2f = ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "");
                            storage_cd = in_rm_dgv.Rows[i].Cells["STORE_GUBUN"].Value.ToString();
                            loc_cd = in_rm_dgv.Rows[i].Cells["LOC_GUBUN"].Value.ToString();
                            frozen_cd = "";
                        }

                        string txt_seq = (string)in_rm_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @input_seq" + i + " int, @chk_gbn" + i + "  nvarchar(1), @chk_yn" + i + " nvarchar(1), @final_amt" + i + " nvarchar(20) ");
                            sb.AppendLine("select @input_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                            sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                            sb.AppendLine("and INPUT_CD = '" + txt_input_cd + "' ");

                            sb.AppendLine("select @chk_gbn" + i + " = check_gubun from N_RAW_CODE ");
                            sb.AppendLine("where RAW_MAT_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");

                            sb.AppendLine("IF @chk_gbn" + i + " = '1' BEGIN set @chk_yn" + i + " = 'S' set @final_amt" + i + " = '0' END "); //원자재 검사여부가 검사일 경우 'S' 대기 
                            sb.AppendLine("ELSE BEGIN set @chk_yn" + i + " = 'O' set @final_amt" + i + " = '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' END "); //원자재 검사여부가 생략일 경우 'O'

                            sb.AppendLine("insert into F_RAW_DETAIL(");
                            sb.AppendLine("     INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,TEMP_AMT ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,CURR_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,HEAT_NO ");
                            sb.AppendLine("     ,HEAT_TIME ");
                            sb.AppendLine("     ,ORDER_DATE ");
                            sb.AppendLine("     ,ORDER_CD ");
                            sb.AppendLine("     ,ORDER_SEQ ");
                            sb.AppendLine("     ,COMPLETE_YN ");
                            sb.AppendLine("     ,CHECK_YN ");
                            sb.AppendLine("     ,MF_DATE ");
                            sb.AppendLine("     ,EXPRT_DATE ");
                            sb.AppendLine("     ,FROZEN_GUBUN ");
                            sb.AppendLine("     ,UNION_CD ");
                            sb.AppendLine("     ,CHUGJONG_CD ");
                            sb.AppendLine("     ,CLASS_CD ");
                            sb.AppendLine("     ,GRADE_CD ");
                            sb.AppendLine("     ,COUNTRY_CD ");
                            sb.AppendLine("     ,TYPE_CD ");
                            sb.AppendLine("     ,STORE_1F ");
                            sb.AppendLine("     ,STORE_1NF ");
                            sb.AppendLine("     ,STORE_2F ");
                            sb.AppendLine("     ,STORAGE_CD ");
                            sb.AppendLine("     ,LOC_CD ");
                            sb.AppendLine("     ,SLAUHOUSE_CD ");
                            sb.AppendLine("     ,INPUT_GUBUN ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + input_date + "' ");
                            sb.AppendLine("      ,'" + txt_input_cd + "'  ");
                            sb.AppendLine("     ,@input_seq" + i + " ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,@final_amt" + i + " ");
                            sb.AppendLine("     ,@final_amt" + i + " ");
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["HEAT_NO"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["HEAT_TIME"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");
                            sb.AppendLine("     ,'N' ");
                            sb.AppendLine("     ,@chk_yn" + i + " ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["MF_DATE"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["EXPRT_DATE"].Value + "' ");
                            sb.AppendLine("     ,'" + frozen_cd + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["UNION_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["CHUGJONG_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["CLASS_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["GRADE_NM"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["COUNTRY_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + in_rm_dgv.Rows[i].Cells["TYPE_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + (frozen_cd.Equals("F") ? storageTemp_1f : "0") + "' ");
                            sb.AppendLine("     ,'" + (frozen_cd.Equals("NF") ? storageTemp_1f : "0") + "' ");
                            sb.AppendLine("     ,'" + storageTemp_2f + "' ");
                            sb.AppendLine("     ,'" + storage_cd + "' ");
                            sb.AppendLine("     ,'" + loc_cd + "' ");
                            sb.AppendLine("     ,'" + txt_slauhouse_cd + "' ");
                            sb.AppendLine("     ,'1' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");

                            sb.AppendLine("  )");

                            sb.AppendLine("declare @input_seqB" + i + " int  ");
                            sb.AppendLine("select @input_seqB" + i + " =ISNULL(MAX(BUY_SEQ),0)+1 from F_BUY_DETAIL ");
                            sb.AppendLine("where BUY_DATE = '" + input_date + "' ");
                            sb.AppendLine("and BUY_CD =  (SELECT BUY_CD FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' )  ");

                            sb.AppendLine("insert into F_BUY_DETAIL (");
                            sb.AppendLine("     BUY_DATE ");
                            sb.AppendLine("     ,BUY_CD ");
                            sb.AppendLine("     ,BUY_SEQ ");
                            sb.AppendLine("     ,INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,INPUT_SEQ ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,VAT_CD ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + input_date + "' ");
                            sb.AppendLine("      ,(SELECT BUY_CD FROM F_BUY WHERE INPUT_DATE = '" + input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                            sb.AppendLine("     ,@input_seqB" + i + " ");
                            sb.AppendLine("     ,'" + input_date + "' ");
                            sb.AppendLine("     ,'" + txt_input_cd + "' ");
                            sb.AppendLine("     ,@input_seq" + i + " ");
                            sb.AppendLine("     ," + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ");
                            sb.AppendLine("     ," + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + " ");
                            sb.AppendLine("     ,'" + ((string)in_rm_dgv.Rows[i].Cells["VAT_CD"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("  )");

                        }
                        else
                        {
                            sb.AppendLine("declare @input_seq" + i + " int, @chk_gbn" + i + "  nvarchar(1), @chk_yn" + i + " nvarchar(1), @final_amt" + i + " nvarchar(20) ");
                            sb.AppendLine("select @input_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_DETAIL ");
                            sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                            sb.AppendLine("and INPUT_CD = '" + txt_input_cd + "' ");

                            sb.AppendLine("select @chk_gbn" + i + " = check_gubun from N_RAW_CODE ");
                            sb.AppendLine("where RAW_MAT_CD = '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");

                            sb.AppendLine("IF @chk_gbn" + i + " = '1' BEGIN set @chk_yn" + i + " = 'S' set @final_amt" + i + " = '0' END "); //원자재 검사여부가 검사일 경우 'S' 대기 
                            sb.AppendLine("ELSE BEGIN set @chk_yn" + i + " = 'O' set @final_amt" + i + " = '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' END "); //원자재 검사여부가 생략일 경우 'O'

                            sb.AppendLine("update F_RAW_DETAIL set");
                            sb.AppendLine("       TEMP_AMT =  '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_AMT = @final_amt" + i + " ");
                            sb.AppendLine("      ,CURR_AMT = @final_amt" + i + " ");
                            sb.AppendLine("      ,COMPLETE_YN = 'N' ");
                            sb.AppendLine("      ,CHECK_YN = @chk_yn" + i + " ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)in_rm_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,HEAT_NO =  '" + in_rm_dgv.Rows[i].Cells["HEAT_NO"].Value + "' ");
                            sb.AppendLine("      ,HEAT_TIME =  '" + in_rm_dgv.Rows[i].Cells["HEAT_TIME"].Value + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine("      ,MF_DATE =  '" + in_rm_dgv.Rows[i].Cells["MF_DATE"].Value + "' ");
                            sb.AppendLine("      ,EXPRT_DATE =  '" + in_rm_dgv.Rows[i].Cells["EXPRT_DATE"].Value + "'  ");
                            sb.AppendLine("      ,FROZEN_GUBUN =  '" + frozen_cd + "' ");
                            sb.AppendLine("      ,UNION_CD =  '" + in_rm_dgv.Rows[i].Cells["UNION_CD"].Value + "' ");
                            sb.AppendLine("      ,GRADE_CD =  '" + in_rm_dgv.Rows[i].Cells["GRADE_NM"].Value + "' ");
                            sb.AppendLine("      ,CHUGJONG_CD =  '" + in_rm_dgv.Rows[i].Cells["CHUGJONG_CD"].Value + "' ");
                            sb.AppendLine("      ,CLASS_CD =  '" + in_rm_dgv.Rows[i].Cells["CLASS_CD"].Value + "' ");
                            sb.AppendLine("      ,COUNTRY_CD =  '" + in_rm_dgv.Rows[i].Cells["COUNTRY_CD"].Value + "' ");
                            sb.AppendLine("      ,TYPE_CD =  '" + in_rm_dgv.Rows[i].Cells["TYPE_CD"].Value + "' ");
                            sb.AppendLine("      ,RAW_MAT_CD =  '" + in_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                            sb.AppendLine("      ,STORE_1F =  '" + (frozen_cd.Equals("F") ? storageTemp_1f : "0") + "' ");
                            sb.AppendLine("      ,STORE_1NF =  '" + (frozen_cd.Equals("NF") ? storageTemp_1f : "0") + "' ");
                            sb.AppendLine("      ,STORE_2F =  '" + storageTemp_2f + "' ");
                            sb.AppendLine("      ,STORAGE_CD =  '" + storage_cd + "' ");
                            sb.AppendLine("      ,LOC_CD =  '" + loc_cd + "' ");
                            sb.AppendLine("      ,SLAUHOUSE_CD =  '" + txt_slauhouse_cd + "' ");
                            sb.AppendLine(" where INPUT_DATE = '" + input_date + "' ");
                            sb.AppendLine(" and INPUT_CD = '" + txt_input_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + in_rm_dgv.Rows[i].Cells["SEQ"].Value + "'");


                            sb.AppendLine("update  F_BUY_DETAIL SET ");
                            sb.AppendLine("     TOTAL_AMT = " + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", "") + " ");
                            sb.AppendLine("     ,TOTAL_MONEY = " + ((string)in_rm_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + " ");
                            sb.AppendLine("     ,VAT_CD = " + ((string)in_rm_dgv.Rows[i].Cells["VAT_CD"].Value).Replace(",", "") + " ");
                            sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                            sb.AppendLine("   WHERE INPUT_DATE = '" + input_date + "'  ");
                            sb.AppendLine("   and INPUT_CD = '" + txt_input_cd + "'  ");
                            sb.AppendLine("   and INPUT_SEQ = '" + in_rm_dgv.Rows[i].Cells["SEQ"].Value + "' ");


                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_RAW_DETAIL ");
                        sb.AppendLine("    where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("     and INPUT_CD = '" + txt_input_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");

                        sb.AppendLine("delete from F_BUY_DETAIL ");
                        sb.AppendLine("    where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("     and INPUT_CD = '" + txt_input_cd + "' ");
                        sb.AppendLine("     and INPUT_SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@SLAUHOUSE_CD", txt_slauhouse_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_stor);
                sCommand.Parameters.AddWithValue("@LOC_CD", cmb_loc);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateStRaw(conDataGridView dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < dgv.Rows.Count; i++)
                {
                    sb.AppendLine("update N_RAW_CODE set ");
                    sb.AppendLine("      BAL_STOCK = (select	  ");
                    sb.AppendLine("                         ISNULL((");
                    sb.AppendLine("                             select SUM(ISNULL(TOTAL_AMT,0)) from F_RAW_DETAIL ");
                    sb.AppendLine("                             where RAW_MAT_CD = '" + dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "'  ");
                    sb.AppendLine("                                 and (CHECK_YN = 'Y' or CHECK_YN = 'O') ");
                    sb.AppendLine("                     group by RAW_MAT_CD),0)  ");
                    sb.AppendLine("                    -  ");
                    sb.AppendLine("                     ISNULL((  ");
                    sb.AppendLine("                     select SUM(ISNULL(TOTAL_AMT,0)) from F_RAW_OUTPUT ");
                    sb.AppendLine("                     where RAW_MAT_CD = '" + dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "'   ");
                    sb.AppendLine("                     group by RAW_MAT_CD),0))");
                    sb.AppendLine("where RAW_MAT_CD = '" + dgv.Rows[i].Cells["RAW_MAT_CD"].Value + "' ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_STOCK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateWork(
              string work_date
            , string txt_work_cd
            , string txt_lot_no
            , string txt_item_cd
            , string txt_cust_cd
            , string txt_inst_amt
            , string deliver_req_date
            , string cmb_line
            , string cmb_worker
            , string txt_plan_num
            , string txt_plan_item
            , string txt_inst_notice
            , conDataGridView w_rm_dgv
            , DataGridView w_half_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select * ");
                //sb.AppendLine(" from F_PLAN A ");
                //sb.AppendLine(" left outer join F_PLAN_GROUP B  ");
                //sb.AppendLine(" on A.PLAN_DATE = B.PLAN_DATE ");
                //sb.AppendLine("     and A.PLAN_CD = B.PLAN_CD  ");
                //sb.AppendLine(" where A.PLAN_NUM = '" + txt_plan_num + "' 	 ");
                //sb.AppendLine("     and B.ITEM_CD = '" + txt_plan_item + "' ");
                //sb.AppendLine("     and B.WORK_YN = 'Y'       ");

                sb.AppendLine(" select * ");
                sb.AppendLine(" from F_WORK_FLOW ");
                sb.AppendLine(" where LOT_NO = '" + txt_lot_no + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt != null && dt.Rows.Count > 0)
                {
                    return 3;
                }

                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_INST set");
                sb.AppendLine("      LOT_NO = @LOT_NO ");
                sb.AppendLine("     ,ITEM_CD = @ITEM_CD ");
                sb.AppendLine("     ,CUST_CD = @CUST_CD ");
                sb.AppendLine("     ,INST_AMT = @INST_AMT ");
                sb.AppendLine("     ,DELIVERY_DATE = @DELIVERY_DATE ");
                sb.AppendLine("     ,LINE_CD = @LINE_CD ");
                sb.AppendLine("     ,WORKER_CD = @WORKER_CD");
                sb.AppendLine("     ,INST_NOTICE = @INST_NOTICE ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where W_INST_DATE = '" + work_date + "' and W_INST_CD = '" + txt_work_cd + "' ");

                if (w_rm_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_rm_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)w_rm_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {
                            sb.AppendLine("declare @work_seq" + i + " int ");
                            sb.AppendLine("select @work_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_WORK_INST_DETAIL ");
                            sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");
                            sb.AppendLine("and W_INST_CD = '" + txt_work_cd + "' ");

                            sb.AppendLine("insert into F_WORK_INST_DETAIL(");
                            sb.AppendLine("     W_INST_DATE ");
                            sb.AppendLine("     ,W_INST_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,LOT_NO ");
                            sb.AppendLine("     ,RAW_MAT_CD ");
                            sb.AppendLine("     ,SOYO_AMT ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,INSTAFF");
                            sb.AppendLine("     ,INTIME");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + work_date + "' ");
                            sb.AppendLine("     ,'" + txt_work_cd + "' ");
                            sb.AppendLine("     ,@work_seq" + i + " ");
                            sb.AppendLine("     ,'" + txt_lot_no + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["RAW_MAT_CD"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");

                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_WORK_INST_DETAIL set");
                            sb.AppendLine("       SOYO_AMT =  '" + ((string)w_rm_dgv.Rows[i].Cells["SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)w_rm_dgv.Rows[i].Cells["TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where W_INST_DATE = '" + work_date + "' ");
                            sb.AppendLine(" and W_INST_CD = '" + txt_work_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + w_rm_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (w_half_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < w_half_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("update F_WORK_INST_HALF_DETAIL set");
                        sb.AppendLine("       SOYO_AMT =  '" + ((string)w_half_dgv.Rows[i].Cells["H_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,TOTAL_AMT =  '" + ((string)w_half_dgv.Rows[i].Cells["H_TOTAL_SOYO_AMT"].Value).Replace(",", "") + "' ");
                        sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine(" and W_INST_CD = '" + txt_work_cd + "' ");
                        sb.AppendLine(" and SEQ = '" + w_half_dgv.Rows[i].Cells["H_SEQ"].Value + "'");
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_WORK_INST_DETAIL ");
                        sb.AppendLine("    where W_INST_DATE = '" + work_date + "' ");
                        sb.AppendLine("     and W_INST_CD = '" + txt_work_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", work_date);
                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@INST_AMT", txt_inst_amt);
                sCommand.Parameters.AddWithValue("@DELIVERY_DATE", deliver_req_date);
                sCommand.Parameters.AddWithValue("@LINE_CD", cmb_line);
                sCommand.Parameters.AddWithValue("@WORKER_CD", cmb_worker);
                sCommand.Parameters.AddWithValue("@INST_NOTICE", txt_inst_notice);
                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int update_Work_Flow(
              string txt_lot_no
            , string txt_item_cd
            , conDataGridView[] dgv
            , Label[] lbl_flow_cd
            , Label[] lbl_flow_seq
            , Label[] lbl_item_iden
            , int flow_cnt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_FLOW set");
                sb.AppendLine("       UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("      ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                for (int i = 0; i < flow_cnt; i++) //제품 공정 마지막 단계까지 ..  
                {
                    if (dgv[i].Rows.Count > 0)
                    {
                        for (int j = 0; j < dgv[i].Rows.Count; j++)
                        {
                            string txt_f_step = (string)dgv[i].Rows[j].Cells[7].Value;
                            if (txt_f_step == "" || txt_f_step == null)
                            {
                                sb.AppendLine("insert into F_WORK_FLOW_DETAIL(");
                                sb.AppendLine("      LOT_NO ");
                                sb.AppendLine("      ,LOT_SUB ");
                                sb.AppendLine("      ,F_STEP ");
                                sb.AppendLine("      ,FLOW_CD ");
                                sb.AppendLine("      ,SEQ ");
                                sb.AppendLine("      ,F_SUB_DATE ");
                                sb.AppendLine("      ,F_SUB_AMT ");
                                sb.AppendLine("      ,LOSS ");
                                sb.AppendLine("      ,POOR_CD ");
                                sb.AppendLine("      ,POOR_AMT ");
                                sb.AppendLine("      ,COMPLETE_YN ");
                                sb.AppendLine("      ,CHECK_YN ");
                                sb.AppendLine("      ,ITEM_CHECK_YN ");
                                sb.AppendLine("      ,INSTAFF ");
                                sb.AppendLine("      ,INTIME ");
                                sb.AppendLine("      ,COMMENT ");
                                sb.AppendLine(" ) values ( ");
                                sb.AppendLine("      '" + (string)dgv[i].Rows[j].Cells[0].Value + "' ");
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[1].Value + "' ");
                                sb.AppendLine("      , '" + (i + 1) + "' ");
                                sb.AppendLine("      , '" + lbl_flow_cd[i].Text.ToString() + "' ");
                                sb.AppendLine("      , '" + lbl_flow_seq[i].Text.ToString() + "' ");
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[2].Value + "' ");
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[3].Value).Replace(",", "") + "' ");
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "") + "' ");
                                if (dgv[i].Rows[j].Cells[5].Value == null)
                                {
                                    dgv[i].Rows[j].Cells[5].Value = "";
                                }
                                sb.AppendLine("      , '" + (string)dgv[i].Rows[j].Cells[5].Value + "' "); //POOR_CD
                                sb.AppendLine("      , '" + ((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", "") + "' "); //POOR_AMT
                                sb.AppendLine("      , 'N' ");
                                sb.AppendLine("      , 'S' "); //S-> 대기 
                                sb.AppendLine("      , 'S' "); //S-> 대기 
                                //sb.AppendLine("      , (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '" + lbl_flow_cd[i].Text.ToString() + "') ");
                                sb.AppendLine("      , '" + Common.p_strStaffNo + "' ");
                                sb.AppendLine("      , convert(varchar, getdate(), 120) ");
                                sb.AppendLine("      ,'' ");
                                sb.AppendLine("      ) ");
                            }
                            else
                            {
                                sb.AppendLine("update F_WORK_FLOW_DETAIL set");
                                sb.AppendLine("       F_SUB_DATE = '" + (string)dgv[i].Rows[j].Cells[2].Value + "' ");
                                sb.AppendLine("      ,F_SUB_AMT = '" + ((string)dgv[i].Rows[j].Cells[3].Value).Replace(",", "") + "' ");
                                sb.AppendLine("      ,LOSS = '" + ((string)dgv[i].Rows[j].Cells[4].Value).Replace(",", "") + "' ");
                                if (dgv[i].Rows[j].Cells[5].Value == null)
                                {
                                    dgv[i].Rows[j].Cells[5].Value = "";
                                }
                                sb.AppendLine("      ,POOR_CD = '" + (string)dgv[i].Rows[j].Cells[5].Value + "' ");
                                sb.AppendLine("      ,POOR_AMT = '" + ((string)dgv[i].Rows[j].Cells[6].Value).Replace(",", "") + "' "); //POOR_AMT
                                //sb.AppendLine("      ,CHECK_YN = (select FLOW_CHK_YN from N_FLOW_CODE where FLOW_CD = '" + lbl_flow_cd[i].Text.ToString() + "') ");
                                sb.AppendLine("      ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                                sb.AppendLine("      ,UPTIME = convert(varchar, getdate(), 120) ");
                                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");
                                sb.AppendLine(" and LOT_SUB = '" + (string)dgv[i].Rows[j].Cells[1].Value + "' ");
                                sb.AppendLine(" and F_STEP = '" + (i + 1) + "' ");
                            }
                        }
                    }
                }

                bool chk = false;
                int input_amt = 0;
                for (int i = 0; i < flow_cnt; i++)
                {
                    if (lbl_item_iden[i].Text.ToString().Equals("Y"))
                    {
                        chk = true;
                        break;
                    }

                }

                if (chk)  //제품식별표가 Y
                {
                    string item_date = flow_date;
                    for (int i = 0; i < dgv[flow_cnt - 1].Rows.Count; i++)
                    {
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + " =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                        sb.AppendLine("where INPUT_DATE = '" + item_date + "' ");

                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " =count(*) from F_ITEM_INPUT ");
                        sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");
                        sb.AppendLine("     and LOT_SUB = '" + (string)dgv[flow_cnt - 1].Rows[i].Cells[1].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " = 0)");
                        sb.AppendLine("     insert into F_ITEM_INPUT(");
                        sb.AppendLine("         INPUT_DATE ");
                        sb.AppendLine("         ,INPUT_CD ");
                        sb.AppendLine("         ,ITEM_CD ");
                        sb.AppendLine("         ,LOT_NO ");
                        sb.AppendLine("         ,LOT_SUB ");
                        sb.AppendLine("         ,F_STEP ");
                        sb.AppendLine("         ,FLOW_CD ");
                        sb.AppendLine("         ,INPUT_AMT ");
                        sb.AppendLine("         ,INSTAFF ");
                        sb.AppendLine("         ,INTIME ");
                        sb.AppendLine("         ,CURR_AMT ");
                        sb.AppendLine("         ,COMPLETE_YN ");
                        sb.AppendLine("     ) values ( ");
                        sb.AppendLine("         '" + item_date + "' ");
                        sb.AppendLine("         ,@seq" + i + " ");
                        sb.AppendLine("         , '" + txt_item_cd + "' ");
                        sb.AppendLine("         , '" + txt_lot_no + "' ");
                        sb.AppendLine("         , '" + (string)dgv[flow_cnt - 1].Rows[i].Cells[1].Value + "' ");
                        sb.AppendLine("         , '" + (flow_cnt).ToString() + "' "); //f_step
                        sb.AppendLine("         , '" + lbl_flow_cd[flow_cnt - 1].Text.ToString() + "' "); //flow_cd
                        sb.AppendLine("         , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                        //sb.AppendLine("         ," + input_amt + " ");
                        sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                        sb.AppendLine("         , '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                        sb.AppendLine("         , 'N'");
                        sb.AppendLine("      ) ");
                        sb.AppendLine("ELSE ");
                        sb.AppendLine("     update F_ITEM_INPUT ");
                        sb.AppendLine("     set INPUT_AMT = '" + ((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", "") + "' ");
                        sb.AppendLine("         ,F_STEP = '" + (flow_cnt).ToString() + "', FLOW_CD = '" + lbl_flow_cd[flow_cnt - 1].Text.ToString() + "' ");
                        sb.AppendLine("     where LOT_NO = '" + txt_lot_no + "' ");
                        sb.AppendLine("     and LOT_SUB = '" + (string)dgv[flow_cnt - 1].Rows[i].Cells[1].Value + "' ");

                        //input_amt += int.Parse(((string)dgv[flow_cnt - 1].Rows[i].Cells[3].Value).Replace(",", ""));
                    }

                    //string item_date = flow_date;

                    //sb.AppendLine("declare @seq int ");
                    //sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                    //sb.AppendLine("where INPUT_DATE = '" + item_date + "' ");

                    //sb.AppendLine("declare @chk int ");
                    //sb.AppendLine("select @chk =count(*) from F_ITEM_INPUT ");
                    //sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                    //sb.AppendLine("IF(@chk = 0)");
                    //sb.AppendLine("     insert into F_ITEM_INPUT(");
                    //sb.AppendLine("         INPUT_DATE ");
                    //sb.AppendLine("         ,INPUT_CD ");
                    //sb.AppendLine("         ,ITEM_CD ");
                    //sb.AppendLine("         ,LOT_NO ");
                    //sb.AppendLine("         ,INPUT_AMT ");
                    //sb.AppendLine("         ,INSTAFF ");
                    //sb.AppendLine("         ,INTIME ");
                    //sb.AppendLine("     ) values ( ");
                    //sb.AppendLine("         '" + item_date + "' ");
                    //sb.AppendLine("         ,@seq ");
                    //sb.AppendLine("         ,'" + txt_item_cd + "' ");
                    //sb.AppendLine("         ,'" + txt_lot_no + "' ");
                    //sb.AppendLine("         ," + input_amt + " ");
                    //sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                    //sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                    //sb.AppendLine("      ) ");
                    //sb.AppendLine("ELSE ");
                    //sb.AppendLine("     update F_ITEM_INPUT ");
                    //sb.AppendLine("     set INPUT_AMT = " + input_amt + " ");
                    //sb.AppendLine("     where LOT_NO = '" + txt_lot_no +"' ");

                }
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;

            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int update_Work_Flow_Complete(string txt_lot_no, double poor_cnt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                string flow_date = DateTime.Today.ToString("yyyy-MM-dd");
                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_FLOW set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                sb.AppendLine("update F_WORK_FLOW_DETAIL set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                sb.AppendLine("update F_WORK_INST set");
                sb.AppendLine("       COMPLETE_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                //불량 작업지시서 
                if (poor_cnt > 0)
                {
                    string curr_lot_no = flow_date.ToString().Replace("-", "");
                    curr_lot_no = curr_lot_no.Substring(2).ToString();


                    sb.AppendLine(" declare @seq int ");
                    sb.AppendLine(" select @seq = ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                    sb.AppendLine(" where W_INST_DATE = '" + flow_date + "' ");

                    sb.AppendLine(" insert into F_WORK_INST(");
                    sb.AppendLine("         W_INST_DATE ");
                    sb.AppendLine("        ,W_INST_CD ");
                    sb.AppendLine("        ,LOT_NO ");
                    sb.AppendLine("        ,ITEM_CD ");
                    sb.AppendLine("        ,CUST_CD ");
                    sb.AppendLine("        ,INST_AMT ");
                    sb.AppendLine("        ,COMPLETE_YN ");
                    sb.AppendLine("        ,DELIVERY_DATE ");
                    sb.AppendLine("        ,PLAN_NUM ");
                    sb.AppendLine("        ,PLAN_ITEM ");
                    sb.AppendLine("        ,CHARGE_AMT ");
                    sb.AppendLine("        ,PACK_AMT ");
                    sb.AppendLine("        ,RAW_OUT_YN ");
                    sb.AppendLine("        ,POOR_WORK_YN ");
                    sb.AppendLine("        ,TOP_LOT_NO ");
                    sb.AppendLine("        ,INSTAFF ");
                    sb.AppendLine("        ,INTIME ");
                    sb.AppendLine("        )");

                    sb.AppendLine(" select '" + flow_date + "' ");

                    sb.AppendLine("        ,@seq      ");
                    sb.AppendLine("        ,'" + curr_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                    sb.AppendLine("        ,ITEM_CD      ");
                    sb.AppendLine("        ,CUST_CD ");
                    sb.AppendLine("        ," + poor_cnt + " ");
                    sb.AppendLine("        ,'N' ");
                    sb.AppendLine("        ,DELIVERY_DATE ");
                    sb.AppendLine("        ,PLAN_NUM ");
                    sb.AppendLine("        ,PLAN_ITEM ");
                    sb.AppendLine("        ,CHARGE_AMT ");
                    sb.AppendLine("        ,PACK_AMT ");
                    sb.AppendLine("        ,'Y' ");
                    sb.AppendLine("        ,'Y' ");
                    sb.AppendLine("        ,'" + txt_lot_no + "' ");
                    sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" from F_WORK_INST ");
                    sb.AppendLine(" where LOT_NO ='" + txt_lot_no + "' ");

                    //작업지시 상세 내역 

                    sb.AppendLine(" insert into F_WORK_INST_DETAIL(");
                    sb.AppendLine("         W_INST_DATE ");
                    sb.AppendLine("        ,W_INST_CD ");
                    sb.AppendLine("        ,SEQ ");
                    sb.AppendLine("        ,LOT_NO ");
                    sb.AppendLine("        ,RAW_MAT_CD ");
                    sb.AppendLine("        ,SOYO_AMT ");
                    sb.AppendLine("        ,TOTAL_AMT ");
                    sb.AppendLine("        ,INSTAFF ");
                    sb.AppendLine("        ,INTIME ");
                    sb.AppendLine("        ) ");

                    sb.AppendLine(" select '" + flow_date + "' ");
                    sb.AppendLine("        ,@seq      ");
                    sb.AppendLine("        ,SEQ      ");
                    sb.AppendLine("        ,'" + curr_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                    sb.AppendLine("        ,RAW_MAT_CD ");
                    sb.AppendLine("        ,SOYO_AMT ");
                    sb.AppendLine("        ," + poor_cnt + " * SOYO_AMT");
                    sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" from F_WORK_INST_DETAIL ");
                    sb.AppendLine(" where LOT_NO ='" + txt_lot_no + "' ");

                    sb.AppendLine(" declare @chk int ");
                    sb.AppendLine(" select @chk =count(*) from F_WORK_INST_HALF_DETAIL  ");
                    sb.AppendLine(" where LOT_NO ='" + txt_lot_no + "' ");

                    sb.AppendLine(" IF(@chk > 0) ");
                    sb.AppendLine(" insert into F_WORK_INST_HALF_DETAIL(W_INST_DATE,W_INST_CD,SEQ,LOT_NO,HALF_ITEM_CD,SOYO_AMT,TOTAL_AMT,INSTAFF,INTIME) ");
                    sb.AppendLine(" select '" + flow_date + "' ");
                    sb.AppendLine("        ,@seq ");
                    sb.AppendLine("        ,SEQ ");
                    sb.AppendLine("        ,'" + curr_lot_no + "'+RIGHT('000'+ convert(varchar, @seq), 4) ");
                    sb.AppendLine("        ,HALF_ITEM_CD ");
                    sb.AppendLine("        ,SOYO_AMT ");
                    sb.AppendLine("        ," + poor_cnt + " * SOYO_AMT");
                    sb.AppendLine("         , '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("         , convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" from F_WORK_INST_HALF_DETAIL ");
                    sb.AppendLine(" where LOT_NO ='" + txt_lot_no + "' ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_F_WORK_FLOW_COMPLETE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine("error" + e.ToString());
                return 9;
            }
        }

        public int update_Work_Raw_Out_Yn(string txt_lot_no)  //condition = 현황 , dt = detail
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                sb = new StringBuilder();

                sb.AppendLine("update F_WORK_INST set");
                sb.AppendLine("       RAW_OUT_YN = 'Y' ");
                sb.AppendLine("where LOT_NO = '" + txt_lot_no + "' ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_WORK_INST_RAW_OUT");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine("error" + e.ToString());
                return 9;
            }
        }

        public int updateItemOut(
              string out_date
            , string out_cd
            , conDataGridView item_out_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                //for (int i = 0; i < in_rm_dgv.Rows.Count; i++)
                //{
                //    sb.AppendLine(" select A.ORDER_DATE,A.ORDER_CD,B.SEQ,C.ORDER_AMT, C.INPUT_AMT");
                //    sb.AppendLine(" FROM F_ORDER A ");
                //    sb.AppendLine(" LEFT OUTER JOIN F_ORDER_DETAIL B  ");
                //    sb.AppendLine(" ON A.ORDER_DATE = B.ORDER_DATE ");
                //    sb.AppendLine("     AND A.ORDER_CD = B.ORDER_CD ");
                //    sb.AppendLine(" LEFT OUTER JOIN(	 ");
                //    sb.AppendLine("                     SELECT AA.ORDER_DATE	 ");
                //    sb.AppendLine("                           ,AA.ORDER_CD       ");
                //    sb.AppendLine("                           ,AA.SEQ ");
                //    sb.AppendLine("                           ,FLOOR(ISNULL(AA.TOTAL_AMT,0)) AS ORDER_AMT ");
                //    sb.AppendLine("                           ,ISNULL(SUM(BB.TOTAL_AMT),0) AS INPUT_AMT ");
                //    sb.AppendLine("                           , ISNULL(AA.TOTAL_AMT,0)-ISNULL(SUM(BB.TOTAL_AMT),0) AS NO_INPUT_AMT ");
                //    sb.AppendLine("                     FROM F_ORDER_DETAIL AA ");
                //    sb.AppendLine("                     LEFT OUTER JOIN F_RAW_DETAIL BB ");
                //    sb.AppendLine("                     ON AA.ORDER_DATE = BB.ORDER_DATE ");
                //    sb.AppendLine("                         AND AA.ORDER_CD = BB.ORDER_CD ");
                //    sb.AppendLine("                         AND AA.SEQ = BB.ORDER_SEQ ");
                //    sb.AppendLine("                     GROUP BY AA.ORDER_DATE,AA.ORDER_CD,AA.SEQ,AA.TOTAL_AMT)C ");
                //    sb.AppendLine(" ON A.ORDER_DATE = C.ORDER_DATE  ");
                //    sb.AppendLine("     AND A.ORDER_CD = C.ORDER_CD ");
                //    sb.AppendLine("     AND B.SEQ = C.SEQ  ");
                //    sb.AppendLine(" WHERE A.ORDER_DATE = '" + in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + "' ");
                //    sb.AppendLine("      AND A.ORDER_CD = '" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "' ");
                //    sb.AppendLine("      AND B.SEQ = '" + in_rm_dgv.Rows[i].Cells["ORDER_SEQ"].Value + "' ");

                //    sCommand = new SqlCommand(sb.ToString());
                //    if (sCommand.CommandText.Equals(null))
                //    {
                //        wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                //        return 2;
                //    }
                //    DataTable dt = wAdo.SqlCommandSelect(sCommand);

                //    double order_amt = double.Parse(dt.Rows[0]["ORDER_AMT"].ToString());
                //    double input_amt = double.Parse(dt.Rows[0]["INPUT_AMT"].ToString());
                //    double grd_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["TOTAL_AMT"].Value).Replace(",", ""));
                //    double grd_ord_total_amt = double.Parse(((string)in_rm_dgv.Rows[i].Cells["OLD_TOTAL_AMT"].Value)); //백업은 콤마 정의 안함

                //    // 발주수량 + 입력하기 전 수량백업 값 - 입고수량 - 입력한 수량 값 = 결과값

                //    double rs_num = order_amt + grd_ord_total_amt - input_amt - grd_total_amt;
                //    if (rs_num < 0)
                //    {
                //        StringBuilder alert_sb = new StringBuilder();
                //        alert_sb.AppendLine(i + 1 + "번째 줄 원부재료에 포함된 발주번호 \n ");
                //        alert_sb.AppendLine(in_rm_dgv.Rows[i].Cells["ORDER_DATE"].Value + " [" + in_rm_dgv.Rows[i].Cells["ORDER_CD"].Value + "] 의 발주수량보다 더 많게 입력하셨습니다. \n");
                //        alert_sb.AppendLine("그대로 저장하시겠습니까? (저장:예 / 취소:아니오)");

                //        DialogResult msgOk = MessageBox.Show(alert_sb.ToString(), "삭제여부", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                //        if (msgOk == DialogResult.No)
                //        {
                //            return 3;
                //        }
                //    }
                //}

                sb = new StringBuilder();
                sb.AppendLine("update F_ITEM_OUT set");
                sb.AppendLine("      UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                sb.AppendLine(" where OUTPUT_DATE = @OUTPUT_DATE and OUTPUT_CD= @OUTPUT_CD ");

                if (item_out_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_out_dgv.Rows.Count; i++)
                    {
                        string txt_seq = (string)item_out_dgv.Rows[i].Cells["SEQ"].Value;
                        if (txt_seq == "" || txt_seq == null)
                        {

                            sb.AppendLine("declare @out_seq" + i + " int ");
                            sb.AppendLine("select @out_seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ITEM_OUT_DETAIL ");
                            sb.AppendLine("where OUTPUT_DATE = '" + out_date + "' ");
                            sb.AppendLine("and OUTPUT_CD = '" + out_cd + "' ");

                            sb.AppendLine("insert into F_ITEM_OUT_DETAIL(");
                            sb.AppendLine("     OUTPUT_DATE ");
                            sb.AppendLine("     ,OUTPUT_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,LOT_NO ");
                            sb.AppendLine("     ,LOT_SUB ");
                            sb.AppendLine("     ,ITEM_CD ");
                            sb.AppendLine("     ,UNIT_CD ");
                            sb.AppendLine("     ,OUTPUT_AMT ");
                            sb.AppendLine("     ,PRICE ");
                            sb.AppendLine("     ,TOTAL_MONEY ");
                            sb.AppendLine("     ,INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,CUST_CD ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine("  )values ( ");
                            sb.AppendLine("     '" + out_date + "' ");
                            sb.AppendLine("     ,'" + out_cd + "' ");
                            sb.AppendLine("     ,@out_seq" + i + " ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_NO"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_LOT_SUB"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_ITEM_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_UNIT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_DATE"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_INPUT_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + item_out_dgv.Rows[i].Cells["O_CUST_CD"].Value + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120)  ");
                            sb.AppendLine("  )");
                        }
                        else
                        {
                            sb.AppendLine("update F_ITEM_OUT_DETAIL set");
                            sb.AppendLine("       OUTPUT_AMT =  '" + ((string)item_out_dgv.Rows[i].Cells["OUTPUT_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,PRICE =  '" + ((string)item_out_dgv.Rows[i].Cells["PRICE"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,TOTAL_MONEY =  '" + ((string)item_out_dgv.Rows[i].Cells["TOTAL_MONEY"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("      ,UPTIME =  convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" where OUTPUT_DATE = '" + out_date + "' ");
                            sb.AppendLine(" and OUTPUT_CD = '" + out_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + item_out_dgv.Rows[i].Cells["SEQ"].Value + "'");
                        }
                    }
                }

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from F_ITEM_OUT_DETAIL ");
                        sb.AppendLine("    where OUTPUT_DATE = '" + out_date + "' ");
                        sb.AppendLine("     and OUTPUT_CD = '" + out_cd + "' ");
                        sb.AppendLine("     and SEQ = '" + del_dgv.Rows[i].Cells["SEQ"].Value + "' ");
                    }
                }

                sCommand = new SqlCommand(sb.ToString());


                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@OUTPUT_CD", out_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_OUTPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //공정검사 항목 수정 

        //공정검사 항목 
        public int updateFlowChk(
              string txt_item_cd
            , string txt_flow_cd
            , string txt_item_img
            , string txt_measure_cnt
            , conDataGridView flow_chk_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_FLOW_CHK ");
                sb.AppendLine("set MEASURE_CNT = " + txt_measure_cnt + "  ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                sb.AppendLine("     and FLOW_CD = '" + txt_flow_cd + "' ");

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_FLOW_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine("     and CHK_CD = '" + del_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                    }
                }

                if (flow_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_FLOW_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_FLOW_CHK_STAN ");
                        sb.AppendLine("set CHK_LOC = '" + (string)flow_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("   ,EVA_GUBUN = '" + (string)flow_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("   ,RULE_SIZE = '" + (string)flow_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("   ,RULE_LIMIT = '" + (string)flow_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("   ,MEASURE_APP = '" + (string)flow_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("   ,CHK_METHOD = '" + (string)flow_chk_dgv.Rows[i].Cells["CHK_METHOD"].Value + "' ");
                        sb.AppendLine("   ,LOWER_SIZE = " + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SIZE = " + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,LOWER_SELF = " + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SELF = " + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and FLOW_CD = '" + txt_flow_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_FLOW_CHK_STAN(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,FLOW_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,EVA_GUBUN ");
                        sb.AppendLine("     ,CHK_LOC ");
                        sb.AppendLine("     ,RULE_SIZE ");
                        sb.AppendLine("     ,RULE_LIMIT ");
                        sb.AppendLine("     ,MEASURE_APP ");
                        sb.AppendLine("     ,CHK_METHOD ");
                        sb.AppendLine("     ,LOWER_SIZE ");
                        sb.AppendLine("     ,UPPER_SIZE ");
                        sb.AppendLine("     ,LOWER_SELF ");
                        sb.AppendLine("     ,UPPER_SELF ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,'" + txt_flow_cd + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (string)flow_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("     ,'" + flow_chk_dgv.Rows[i].Cells["CHK_METHOD"].Value + "' ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)flow_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //제품검사기준 항목 
        public int updateItemChk(
              string txt_item_cd
            , string txt_item_img
            , string txt_measure_cnt
            , conDataGridView item_chk_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_ITEM_CHK ");
                sb.AppendLine("set MEASURE_CNT = " + txt_measure_cnt + "  ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_ITEM_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine("     and CHK_CD = '" + del_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                    }
                }

                if (item_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < item_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_ITEM_CHK_STAN ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_ITEM_CHK_STAN ");
                        sb.AppendLine("set CHK_LOC = '" + (string)item_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("   ,EVA_GUBUN = '" + (string)item_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("   ,RULE_SIZE = '" + (string)item_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("   ,RULE_LIMIT = '" + (string)item_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("   ,MEASURE_APP = '" + (string)item_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("   ,CHK_INTERVAL = '" + (string)item_chk_dgv.Rows[i].Cells["CHK_INTERVAL"].Value + "' ");
                        sb.AppendLine("   ,LOWER_SIZE = " + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SIZE = " + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,LOWER_SELF = " + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("   ,UPPER_SELF = " + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_ITEM_CHK_STAN(");
                        sb.AppendLine("     ITEM_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,EVA_GUBUN ");
                        sb.AppendLine("     ,CHK_LOC ");
                        sb.AppendLine("     ,RULE_SIZE ");
                        sb.AppendLine("     ,RULE_LIMIT ");
                        sb.AppendLine("     ,MEASURE_APP ");
                        sb.AppendLine("     ,CHK_INTERVAL ");
                        sb.AppendLine("     ,LOWER_SIZE ");
                        sb.AppendLine("     ,UPPER_SIZE ");
                        sb.AppendLine("     ,LOWER_SELF ");
                        sb.AppendLine("     ,UPPER_SELF ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_item_cd + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + (string)item_chk_dgv.Rows[i].Cells["EVA_GUBUN"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_LOC"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["RULE_SIZE"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["RULE_LIMIT"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["MEASURE_APP"].Value + "' ");
                        sb.AppendLine("     ,'" + item_chk_dgv.Rows[i].Cells["CHK_INTERVAL"].Value + "' ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SIZE"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["LOWER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ," + ((string)item_chk_dgv.Rows[i].Cells["UPPER_SELF"].Value).Replace(",", "") + " ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //수입검사 항목 
        public int updateRawChk(
              string txt_raw_mat_cd
            , string txt_control_no
            , conDataGridView raw_chk_dgv
            , DataGridView del_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("update N_RAW_CHK ");
                sb.AppendLine("set CONTROL_NO = '" + txt_control_no + "'  ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");

                if (del_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < del_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("delete from N_RAW_CHK_STAN ");
                        sb.AppendLine("    where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("     and CHK_CD = '" + del_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                    }
                }

                if (raw_chk_dgv.Rows.Count > 0)
                {
                    for (int i = 0; i < raw_chk_dgv.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @chk" + i + " int ");
                        sb.AppendLine("select @chk" + i + " = count(*) from N_RAW_CHK_STAN ");
                        sb.AppendLine("where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + raw_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("IF(@chk" + i + " > 0)");
                        sb.AppendLine("update N_RAW_CHK_STAN ");
                        sb.AppendLine("set CHK_STAN_VALUE = '" + (string)raw_chk_dgv.Rows[i].Cells["CHK_STAN_VALUE"].Value + "' ");
                        sb.AppendLine("where RAW_MAT_CD = '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine(" and CHK_CD = '" + raw_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                        sb.AppendLine("ELSE ");
                        sb.AppendLine("insert into N_RAW_CHK_STAN(");
                        sb.AppendLine("     RAW_MAT_CD ");
                        sb.AppendLine("     ,CHK_CD ");
                        sb.AppendLine("     ,CHK_STAN_VALUE ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("  )values ( ");
                        sb.AppendLine("     '" + txt_raw_mat_cd + "' ");
                        sb.AppendLine("     ,'" + raw_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     ,'" + raw_chk_dgv.Rows[i].Cells["CHK_STAN_VALUE"].Value + "' ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  )");
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //공정검사성적서 수정
        public int updateFlowChkExam(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , int startIdx
            , Label lblSearch
            , byte[] img
            , int img_size
            , DataGridView flow_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                if (img_size > 0)
                {
                    sb.AppendLine(" update F_FLOW_CHK ");
                    sb.AppendLine(" set MAP = @MAP , MAP_SIZE = @MAP_SIZE ");
                    sb.AppendLine(" where LOT_NO = @LOT_NO ");
                    sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                    sb.AppendLine("     and F_STEP = @F_STEP ");
                }
                //else 
                //{
                //    sb.AppendLine(" set MAP = null , MAP_SIZE = 0 ");
                //}

                for (int i = 0; i < flow_chk_dgv.Rows.Count; i++)
                {
                    if (flow_chk_dgv.Rows[i].Cells["GRADE"].Value == null)
                    {
                        flow_chk_dgv.Rows[i].Cells["GRADE"].Value = "";
                    }

                    sb.AppendLine("update F_FLOW_CHK_RST ");
                    sb.AppendLine("set GRADE = '" + (string)flow_chk_dgv.Rows[i].Cells["GRADE"].Value + "' ");
                    sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                    sb.AppendLine(" where LOT_NO = @LOT_NO ");
                    sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                    sb.AppendLine("     and F_STEP = @F_STEP ");
                    sb.AppendLine("     and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                    int k = 1;
                    for (int j = startIdx; j < flow_chk_dgv.Columns.Count; j++)
                    {
                        sb.AppendLine("update F_FLOW_CHK_DETAIL");
                        sb.AppendLine("set   CHK_VALUE = '" + flow_chk_dgv.Rows[i].Cells["CHK" + k.ToString()].Value + "'  ");
                        sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" where LOT_NO = @LOT_NO ");
                        sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                        sb.AppendLine("     and F_STEP = @F_STEP ");
                        sb.AppendLine("     and CHK_CD = '" + flow_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = " + k + " ");
                        k++;
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@MAP", img);
                    sCommand.Parameters.AddWithValue("@MAP_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //제품검사성적서 수정
        public int updateItemChkExam(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , int startIdx
            , Label lblSearch
            , byte[] img
            , int img_size
            , DataGridView item_chk_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                if (img_size > 0)
                {
                    sb.AppendLine(" update F_ITEM_CHK ");
                    sb.AppendLine(" set MAP = @MAP , MAP_SIZE = @MAP_SIZE ");
                    sb.AppendLine(" where LOT_NO = @LOT_NO ");
                    sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                    sb.AppendLine("     and F_STEP = @F_STEP ");
                }
                //else
                //{
                //    sb.AppendLine(" set MAP = null , MAP_SIZE = 0 ");
                //}

                for (int i = 0; i < item_chk_dgv.Rows.Count; i++)
                {
                    if (item_chk_dgv.Rows[i].Cells["GRADE"].Value == null)
                    {
                        item_chk_dgv.Rows[i].Cells["GRADE"].Value = "";
                    }

                    sb.AppendLine("update F_ITEM_CHK_RST ");
                    sb.AppendLine("set GRADE = '" + (string)item_chk_dgv.Rows[i].Cells["GRADE"].Value + "' ");
                    sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");

                    sb.AppendLine(" where LOT_NO = @LOT_NO ");
                    sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                    sb.AppendLine("     and F_STEP = @F_STEP ");
                    sb.AppendLine("     and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");

                    int k = 1;
                    for (int j = startIdx; j < item_chk_dgv.Columns.Count; j++)
                    {
                        sb.AppendLine("update F_ITEM_CHK_DETAIL");
                        sb.AppendLine("set   CHK_VALUE = '" + item_chk_dgv.Rows[i].Cells["CHK" + k.ToString()].Value + "'  ");
                        sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" where LOT_NO = @LOT_NO ");
                        sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                        sb.AppendLine("     and F_STEP = @F_STEP ");
                        sb.AppendLine("     and CHK_CD = '" + item_chk_dgv.Rows[i].Cells["CHK_CD"].Value + "' ");
                        sb.AppendLine("     and SEQ = " + k + " ");
                        k++;
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@MAP", img);
                    sCommand.Parameters.AddWithValue("@MAP_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //공정검사성적서 합격여부
        public int updateFlowChkPass(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , string pass_yn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine(" update F_FLOW_CHK ");
                sb.AppendLine(" set PASS_YN = @PASS_YN ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                sb.AppendLine(" update F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" set CHECK_YN = 'Y' ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@PASS_YN", pass_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //제품검사성적서 합격여부
        public int updateItemChkPass(
              string txt_lot_no
            , string txt_lot_sub
            , string txt_f_step
            , string pass_yn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine(" update F_ITEM_CHK ");
                sb.AppendLine(" set PASS_YN = @PASS_YN ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                sb.AppendLine(" update F_WORK_FLOW_DETAIL ");
                sb.AppendLine(" set ITEM_CHECK_YN = 'Y' ");
                sb.AppendLine(" where LOT_NO = @LOT_NO ");
                sb.AppendLine("     and LOT_SUB = @LOT_SUB ");
                sb.AppendLine("     and F_STEP = @F_STEP ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);
                sCommand.Parameters.AddWithValue("@LOT_SUB", txt_lot_sub);
                sCommand.Parameters.AddWithValue("@F_STEP", txt_f_step);
                sCommand.Parameters.AddWithValue("@PASS_YN", pass_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_ITEM_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //수입검사 합격여부
        public int updateRawChkPass(
              string txt_input_date
            , string txt_input_cd
            , string txt_seq
            , string pass_yn
            , decimal final_amt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine(" update F_RAW_CHK ");
                sb.AppendLine(" set PASS_YN = @PASS_YN  ");
                sb.AppendLine(" where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     and INPUT_CD = @INPUT_CD ");
                sb.AppendLine("     and SEQ = @SEQ ");

                sb.AppendLine(" update F_RAW_DETAIL ");
                sb.AppendLine(" set CHECK_YN = 'Y' , TOTAL_AMT = " + final_amt + ", CURR_AMT = " + final_amt + "");
                sb.AppendLine(" where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("     and INPUT_CD = @INPUT_CD ");
                sb.AppendLine("     and SEQ = @SEQ ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);
                sCommand.Parameters.AddWithValue("@SEQ", txt_seq);
                sCommand.Parameters.AddWithValue("@PASS_YN", pass_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_RAW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //공정검사성적서 수정
        public int updateRawChkExam(
              string txt_input_date
            , string txt_input_cd
            , string txt_seq
            , string txt_raw_mat_cd
            , string txt_control_cd
            , string txt_part_no
            , string txt_chk_total_amt
            , string txt_pass_amt
            , string pri_non_pass_amt
            , string upd_com_amt
            , string final_non_pass_amt
            , string final_pass_amt
            , string comment
            , DataGridView rawStanGrid
            , DataGridView rawPoorGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("update F_RAW_CHK ");
                sb.AppendLine("set CONTROL_NO = @CONTROL_NO ");
                sb.AppendLine("     ,PART_NO = @PART_NO ");
                sb.AppendLine("     ,CHK_TOTAL_AMT = @CHK_TOTAL_AMT ");
                sb.AppendLine("     ,PASS_AMT = @PASS_AMT ");
                sb.AppendLine("     ,PRI_NON_PASS_AMT = @PRI_NON_PASS_AMT ");
                sb.AppendLine("     ,UPD_COM_AMT = @UPD_COM_AMT ");
                sb.AppendLine("     ,FINAL_NON_PASS_AMT = @FINAL_NON_PASS_AMT ");
                sb.AppendLine("     ,FINAL_PASS_AMT = @FINAL_PASS_AMT ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine(" and INPUT_CD = @INPUT_CD ");
                sb.AppendLine(" and SEQ = @SEQ ");

                if (rawStanGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < rawStanGrid.Rows.Count; i++)
                    {
                        sb.AppendLine("update F_RAW_CHK_RST ");
                        sb.AppendLine("set CHK_VALUE =  '" + rawStanGrid.Rows[i].Cells["CHK_VALUE"].Value.ToString() + "' ");
                        sb.AppendLine("where INPUT_DATE = '" + txt_input_date + "' ");
                        sb.AppendLine(" and INPUT_CD = '" + txt_input_cd + "' ");
                        sb.AppendLine(" and SEQ = '" + txt_seq + "' ");
                        sb.AppendLine(" and CHK_CD = '" + rawStanGrid.Rows[i].Cells["CHK_CD"].Value.ToString() + "' ");
                    }
                }

                if (rawPoorGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < rawPoorGrid.Rows.Count; i++)
                    {
                        if (rawPoorGrid.Rows[i].Cells["POOR_SEQ"] == null) Console.WriteLine(rawPoorGrid.Rows[i].Cells["POOR_SEQ"]);
                        if (rawPoorGrid.Rows[i].Cells["POOR_SEQ"].Value != null && (string)rawPoorGrid.Rows[i].Cells["POOR_SEQ"].Value != "")
                        {
                            sb.AppendLine("update F_RAW_CHK_POOR");
                            sb.AppendLine(" set  ");
                            if (rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value == null)
                            {
                                rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value = "";
                            }
                            if (rawPoorGrid.Rows[i].Cells["POOR_NM"].Value.ToString() == null)
                            {
                                rawPoorGrid.Rows[i].Cells["POOR_NM"].Value = "";
                            }
                            sb.AppendLine("     TYPE_CD = '" + rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value.ToString() + "' ");
                            sb.AppendLine("     ,POOR_NM = '" + rawPoorGrid.Rows[i].Cells["POOR_NM"].Value.ToString() + "' ");
                            sb.AppendLine("     ,PRI_NON_PASS_AMT = '" + ((string)rawPoorGrid.Rows[i].Cells["PRI_NON_PASS_AMT"].Value).Replace(",", "") + "'");
                            sb.AppendLine("     ,UPD_DETAIL = '" + rawPoorGrid.Rows[i].Cells["UPD_DETAIL"].Value.ToString() + "' ");
                            sb.AppendLine("     ,UPD_PASS_AMT = '" + ((string)rawPoorGrid.Rows[i].Cells["UPD_PASS_AMT"].Value).Replace(",", "") + "' ");
                            //sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                            sb.AppendLine("where INPUT_DATE = '" + txt_input_date + "' ");
                            sb.AppendLine(" and INPUT_CD = '" + txt_input_cd + "' ");
                            sb.AppendLine(" and SEQ = '" + txt_seq + "' ");
                            sb.AppendLine(" and POOR_SEQ = '" + rawPoorGrid.Rows[i].Cells["POOR_SEQ"].Value.ToString() + "' ");
                        }
                        else  //신규일 경우
                        {
                            sb.AppendLine("declare @p_seq" + i + " int ");
                            sb.AppendLine("select @p_seq" + i + " =ISNULL(MAX(POOR_SEQ),0)+1 from F_RAW_CHK_POOR ");
                            sb.AppendLine("where INPUT_DATE = '" + txt_input_date + "' ");
                            sb.AppendLine("     and INPUT_CD = '" + txt_input_cd + "' ");
                            sb.AppendLine("     and SEQ = '" + txt_seq + "' ");

                            sb.AppendLine("insert into F_RAW_CHK_POOR(");
                            sb.AppendLine("     INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,POOR_SEQ ");
                            sb.AppendLine("     ,TYPE_CD ");
                            sb.AppendLine("     ,POOR_NM ");
                            sb.AppendLine("     ,PRI_NON_PASS_AMT ");
                            sb.AppendLine("     ,UPD_DETAIL ");
                            sb.AppendLine("     ,UPD_PASS_AMT ");
                            //sb.AppendLine("     ,COMMENT ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine(" ) values ( ");
                            sb.AppendLine("      '" + txt_input_date + "' ");
                            sb.AppendLine("      ," + txt_input_cd + " ");
                            sb.AppendLine("      ," + txt_seq + " ");
                            sb.AppendLine("      ,@p_seq" + i + " ");
                            sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["POOR_TYPE"].Value.ToString() + "' ");
                            sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["POOR_NM"].Value.ToString() + "' ");
                            sb.AppendLine("      ,'" + ((string)rawPoorGrid.Rows[i].Cells["PRI_NON_PASS_AMT"].Value).Replace(",", "") + "' ");
                            sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["UPD_DETAIL"].Value.ToString() + "' ");
                            sb.AppendLine("      ,'" + ((string)rawPoorGrid.Rows[i].Cells["UPD_PASS_AMT"].Value).Replace(",", "") + "' ");
                            // sb.AppendLine("      ,'" + rawPoorGrid.Rows[i].Cells["COMMENT"].Value.ToString() + "' ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" ) ");
                        }
                    }
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);
                sCommand.Parameters.AddWithValue("@SEQ", txt_seq);
                sCommand.Parameters.AddWithValue("@CONTROL_NO", txt_control_cd);
                sCommand.Parameters.AddWithValue("@PART_NO", txt_part_no);
                sCommand.Parameters.AddWithValue("@CHK_TOTAL_AMT", txt_chk_total_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PASS_AMT", txt_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@PRI_NON_PASS_AMT", pri_non_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@UPD_COM_AMT", upd_com_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@FINAL_NON_PASS_AMT", final_non_pass_amt.Replace(",", ""));
                sCommand.Parameters.AddWithValue("@FINAL_PASS_AMT", final_pass_amt.Replace(",", ""));


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_FLOW_CHK_EXAM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateChkOmit(StringBuilder sb)  //condition = 현황 , dt = detail
        {
            try
            {
                wnAdo wAdo = new wnAdo();


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_CHK_OMIT");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine("error" + e.ToString());
                return 9;
            }
        }

        #endregion update
        public int deleteStaff(string txt_user_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_STAFF_CODE ");
                sb.AppendLine("    where STAFF_CD =@STAFF_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STAFF_CD", txt_user_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteDept(string txtDeptCd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_DEPT_CODE ");
                sb.AppendLine("    where DEPT_CD =@DEPT_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DEPT_CD", txtDeptCd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_DEPT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deletePos(string txt_pos_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_POS_CODE ");
                sb.AppendLine("    where POS_CD =@POS_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POS_CD", txt_pos_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_POS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteStor(string txt_stor_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_STORAGE_CODE ");
                sb.AppendLine("    where STORAGE_CD =@STORAGE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STORAGE_CD", txt_stor_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_STOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteType(string txt_type_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_TYPE_CODE ");
                sb.AppendLine("    where TYPE_CD =@TYPE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@TYPE_CD", txt_type_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_TYPE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteUnit(string txt_unit_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_UNIT_CODE ");
                sb.AppendLine("    where UNIT_CD =@UNIT_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@UNIT_CD", txt_unit_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_UNIT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteLine(string txt_line_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_LINE_CODE ");
                sb.AppendLine("    where LINE_CD =@LINE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LINE_CD", txt_line_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_LINE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deletePoor(string txt_poor_cd) // 불량 삭제
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_POOR_CODE ");
                sb.AppendLine("    where POOR_CD = @POOR_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@POOR_CD", txt_poor_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_POOR_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteChugJong(string txt_ChugJong_cd) // 축종 삭제
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_CHUGJONG_CODE ");
                sb.AppendLine("    where CHUGJONG_CD = @CHUGJONG_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CHUGJONG_CD", txt_ChugJong_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_CHUGJONG_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteExprt(string txt_exprt_date, string cmb_exprt_gbn) // 유통 일수 삭제
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_EXPRT_DATE ");
                sb.AppendLine("    where EXPRT_COUNT = @EXPRT_COUNT  ");
                sb.AppendLine("    and EXPRT_GUBUN = @EXPRT_GUBUN  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@EXPRT_COUNT", txt_exprt_date);
                sCommand.Parameters.AddWithValue("@EXPRT_GUBUN", cmb_exprt_gbn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_EXPRT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteCountry(string txt_country_cd) // 원산지 삭제
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_RAW_COUNTRY_CODE ");
                sb.AppendLine("    where COUNTRY_CD = @COUNTRY_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_COUNTRY_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteMeatClass(string txt_MeatClass_cd) // 육류 분류 삭제
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_MEAT_CLASS_CODE ");
                sb.AppendLine("    where CLASS_CD = @CLASS_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@CLASS_CD", txt_MeatClass_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_MEATCLASS_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteFrozen(string txt_Frozen_cd) // 냉장 냉동 삭제
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_FROZEN_CODE ");
                sb.AppendLine("    where FROZEN_CD = @FROZEN_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@FROZEN_CD", txt_Frozen_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FROZEN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteGrade(string txt_grade_cd) // 육류 등급 삭제
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_GRADE_CODE ");
                sb.AppendLine("    where GRADE_CD = @GRADE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@GRADE_CD", txt_grade_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_GRADE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteFlow(string txt_flow_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_FLOW_CODE ");
                sb.AppendLine("    where FLOW_CD = @FLOW_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteRaw(string txt_raw_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_RAW_CODE ");
                sb.AppendLine("    where RAW_MAT_CD = @RAW_MAT_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@RAW_MAT_CD", txt_raw_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_RAW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteCust(string txt_cust_cd, string cust_gbn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_CUST_CODE ");
                sb.AppendLine("    where CUST_CD = @CUST_CD ");
                sb.AppendLine("    and CUST_GUBUN = @CUST_GUBUN ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@CUST_GUBUN", cust_gbn);
                //cd랑 gubun이 주키 // 여기선 완전 삭제

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_CUST_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteChk(string txt_chk_cd, string chk_gbn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_CHK_CODE ");
                sb.AppendLine("    where CHK_CD = @CHK_CD ");
                sb.AppendLine("    and CHK_GUBUN = @CHK_GUBUN ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@CHK_CD", txt_chk_cd);
                sCommand.Parameters.AddWithValue("@CHK_GUBUN", chk_gbn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteItem(string txt_item_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_ITEM_CODE ");
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine("delete from N_ITEM_COMP "); //제품구성
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine("delete from N_ITEM_FLOW "); //공정구성
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine("delete from N_ITEM_COMP_HALF "); //반제품구성
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteFac(string txt_raw_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_FAC_CODE ");
                sb.AppendLine("    where FAC_CD = @FAC_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FAC_CD", txt_raw_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FAC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }


        public int deletePlan(string txt_plan_date, string plan_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_PLAN ");
                sb.AppendLine("    where PLAN_DATE = @PLAN_DATE ");
                sb.AppendLine("    and PLAN_CD = @PLAN_CD ");

                sb.AppendLine("delete from F_PLAN_DETAIL ");
                sb.AppendLine("    where PLAN_DATE = @PLAN_DATE ");
                sb.AppendLine("    and PLAN_CD = @PLAN_CD ");

                sb.AppendLine("delete from F_PLAN_GROUP ");
                sb.AppendLine("    where PLAN_DATE = @PLAN_DATE ");
                sb.AppendLine("    and PLAN_CD = @PLAN_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@PLAN_DATE", txt_plan_date);
                sCommand.Parameters.AddWithValue("@PLAN_CD", plan_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_PLAN_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteOrder(string txt_plan_date, string plan_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_ORDER ");
                sb.AppendLine("    where ORDER_DATE = @ORDER_DATE ");
                sb.AppendLine("    and ORDER_CD = @ORDER_CD ");

                sb.AppendLine("delete from F_ORDER_DETAIL ");
                sb.AppendLine("    where ORDER_DATE = @ORDER_DATE ");
                sb.AppendLine("    and ORDER_CD = @ORDER_CD ");

                //sb.AppendLine("delete from F_PLAN_DETAIL ");
                //sb.AppendLine("    where PLAN_DATE = @PLAN_DATE ");
                //sb.AppendLine("    and PLAN_CD = @PLAN_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ORDER_DATE", txt_plan_date);
                sCommand.Parameters.AddWithValue("@ORDER_CD", plan_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ORDER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteInput(string txt_input_date, string txt_input_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_RAW_INPUT ");
                sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("    and INPUT_CD = @INPUT_CD ");


                sb.AppendLine("delete from F_RAW_DETAIL ");
                sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("    and INPUT_CD = @INPUT_CD ");

                DataTable dt = fn_Rm_Input_List("WHERE A.INPUT_DATE = '" + txt_input_date + "' AND A.INPUT_CD ='" + txt_input_cd + "'  ");


                bool isCustDay = isCustDayTotal(txt_input_date, dt.Rows[0]["CUST_CD"].ToString()); //일별집계가 있는지 검사

                if (isCustDay)// 있으면
                {

                    sb.AppendLine("UPDATE N_CUST_CODE ");
                    sb.AppendLine("      SET BALANCE = BALANCE + (SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                    sb.AppendLine("    WHERE CUST_CD = '" + dt.Rows[0]["CUST_CD"].ToString() + "' ");


                    sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                    sb.AppendLine(" P_SUPPLY_MONEY = P_SUPPLY_MONEY - (SELECT ALL_SUPPLY_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                    sb.AppendLine(" ,P_TAX_MONEY = P_TAX_MONEY - (SELECT ALL_TAX_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                    sb.AppendLine(" ,P_TOTAL_MONEY = P_TOTAL_MONEY - (SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) ");
                    sb.AppendLine(" WHERE INPUT_DATE ='" + txt_input_date + "' AND CUST_CD = (SELECT CUST_CD FROM F_BUY WHERE INPUT_DATE ='" + txt_input_date + "'  AND INPUT_CD ='" + txt_input_cd + "'  )  ");


                    sb.AppendLine(CustDayTotal_Change_Balance_Today(txt_input_date, dt.Rows[0]["CUST_CD"].ToString()));

                    sb.AppendLine(CustDayTotal_Change_Balance(
                        txt_input_date
                        , dt.Rows[0]["CUST_CD"].ToString()
                        , "(SELECT ALL_TOTAL_MONEY FROM F_BUY WHERE INPUT_DATE = '" + txt_input_date + "'  AND INPUT_CD = '" + txt_input_cd + "' ) "
                        , "+"));
                }







                sb.AppendLine("delete from F_BUY ");
                sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("    and INPUT_CD = @INPUT_CD ");

                sb.AppendLine("delete from F_BUY_DETAIL ");
                sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("    and INPUT_CD = @INPUT_CD ");





                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_RAW_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception ex)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, ex.Message + " - " + ex.ToString());
                return 9;
            }
        }

        public DataTable isRawOut(string txt_input_date, string txt_input_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("SELECT * FROM F_RAW_OUTPUT ");
                sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("    and INPUT_CD = @INPUT_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return null;
                }


                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);


                return wAdo.SqlCommandSelect(sCommand);


            }
            catch (Exception ex)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, ex.Message + " - " + ex.ToString());
                return null;
            }
        }

        public int deleteWork(string txt_work_date, string txt_work_cd, bool isRawMoved)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                if (isRawMoved)
                {
                    DataTable dt = fn_Work_Inst_detail("WHERE W_INST_DATE = '" + txt_work_date + "'  AND W_INST_CD = '" + txt_work_cd + "'   ");
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            sb.AppendLine(" UPDATE F_RAW_DETAIL SET ");
                            sb.AppendLine(" REMAIN_AMT = REMAIN_AMT - " + dt.Rows[i]["REMAIN_AMT"].ToString() + "   ");
                            sb.AppendLine(" , CURR_AMT = CURR_AMT + " + dt.Rows[i]["LOSS_AMT"].ToString() + "  ");
                            sb.AppendLine(" WHERE INPUT_DATE = '" + dt.Rows[i]["INPUT_DATE"].ToString() + "'   ");
                            sb.AppendLine(" AND INPUT_CD = '" + dt.Rows[i]["INPUT_CD"].ToString() + "'   ");
                            sb.AppendLine(" AND SEQ = '" + dt.Rows[i]["INPUT_SEQ"].ToString() + "'   ");

                            sb.AppendLine(" UPDATE F_RAW_DETAIL SET ");
                            sb.AppendLine(" " + dt.Rows[i]["DIRECTION"].ToString() + " = " + dt.Rows[i]["DIRECTION"].ToString() + " - " + dt.Rows[i]["SOYO_AMT"].ToString());
                            sb.AppendLine(" ," + dt.Rows[i]["PREV_LOC"].ToString() + " = " + dt.Rows[i]["PREV_LOC"].ToString() + " + " + dt.Rows[i]["TOTAL_AMT"].ToString());
                            sb.AppendLine(" WHERE INPUT_DATE = '" + dt.Rows[i]["INPUT_DATE"].ToString() + "'   ");
                            sb.AppendLine(" AND INPUT_CD = '" + dt.Rows[i]["INPUT_CD"].ToString() + "'   ");
                            sb.AppendLine(" AND SEQ = '" + dt.Rows[i]["INPUT_SEQ"].ToString() + "'   ");
                        }
                    }
                }


                sb.AppendLine("delete from F_WORK_INST ");
                sb.AppendLine("    where W_INST_DATE = @W_INST_DATE ");
                sb.AppendLine("    and W_INST_CD = @W_INST_CD ");


                sb.AppendLine("delete from F_WORK_INST_DETAIL ");
                sb.AppendLine("    where W_INST_DATE = @W_INST_DATE ");
                sb.AppendLine("    and W_INST_CD = @W_INST_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", txt_work_date);
                sCommand.Parameters.AddWithValue("@W_INST_CD", txt_work_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_RAW_WORK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteWorkFlow(string txt_lot_no)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_WORK_FLOW ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");


                sb.AppendLine("delete from F_WORK_FLOW_DETAIL ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");

                sb.AppendLine("delete from F_ITEM_INPUT ");
                sb.AppendLine("    where LOT_NO = @LOT_NO ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", txt_lot_no);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_WORK_FLOW_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteItemOut(string out_date, string out_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from F_ITEM_OUT ");
                sb.AppendLine("    where OUTPUT_DATE = @OUTPUT_DATE ");
                sb.AppendLine("    and OUTPUT_CD = @OUTPUT_CD ");


                sb.AppendLine("delete from F_ITEM_OUT_DETAIL ");
                sb.AppendLine("    where OUTPUT_DATE = @OUTPUT_DATE ");
                sb.AppendLine("    and OUTPUT_CD = @OUTPUT_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@OUTPUT_DATE", out_date);
                sCommand.Parameters.AddWithValue("@OUTPUT_CD", out_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_OUTPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteFlowChk(string txt_item_cd, string txt_flow_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_FLOW_CHK ");
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");
                sb.AppendLine("     and FLOW_CD = @FLOW_CD ");

                sb.AppendLine("delete from N_FLOW_CHK_STAN "); //공정항목 상세
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");
                sb.AppendLine("     and FLOW_CD = @FLOW_CD ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);
                sCommand.Parameters.AddWithValue("@FLOW_CD", txt_flow_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_FLOW_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteItemChk(string txt_item_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_ITEM_CHK ");
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");

                sb.AppendLine("delete from N_ITEM_CHK_STAN "); //제품항목 상세
                sb.AppendLine("    where ITEM_CD = @ITEM_CD ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@ITEM_CD", txt_item_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_CHK_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        #region haccp
        public int haccp_flow(
              string cmb_cd
            , string txt_nm
            , string txt_cd
            , string haccp_yn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(CHK_ORD),0)+1 from N_HACCP_CHK ");
                sb.AppendLine("WHERE FLOW_CD = @FLOW_CD ");

                sb.AppendLine("insert into N_HACCP_CHK(");
                sb.AppendLine("     FLOW_CD ");
                sb.AppendLine("     ,CHK_CD ");
                sb.AppendLine("     ,CHK_ORD ");
                sb.AppendLine("     ,CHK_NM ");
                sb.AppendLine("     ,USE_YN ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("     @FLOW_CD ");
                sb.AppendLine("     ,@CHK_CD ");
                sb.AppendLine("     ,@seq ");
                sb.AppendLine("     ,@CHK_NM ");
                sb.AppendLine("     ,@USE_YN ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", cmb_cd);
                sCommand.Parameters.AddWithValue("@CHK_CD", txt_cd);
                sCommand.Parameters.AddWithValue("@CHK_NM", txt_nm);
                sCommand.Parameters.AddWithValue("@USE_YN", haccp_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_HACCP_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int haccp_update(
        string cmb_cd
    , string txt_nm
    , string txt_cd
    , string haccp_yn)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                sb.AppendLine(" update N_HACCP_CHK ");
                sb.AppendLine(" set ");
                sb.AppendLine(" CHK_NM = @CHK_NM ");
                sb.AppendLine(" , USE_YN = @USE_YN ");
                sb.AppendLine(" WHERE FLOW_CD = @FLOW_CD AND CHK_CD = @CHK_CD ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@FLOW_CD", cmb_cd);
                sCommand.Parameters.AddWithValue("@CHK_CD", txt_cd);
                sCommand.Parameters.AddWithValue("@CHK_NM", txt_nm);
                sCommand.Parameters.AddWithValue("@USE_YN", haccp_yn);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_HACCP_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable haccp_Grid_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select FLOW_CD");
            sb.AppendLine("     ,CHK_CD ");
            sb.AppendLine("     ,CHK_ORD ");
            sb.AppendLine("     ,CHK_NM ");
            sb.AppendLine("     ,USE_YN ");
            sb.AppendLine("     ,(SELECT FLOW_NM FROM N_FLOW_CODE WHERE FLOW_CD = A.FLOW_CD) AS FLOW_NM  ");
            sb.AppendLine(" from N_HACCP_CHK A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by FLOW_CD");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable cust_Grid_List(string condition)
        //구매처원장 검색
        {

            StringBuilder sb = new StringBuilder();

            //sb.AppendLine("select A.ORDER_DATE, A.ORDER_CD, A.SEQ, A.RAW_MAT_CD, A.SPEC, A.UNIT_CD, A.TOTAL_AMT, A.PRICE, B.COMPLETE_YN ");
            //sb.AppendLine("from F_ORDER_DETAIL A ");
            //sb.AppendLine("LEFT OUTER JOIN F_ORDER B  ON A.ORDER_DATE = B.ORDER_DATE ");
            ////sb.AppendLine("LEFT OUTER JOIN F_ORDER C ON C.CUST_CD = sCode ");
            ////sb.AppendLine("WHERE B.COMPLETE_YN = 'Y' ");                    
            //sb.AppendLine(condition);
            //sb.AppendLine("order by ORDER_DATE ");

            sb.AppendLine("SELECT A.ORDER_DATE,   ");
            sb.AppendLine("A.ORDER_CD,  ");
            sb.AppendLine("A.ORDER_CD,  ");
            sb.AppendLine("A.SEQ,    ");
            sb.AppendLine("(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE RAW_MAT_CD = B.RAW_MAT_CD) AS RAW_MAT_NM,   ");
            sb.AppendLine(" B.SPEC,  ");
            sb.AppendLine(" A.TOTAL_AMT,  ");
            sb.AppendLine(" A.PRICE,  ");
            sb.AppendLine(" A.TOTAL_MONEY,  ");
            sb.AppendLine(" B.COMPLETE_YN  ");
            sb.AppendLine(" FROM F_ORDER_DETAIL A  ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_DETAIL B  ");
            sb.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD  ");
            sb.AppendLine(" LEFT OUTER JOIN F_ORDER C  ");
            sb.AppendLine(" ON A.ORDER_DATE = C.ORDER_DATE  ");
            sb.AppendLine(" WHERE C.COMPLETE_YN = 'Y'  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.ORDER_DATE");

            //Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable noticeList(string condition)
        //공지사항 검색
        {

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select * ");
            sb.AppendLine("from N_NOTICE ");
            //sb.AppendLine("LEFT OUTER JOIN F_ORDER B  ON A.ORDER_DATE = B.ORDER_DATE ");
            //sb.AppendLine("LEFT OUTER JOIN F_ORDER C ON C.CUST_CD = sCode ");
            //sb.AppendLine("WHERE B.COMPLETE_YN = 'Y' ");                    
            sb.AppendLine(condition);
            sb.AppendLine("order by SEQ ");

            //Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());

            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insertNotice(string textBox2, string textBox3)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_NOTICE");
                // sb.AppendLine(" where poor_cd = '" + txt_poor_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                //if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                //{
                //    return 3;
                //}

                sb = new StringBuilder();

                sb.AppendLine("declare @SEQ int ");
                sb.AppendLine("select @SEQ = ISNULL(MAX(SEQ),0)+1 from N_NOTICE ");
                //sb.AppendLine("where ITEM_CD = '" + txt_item_cd + "' ");

                sb.AppendLine("insert into N_NOTICE(");
                sb.AppendLine("     SEQ ");
                sb.AppendLine("     ,TITLE ");
                sb.AppendLine("     ,CONTENT ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @SEQ ");
                sb.AppendLine(" ,@TITLE ");
                sb.AppendLine(" ,@CONTENT ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                //sb.AppendLine(" ,@INTIME ");
                //sb.AppendLine(" ,@INSTAFF ");
                sb.AppendLine(" ) ");




                sCommand = new SqlCommand(sb.ToString());

                //sCommand.Parameters.AddWithValue("@SEQ", textBox1);
                sCommand.Parameters.AddWithValue("@TITLE", textBox2);
                sCommand.Parameters.AddWithValue("@CONTENT", textBox3);
                //sCommand.Parameters.AddWithValue("@INTIME", dTP1);
                //sCommand.Parameters.AddWithValue("@INSTAFF", textBox5);                

                int qResult = wAdo.SqlCommandEtc(sCommand, "insertNOTICE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }
        public int deleteNotice(string textBox1)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM N_NOTICE  ");
                sb.AppendLine("WHERE SEQ = @SEQ ");
                //sb.AppendLine("AND INSTAFF = @INSTAFF");              

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@SEQ", textBox1);
                //sCommand.Parameters.AddWithValue("@INSTAFF", input_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "deleteNotice");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateNotice(string textBox1, string textBox2, string textBox3)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                //sb.AppendLine(" select *");
                //sb.AppendLine(" from N_NOTICE");
                //sb.AppendLine(" where poor_cd = '" + txt_poor_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);


                sb = new StringBuilder();
                sb.AppendLine("update N_NOTICE SET ");
                // sb.AppendLine("     SEQ = @SEQ ");
                sb.AppendLine("     TITLE = @sTITLE ");
                sb.AppendLine("     ,CONTENT = @sCONTENT ");

                sb.AppendLine("    where SEQ = @SEQ  ");

                sb.AppendLine("  ");

                //sb.AppendLine("Update F_HACCP_CHK SET ");
                //sb.AppendLine("     COMMENT = @COMMENT ");
                //sb.AppendLine("     ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                //sb.AppendLine("     ,UPTIME =  convert(varchar, getdate(), 120)");
                //sb.AppendLine("     WHERE INPUT_DATE = @INPUT_DATE and INPUT_CD = @seq");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@SEQ", textBox1);
                sCommand.Parameters.AddWithValue("@sTITLE", textBox2);
                sCommand.Parameters.AddWithValue("@sCONTENT", textBox3);

                int qResult = wAdo.SqlCommandEtc(sCommand, "updateNotice");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }


        public int getStaffName(string staff_cd, TextBox staff_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("SELECT STAFF_NM FROM N_STAFF_CODE ");
                sb.AppendLine("WHERE STAFF_CD = @STAFF_CD");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@STAFF_CD", staff_cd);

                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt.Rows.Count == 1)
                {

                    staff_nm.Text = dt.Rows[0][0].ToString();

                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable getHaccpGrid()
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("SELECT *  ");
                sb.AppendLine("  ,  (SELECT FLOW_NM FROM N_FLOW_CODE where FLOW_CD = A.FLOW_CD) AS FLOW_NM  ");
                sb.AppendLine(" FROM N_HACCP_CHK A ");
                sb.AppendLine("WHERE USE_YN = 'Y' ");
                sb.AppendLine("ORDER BY FLOW_CD, CHK_ORD ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt.Rows.Count > 0)
                {
                    return wAdo.SqlCommandSelect(sCommand);
                }
                else return null;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return null;
            }
        }


        public int Insert_Haccp_Input(
              string input_date
            , string comment
            , DataGridView ccpChkGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_HACCP_CHK ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                Console.WriteLine(sb.ToString());

                sb.AppendLine("insert into F_HACCP_CHK(");
                sb.AppendLine("     INPUT_DATE");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      @INPUT_DATE ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                if (ccpChkGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < ccpChkGrid.Rows.Count; i++)
                    {
                        sb.AppendLine("declare @item_seq" + (i) + " int ");
                        sb.AppendLine("select @item_seq" + (i) + " =ISNULL(MAX(SEQ),0)+1 from F_HACCP_DETAIL ");
                        sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                        sb.AppendLine("and INPUT_CD =  @seq ");


                        sb.AppendLine("insert into F_HACCP_DETAIL(  ");
                        sb.AppendLine("     INPUT_DATE  ");
                        sb.AppendLine("     ,INPUT_CD  ");
                        sb.AppendLine("     ,SEQ  ");
                        sb.AppendLine("     ,FLOW_CD  ");
                        sb.AppendLine("     ,CHK_CD  ");
                        sb.AppendLine("     ,CHK_ORD  ");
                        sb.AppendLine("     ,CHK_NM  ");
                        sb.AppendLine("     ,CHK_VALUE  ");
                        sb.AppendLine("     ,INSTAFF  ");
                        sb.AppendLine("     ,INTIME  ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("      @INPUT_DATE ");
                        sb.AppendLine("      ,@seq ");
                        sb.AppendLine("      ,@item_seq" + (i) + "   ");
                        sb.AppendLine("      ,'" + ccpChkGrid.Rows[i].Cells["FLOW_CD"].Value + "'    ");
                        sb.AppendLine("      ,'" + ccpChkGrid.Rows[i].Cells["CHK_CD"].Value + "'    ");
                        sb.AppendLine("      ,'" + ccpChkGrid.Rows[i].Cells["CHK_ORD"].Value + "'    ");
                        sb.AppendLine("      ,'" + ccpChkGrid.Rows[i].Cells["CHK_NM"].Value + "'    ");
                        sb.AppendLine("      ,'" + (ccpChkGrid.Rows[i].Cells["YES"].Value.ToString().Equals("True") ? "Y" : "N") + "'    ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");




                    }
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_Haccp_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }


        public int Update_Haccp_Input(
              string input_date
            , string input_cd
            , string comment
            , DataGridView ccpChkGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();



                Console.WriteLine(sb.ToString());


                sb.AppendLine("Update F_HACCP_CHK SET ");
                sb.AppendLine("     COMMENT = @COMMENT ");
                sb.AppendLine("     ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME =  convert(varchar, getdate(), 120)");
                sb.AppendLine("     WHERE INPUT_DATE = @INPUT_DATE and INPUT_CD = @seq");


                if (ccpChkGrid.Rows.Count > 0)
                {
                    for (int i = 0; i < ccpChkGrid.Rows.Count; i++)
                    {

                        sb.AppendLine("Update F_HACCP_DETAIL SET ");
                        sb.AppendLine("      CHK_VALUE = '" + (ccpChkGrid.Rows[i].Cells["YES"].Value.ToString().Equals("True") ? "Y" : "N") + "'    ");
                        sb.AppendLine("     ,UPSTAFF =  '" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,UPTIME =  convert(varchar, getdate(), 120)");
                        sb.AppendLine("     WHERE INPUT_DATE = @INPUT_DATE and INPUT_CD = @seq and CHK_CD = '" + ccpChkGrid.Rows[i].Cells["CHK_CD"].Value + "'");

                    }
                }


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@seq", input_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_Haccp_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }


        public DataTable fn_Haccp_input_list(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select INPUT_DATE");
            sb.AppendLine("     ,INPUT_CD ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.INSTAFF) as STAFF_NM  ");
            sb.AppendLine("     ,INSTAFF AS STAFF_CD ");
            sb.AppendLine("     ,COMMENT ");
            sb.AppendLine(" from F_HACCP_CHK A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by INPUT_DATE desc, INPUT_CD desc ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public DataTable fn_Haccp_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.INPUT_DATE");
            sb.AppendLine("     ,A.INPUT_CD");
            sb.AppendLine("     ,A.FLOW_CD ");
            sb.AppendLine("     ,(SELECT FLOW_NM FROM N_FLOW_CODE where FLOW_CD = A.FLOW_CD) AS FLOW_NM ");
            sb.AppendLine("     ,A.CHK_CD");
            sb.AppendLine("     ,A.CHK_NM ");
            sb.AppendLine("     ,A.CHK_ORD ");
            sb.AppendLine("     ,A.CHK_VALUE ");
            sb.AppendLine("     ,CASE WHEN A.CHK_VALUE = 'Y' THEN 'V' ELSE ' ' end AS YES ");
            sb.AppendLine("     ,CASE WHEN A.CHK_VALUE = 'N' THEN 'V' ELSE ' ' end AS NO ");
            sb.AppendLine("     ,A.INSTAFF ");
            sb.AppendLine("     ,(select STAFF_NM from N_STAFF_CODE where STAFF_CD = A.INSTAFF) as STAFF_NM");
            sb.AppendLine(" from F_HACCP_DETAIL A");
            sb.AppendLine(condition);
            sb.AppendLine(" order by A.SEQ ");



            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        public int Delete_Haccp_Input(
           string input_date
           , string input_cd
           )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM F_HACCP_CHK  ");
                sb.AppendLine("WHERE INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("AND INPUT_CD = @INPUT_CD");

                sb.AppendLine("DELETE FROM F_HACCP_DETAIL  ");
                sb.AppendLine("WHERE INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("AND INPUT_CD = @INPUT_CD");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", input_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_haccp_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        #endregion haccp

        #region 사업자관리
        // 사업자정보 조회

        public DataTable fn_Saup_List(string saup_no)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.SAUP_NO");
            sb.AppendLine("     ,B.COMPANY_NM ");
            sb.AppendLine("     ,A.CORPORATE_NO");
            sb.AppendLine("     ,A.UPTAE ");
            sb.AppendLine("     ,A.JONGMOK ");
            sb.AppendLine("     ,A.POST_NO ");
            sb.AppendLine("     ,A.ADDR ");
            sb.AppendLine("     ,A.ADDR2 ");
            sb.AppendLine("     ,A.OPEN_DATE ");
            sb.AppendLine("     ,A.COMP_PHONE ");
            sb.AppendLine("     ,A.FAX ");
            sb.AppendLine("     ,A.MANAGER_EMAIL ");
            sb.AppendLine("     ,A.MANAGER_PHONE ");
            sb.AppendLine("     ,A.HOMEPAGE ");
            sb.AppendLine("     ,A.SAUP_LOGO ");
            sb.AppendLine("     ,A.LOGO_SIZE ");
            sb.AppendLine(" from [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] A");
            sb.AppendLine(" inner join [SM_FACTORY_COM].[dbo].[T_COMP_LOGIN] B ");
            sb.AppendLine(" on A.SAUP_NO = B.COM_SAUP_NO ");
            sb.AppendLine("where A.SAUP_NO = '" + saup_no + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int updateSaup(string saup_no
                , string saup_nm
                , string corporate_no
                , string uptae
                , string jongmok
                , string open_date
                , string post_no
                , string addr
                , string addr2
                , string comp_phone
                , string fax
                , string mg_email
                , string mg_phone
                , string homepage
                , byte[] img
                , int img_size
                , string ori_saup_nm)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("declare @chk int  ");
                sb.AppendLine("select @chk = COUNT(*) from [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] ");
                sb.AppendLine("where SAUP_NO = '" + saup_no + "' ");

                sb.AppendLine("IF(@chk > 0)"); //공정항목 상세
                sb.AppendLine(" update [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] ");
                sb.AppendLine(" set CORPORATE_NO = @CORPORATE_NO");
                sb.AppendLine("    ,UPTAE = @UPTAE ");
                sb.AppendLine("    ,JONGMOK = @JONGMOK ");
                sb.AppendLine("    ,POST_NO = @POST_NO ");
                sb.AppendLine("    ,ADDR = @ADDR ");
                sb.AppendLine("    ,ADDR2 = @ADDR2 ");
                sb.AppendLine("    ,OPEN_DATE = @OPEN_DATE ");
                sb.AppendLine("    ,COMP_PHONE = @COMP_PHONE ");
                sb.AppendLine("    ,FAX = @FAX ");
                sb.AppendLine("    ,MANAGER_EMAIL = @MANAGER_EMAIL ");
                sb.AppendLine("    ,MANAGER_PHONE = @MANAGER_PHONE ");
                sb.AppendLine("    ,HOMEPAGE = @HOMEPAGE ");
                if (img_size > 0)
                {
                    sb.AppendLine("    ,SAUP_LOGO = @SAUP_LOGO ");
                    sb.AppendLine("    ,LOGO_SIZE = @LOGO_SIZE ");
                }
                sb.AppendLine("where SAUP_NO = '" + saup_no + "' ");

                sb.AppendLine("ELSE ");
                sb.AppendLine(" insert into [SM_FACTORY_COM].[dbo].[T_SAUP_CODE] ( ");
                sb.AppendLine("      SAUP_NO ");
                sb.AppendLine("     ,CORPORATE_NO ");
                sb.AppendLine("     ,UPTAE ");
                sb.AppendLine("     ,JONGMOK ");
                sb.AppendLine("     ,POST_NO ");
                sb.AppendLine("     ,ADDR ");
                sb.AppendLine("     ,ADDR2 ");
                sb.AppendLine("     ,OPEN_DATE ");
                sb.AppendLine("     ,COMP_PHONE ");
                sb.AppendLine("     ,FAX ");
                sb.AppendLine("     ,MANAGER_EMAIL ");
                sb.AppendLine("     ,MANAGER_PHONE ");
                sb.AppendLine("     ,HOMEPAGE ");
                sb.AppendLine("     ,SAUP_LOGO ");
                sb.AppendLine("     ,LOGO_SIZE ");
                sb.AppendLine(" )VALUES( ");
                sb.AppendLine("      @SAUP_NO ");
                sb.AppendLine("     ,@CORPORATE_NO ");
                sb.AppendLine("     ,@UPTAE ");
                sb.AppendLine("     ,@JONGMOK ");
                sb.AppendLine("     ,@POST_NO ");
                sb.AppendLine("     ,@ADDR ");
                sb.AppendLine("     ,@ADDR2 ");
                sb.AppendLine("     ,@OPEN_DATE ");
                sb.AppendLine("     ,@COMP_PHONE ");
                sb.AppendLine("     ,@FAX ");
                sb.AppendLine("     ,@MANAGER_EMAIL ");
                sb.AppendLine("     ,@MANAGER_PHONE ");
                sb.AppendLine("     ,@HOMEPAGE ");
                if (img_size > 0)
                {
                    sb.AppendLine("     ,@SAUP_LOGO ");
                    sb.AppendLine("     ,@LOGO_SIZE ");
                }
                else
                {
                    sb.AppendLine("     ,null ");
                    sb.AppendLine("     ,0 ");
                }
                sb.AppendLine("  )  ");

                if (!saup_nm.Trim().ToString().Equals(ori_saup_nm.Trim().ToString()))
                {
                    sb.AppendLine(" update [SM_FACTORY_COM].[dbo].[T_COMP_LOGIN] ");
                    sb.AppendLine(" set COMPANY_NM = '" + saup_nm.Trim().ToString() + "' ");
                    sb.AppendLine("where COM_SAUP_NO = '" + saup_no + "' ");

                    Common.p_strCompNm = saup_no.Trim().ToString();
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@SAUP_NO", saup_no);
                //sCommand.Parameters.AddWithValue("@SAUP_NM", saup_nm);
                sCommand.Parameters.AddWithValue("@CORPORATE_NO", corporate_no);
                sCommand.Parameters.AddWithValue("@UPTAE", uptae);
                sCommand.Parameters.AddWithValue("@JONGMOK", jongmok);
                sCommand.Parameters.AddWithValue("@POST_NO", post_no);
                sCommand.Parameters.AddWithValue("@ADDR", addr);
                sCommand.Parameters.AddWithValue("@ADDR2", addr2);
                sCommand.Parameters.AddWithValue("@OPEN_DATE", open_date);
                sCommand.Parameters.AddWithValue("@COMP_PHONE", comp_phone);
                sCommand.Parameters.AddWithValue("@FAX", fax);
                sCommand.Parameters.AddWithValue("@MANAGER_EMAIL", mg_email);
                sCommand.Parameters.AddWithValue("@MANAGER_PHONE", mg_phone);
                sCommand.Parameters.AddWithValue("@HOMEPAGE", homepage);
                if (img_size > 0)
                {
                    sCommand.Parameters.AddWithValue("@SAUP_LOGO", img);
                    sCommand.Parameters.AddWithValue("@LOGO_SIZE", img_size);
                }

                int qResult = wAdo.SqlCommandEtc(sCommand, "update_Saup_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }
        #endregion 사업자관리

        #region 생산보고서


        //2019-10-31 이재원 생산보고서 Group by Query 
        public DataTable fn_GroupByPlanList(string condition)
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("select ITEM_CD  ");
            sb.AppendLine("     ,(select ITEM_NM from N_ITEM_CODE where ITEM_CD = A.ITEM_CD) as ITEM_NM  ");
            sb.AppendLine("     ,(select SPEC from N_ITEM_CODE where ITEM_CD = A.ITEM_CD) as SPEC ");
            sb.AppendLine("     ,UNIT_CD   ");
            sb.AppendLine("     ,(select UNIT_NM from N_UNIT_CODE where UNIT_CD = A.UNIT_CD) as UNIT_NM ");
            sb.AppendLine("     ,SUM(total_amt) as SUM_AMT ");
            sb.AppendLine("     from F_PLAN_DETAIL A ");
            sb.AppendLine(condition);
            sb.AppendLine("     group by item_cd , UNIT_CD");
            sb.AppendLine(" order by item_cd");



            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        //2019-10-31 이재원 생산보고서 Group by Query 
        public DataTable fn_GroupByFlowList(string condition)
        {
            StringBuilder sb = new StringBuilder();


            sb.AppendLine("select A.ITEM_CD  ");
            sb.AppendLine("      ,(select ITEM_NM from N_ITEM_CODE where A.ITEM_CD = ITEM_CD) as ITEM_NM   ");
            sb.AppendLine("      ,(select SPEC from N_ITEM_CODE where A.ITEM_CD = ITEM_CD) as SPEC   ");
            sb.AppendLine("      , SUM(INST_AMT) AS TOTAL_INST_AMT   ");
            sb.AppendLine("      , SUM(LOSS) AS LOSS   ");
            sb.AppendLine("      ,SUM(POOR_AMT) AS POOR_AMT   ");
            sb.AppendLine("      ,SUM(INST_AMT)-SUM(LOSS)-SUM(POOR_AMT) AS SUM_AMT   ");
            sb.AppendLine("      from F_WORK_INST A    ");
            sb.AppendLine("      join (select LOT_NO, sum(LOSS) as LOSS   ");
            sb.AppendLine("      , sum(POOR_AMT) as POOR_AMT    ");
            sb.AppendLine("      from F_WORK_FLOW_DETAIL group by LOT_NO) B    ");
            sb.AppendLine("      on A.LOT_NO = B.LOT_NO    ");
            sb.AppendLine(condition);
            sb.AppendLine("      and (A.POOR_WORK_YN is null or A.POOR_WORK_YN = 'N')  ");
            sb.AppendLine("      group by A.ITEM_CD   ");

            Console.WriteLine(sb.ToString());

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }
        #endregion 생산보고서

        #region 원산지등록
        //2019-11-01 이재원 축산 특화를 위한 원산지 기초코드 조회 
        public DataTable fn_Country_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select COUNTRY_CD");
            sb.AppendLine(" , COUNTRY_NM  ");
            sb.AppendLine(" , COMMENT  ");
            sb.AppendLine(" , USED_CD  ");
            sb.AppendLine(" , (select S_CODE_NM  ");
            sb.AppendLine("    from [SM_FACTORY_COM].[dbo].[T_S_CODE] ");
            sb.AppendLine("    where L_CODE = '500' and S_CODE = A.USED_CD) AS USED_NM ");
            sb.AppendLine(" from N_RAW_COUNTRY_CODE A ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by COUNTRY_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //2019-11-01 이재원 축산 특화를 위한 원산지 기초코드 등록 
        public int insertCountryCode(
              string txt_country_cd
            , string txt_country_nm
            , string comment
            , string used_cd
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();


                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_RAW_COUNTRY_CODE");
                sb.AppendLine(" where COUNTRY_CD = '" + txt_country_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();


                sb.AppendLine("insert into N_RAW_COUNTRY_CODE(");
                sb.AppendLine("     COUNTRY_CD ");
                sb.AppendLine("     ,COUNTRY_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine("     ,USED_CD ");
                sb.AppendLine("  )values ( ");
                sb.AppendLine("     @COUNTRY_CD ");
                sb.AppendLine("     ,@COUNTRY_NM ");
                sb.AppendLine("     ,@COMMENT ");
                sb.AppendLine("     ,@USED_CD ");

                sb.AppendLine("  )");



                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);
                sCommand.Parameters.AddWithValue("@COUNTRY_NM", txt_country_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@USED_CD", used_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COUNTRY_CODE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //2019-11-01 이재원 축산 특화를 위한 원산지 기초코드 수정
        public int UpdateCountryCode(
              string txt_country_cd
            , string txt_country_nm
            , string comment
            , string used_cd
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Update N_RAW_COUNTRY_CODE SET");
                sb.AppendLine("     COUNTRY_NM = @COUNTRY_NM ");
                sb.AppendLine("     ,COMMENT = @COMMENT ");
                sb.AppendLine("     ,USED_CD = @USED_CD ");
                sb.AppendLine("     WHERE COUNTRY_CD = @COUNTRY_CD ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);
                sCommand.Parameters.AddWithValue("@COUNTRY_NM", txt_country_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", comment);
                sCommand.Parameters.AddWithValue("@USED_CD", used_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COUNTRY_CODE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        //2019-11-01 이재원 축산 특화를 위한 원산지 기초코드 삭제
        public int DeleteCountryCode(
              string txt_country_cd
         )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Delete from N_RAW_COUNTRY_CODE ");
                sb.AppendLine("     WHERE COUNTRY_CD = @COUNTRY_CD ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@COUNTRY_CD", txt_country_cd);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_COUNTRY_CODE");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        #endregion 원산지등록


        public DataTable fn_Jang_Item_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select * ");
            sb.AppendLine(" from T_상품정보 ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by 상품코드 ");

            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect_Jang(sCommand);
        }



        public int fn_Item_Update_Complete(string sLotno, string sLotsub)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("Update F_ITEM_INPUT SET ");
                sb.AppendLine("     COMPLETE_YN =  'Y'   ");
                sb.AppendLine("     WHERE LOT_NO = @LOT_NO and LOT_SUB = @LOT_SUB   ");




                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", sLotno);
                sCommand.Parameters.AddWithValue("@LOT_SUB", sLotsub);


                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_Item_Complete");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }

        }




        public int fn_Insert_Item_To_Jang(DataGridView InputTabGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq  =ISNULL(MAX(전표번호),0)+1 from T_매입 ");
                sb.AppendLine("where 매입일자 = '" + DateTime.Now.ToString("yyyy-MM-dd") + "' ");
                sb.AppendLine("and 사업자번호 = '" + Common.p_saupNo + "' ");

                sb.AppendLine("insert into  T_매입 (사업자번호, 지점코드, 매입일자, 전표번호, 입력방법, 거래처코드, 담당사원, 부가세코드, 등록사원번호, 등록일시, 창고코드 )");
                sb.AppendLine(" values ( '" + Common.p_saupNo + "' ");
                sb.AppendLine(" ,'0'  ");
                sb.AppendLine(" ,'" + DateTime.Now.ToString("yyyy-MM-dd") + "'  ");
                sb.AppendLine(" ,@seq  ");
                sb.AppendLine(" ,'C'  ");
                sb.AppendLine(" ,(select 거래처코드 from T_거래처정보 where 거래처사업자번호 ='" + Common.p_saupNo + "' and 사업자번호 = '" + Common.p_saupNo + "'  )  ");
                sb.AppendLine(" ,(select 사원번호 from T_사용자정보 where 사업자번호 ='" + Common.p_saupNo + "' and uid = '" + Common.p_strUserID + "'  )  ");
                sb.AppendLine(" ,'1'  ");
                sb.AppendLine(" ,(select 사원번호 from T_사용자정보 where 사업자번호 ='" + Common.p_saupNo + "' and uid = '" + Common.p_strUserID + "'  )  ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120)  ");
                sb.AppendLine(" ,'000'");
                sb.AppendLine(" )");


                for (int i = 0; i < InputTabGrid.Rows.Count; i++)
                {
                    if (InputTabGrid.Rows[i].Cells["CHK"].Value != null && (bool)InputTabGrid.Rows[i].Cells["CHK"].Value == true)
                    {
                        sb.AppendLine("declare @seq" + i + " int ");
                        sb.AppendLine("select @seq" + i + "  =ISNULL(MAX(항목순번),0)+1 from T_매입항목 ");
                        sb.AppendLine("where 매입일자 = '" + DateTime.Now.ToString("yyyy-MM-dd") + "' ");
                        sb.AppendLine("and 사업자번호 = '" + Common.p_saupNo + "' ");
                        sb.AppendLine("and 전표번호 = @seq ");

                        sb.AppendLine("insert into  T_매입항목 (사업자번호, 지점코드, 매입일자, 전표번호, 항목순번, 상품코드, 박스수량, 중간수량, 낱개수량, 총수량, 박스단가, 낱개단가, 금액");
                        sb.AppendLine(",서비스박스,서비스낱개,서비스총수량, 매입구분, 비고, 과세구분 )");
                        sb.AppendLine(" values ( '" + Common.p_saupNo + "' ");
                        sb.AppendLine(" ,   '0'  ");
                        sb.AppendLine(" ,   '" + DateTime.Now.ToString("yyyy-MM-dd") + "'  ");
                        sb.AppendLine(" ,   @seq  ");
                        sb.AppendLine(" ,   @seq" + i + "  ");
                        sb.AppendLine(" ,   '" + InputTabGrid.Rows[i].Cells["LINK_CD"].Value.ToString() + "' ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   " + InputTabGrid.Rows[i].Cells["수량"].Value.ToString().Replace(",", "") + " ");
                        sb.AppendLine(" ,   " + InputTabGrid.Rows[i].Cells["수량"].Value.ToString().Replace(",", "") + " ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   " + InputTabGrid.Rows[i].Cells["입고가격"].Value.ToString() + " ");
                        sb.AppendLine(" ,   " + double.Parse(InputTabGrid.Rows[i].Cells["입고가격"].Value.ToString()) * double.Parse(InputTabGrid.Rows[i].Cells["수량"].Value.ToString().Replace(",", "")) + " ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   0 ");
                        sb.AppendLine(" ,   '1' ");
                        sb.AppendLine(" ,   '' ");
                        sb.AppendLine(" ,   '1'  ");
                        sb.AppendLine(" )");
                    }

                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc_Jang(sCommand, "Update_Item_Complete");
                if (qResult > 0)
                {
                    StringBuilder sb2 = new StringBuilder();
                    for (int i = 0; i < InputTabGrid.RowCount; i++)
                    {
                        if (InputTabGrid.Rows[i].Cells["CHK"].Value != null && (bool)InputTabGrid.Rows[i].Cells["CHK"].Value == true)
                        {
                            sb2.AppendLine("Update F_ITEM_INPUT SET ");
                            sb2.AppendLine("     COMPLETE_YN =  'Y'   ");
                            sb2.AppendLine("     WHERE LOT_NO = '" + InputTabGrid.Rows[i].Cells["LOT_NO"].Value.ToString() + "' and LOT_SUB = '" + InputTabGrid.Rows[i].Cells["LOT_SUB"].Value.ToString() + "'   ");

                        }

                    }

                    sCommand = new SqlCommand(sb2.ToString());
                    qResult = wAdo.SqlCommandEtc(sCommand, "Update_Item_Complete2");


                    if (qResult > 0)
                    {
                        return 0;
                    }
                    else return 1;


                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable fn_tscode_list()
        {

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select * ");
            sb.AppendLine(" from SM_FACTORY_COM.dbo.T_S_CODE ");


            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);

        }

        //2019-11-05 이재원 HACCP문서 관리 페이지를 만들기 위한 메소드

        public int insert_Haccp_Doc_Root(string rootPath, string staff_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Select * from N_HACCP_DOCPATH ");
                sb.AppendLine("     WHERE STAFF_CD = '" + staff_cd + "' ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 1;
                }
                DataTable dtTemp = wAdo.SqlCommandSelect(sCommand);

                if (dtTemp.Rows != null && dtTemp.Rows.Count > 0)
                {
                    sb = new StringBuilder();
                    sb.AppendLine("update N_HACCP_DOCPATH ");
                    sb.AppendLine("SET DOCPATH = '" + rootPath + "'  ");
                    sb.AppendLine("   where  STAFF_CD ='" + staff_cd + "' ");

                }
                else
                {
                    sb = new StringBuilder();
                    sb.AppendLine("insert into N_HACCP_DOCPATH(STAFF_CD,DOCPATH) ");
                    sb.AppendLine("   values ('" + staff_cd + "' , '" + rootPath + "') ");

                }

                sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert or update HACCP root path");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public string select_Haccp_Doc_Root(string staff_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Select * from N_HACCP_DOCPATH ");
                sb.AppendLine("     WHERE STAFF_CD = '" + staff_cd + "' ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return "failed";
                }

                DataTable dtTemp = wAdo.SqlCommandSelect(sCommand);

                if (dtTemp.Rows != null && dtTemp.Rows.Count > 0)
                {
                    String[] strArrTemp = dtTemp.Rows[0]["DOCPATH"].ToString().Split('/');
                    string ReturnTemp = "";
                    for (int i = 0; i < strArrTemp.Length - 2; i++)
                    {
                        ReturnTemp += strArrTemp[i];
                    }
                    return ReturnTemp;

                }
                else
                {
                    return "미등록";

                }
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return "failed";
            }
        }

        public int insert_Haccp_Doc_File(string destFile, string fileName, string staff_cd, string input_date, string txt_comment, string gubun)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("Select * from F_HACCP_DOCS ");
                sb.AppendLine("     WHERE DOCPATH = '" + destFile + "' and STAFF_CD = '" + staff_cd + "'  ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 1;
                }

                DataTable dtTemp = wAdo.SqlCommandSelect(sCommand);

                if (dtTemp.Rows != null && dtTemp.Rows.Count > 0)
                {
                    return 7;
                }

                sb = new StringBuilder();



                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_HACCP_DOCS ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' and STAFF_CD = '" + staff_cd + "'  ");

                sb.AppendLine("INSERT INTO F_HACCP_DOCS ( ");
                sb.AppendLine("  INPUT_DATE  ");
                sb.AppendLine("  ,INPUT_CD  ");
                sb.AppendLine("  ,DOC_GUBUN  ");
                sb.AppendLine("  ,STAFF_CD  ");
                sb.AppendLine("  ,DOCPATH  ");
                sb.AppendLine("  ,FNAME  ");
                sb.AppendLine("  ,COMMENT  ");
                sb.AppendLine("  ,INTIME  ");
                sb.AppendLine("  ,INSTAFF  ");
                sb.AppendLine("  ) VALUES (  ");
                sb.AppendLine("  @INPUT_DATE  ");
                sb.AppendLine("  ,@seq  ");
                sb.AppendLine("  ,@DOC_GUBUN  ");
                sb.AppendLine("  ,@STAFF_CD  ");
                sb.AppendLine("  ,@DOCPATH  ");
                sb.AppendLine("  ,@FNAME  ");
                sb.AppendLine("  ,@COMMENT  ");
                sb.AppendLine("  ,convert(varchar, getdate(), 120)");
                sb.AppendLine("  ,'" + Common.p_strStaffNo + "'  ");
                sb.AppendLine("  )  ");




                sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@DOC_GUBUN", gubun);
                sCommand.Parameters.AddWithValue("@STAFF_CD", staff_cd);
                sCommand.Parameters.AddWithValue("@DOCPATH", destFile);
                sCommand.Parameters.AddWithValue("@FNAME", fileName);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_comment);


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert HACCP_DOCS");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable select_Haccp_Docs(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select INPUT_DATE ");
            sb.AppendLine("  ,INPUT_CD ");
            sb.AppendLine("  ,DOC_GUBUN ");
            sb.AppendLine("  ,STAFF_CD ");
            sb.AppendLine("  ,(SELECT STAFF_NM FROM N_STAFF_CODE WHERE A.STAFF_CD = STAFF_CD) AS STAFF_NM ");
            sb.AppendLine("  ,DOCPATH ");
            sb.AppendLine("  ,FNAME ");
            sb.AppendLine("  ,COMMENT ");
            sb.AppendLine(" from F_HACCP_DOCS A");
            sb.AppendLine(condition);


            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int Delete_Haccp_Doc(string path, string staff_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM F_HACCP_DOCS  ");
                sb.AppendLine("WHERE DOCPATH = @DOCPATH AND STAFF_CD = '" + staff_cd + "'  ");


                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DOCPATH", path);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_HACCP_DOCS");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int Update_Haccp_Docs(string columnName, string changeValue, string docPath, string staff_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                if (columnName.Equals("INPUT_DATE"))
                {
                    sb.AppendLine("declare @seq int ");
                    sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_HACCP_DOCS ");
                    sb.AppendLine("where INPUT_DATE = '" + changeValue + "' and STAFF_CD = '" + staff_cd + "'   ");

                    sb.AppendLine("UPDATE F_HACCP_DOCS  ");
                    sb.AppendLine("SET " + columnName + " = '" + changeValue + "'  ");
                    sb.AppendLine(", INPUT_CD = @seq ");
                    sb.AppendLine(", UPTIME = convert(varchar, getdate(), 120)  ");
                    sb.AppendLine(", UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("  WHERE DOCPATH = @DOCPATH ");
                    sb.AppendLine("  and STAFF_CD = '" + staff_cd + "'   ");

                }
                else
                {
                    sb.AppendLine("UPDATE F_HACCP_DOCS  ");
                    sb.AppendLine("SET " + columnName + " = '" + changeValue + "'  ");
                    sb.AppendLine(", UPTIME = convert(varchar, getdate(), 120)  ");
                    sb.AppendLine(", UPSTAFF = '" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("WHERE DOCPATH = @DOCPATH ");
                    sb.AppendLine("  and STAFF_CD = '" + staff_cd + "'   ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@DOCPATH", docPath);


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_HACCP_DOCS");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public bool numChk(string number) //  2019.11.21 문세진 문자열에 숫자가 아닌 문자가 들어 있는지 판별하는 메소드 
        {
            int chknum = 0;
            bool isnum = int.TryParse(number, out chknum);
            if (isnum == true)
                return true;
            else
                return false;
        }



        //2019-11-07 이재원 장터지기에 MES 거래처 정보를 넣기 위한 임시 메소드

        /*
         public int insert_samsung()
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("select * from N_CUST_CODE where CUST_GUBUN = '1' and CUST_CD != '0000000002'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                DataTable dt = wAdo.SqlCommandSelect(sCommand);
                sep sp = new sep();
                sb = new StringBuilder();

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    Console.WriteLine(dt.Rows[i]["CUST_CD"].ToString());
                    sb.AppendLine("INSERT INTO T_거래처정보 ( ");
                    sb.AppendLine("    사업자번호 ");
                    sb.AppendLine(",   지점코드  ");
                    sb.AppendLine(",   거래처코드  ");
                    sb.AppendLine(",   거래처구분  ");
                    sb.AppendLine(",   거래처명  ");
                    sb.AppendLine(",   정식명칭  ");
                    sb.AppendLine(",   거래처담당자  ");
                    sb.AppendLine(",   대표자명  ");
                    sb.AppendLine(",   거래처사업자번호  ");
                    sb.AppendLine(",   업태  ");
                    sb.AppendLine(",   종목  ");
                    sb.AppendLine(",   사원번호  ");
                    sb.AppendLine(",   거래개시일  ");
                    sb.AppendLine(",   유형코드  ");
                    sb.AppendLine(",   지역코드  ");
                    sb.AppendLine(",   우편번호  ");
                    sb.AppendLine(",   주소  ");
                    sb.AppendLine(",   상세주소  ");
                    sb.AppendLine(",   이메일  ");
                    sb.AppendLine(",   폰번호  ");
                    sb.AppendLine(",   전화번호  ");
                    sb.AppendLine(",   팩스번호  ");
                    sb.AppendLine(",   비고1  ");
                    sb.AppendLine(",   비고2  ");
                    sb.AppendLine(",   비고3  ");
                    sb.AppendLine(",   부가세코드  ");
                    sb.AppendLine(",   계산서여부  ");
                    sb.AppendLine(",   발행율  ");
                    sb.AppendLine(",   계좌순번  ");
                    sb.AppendLine(",   월  ");
                    sb.AppendLine(",   화  ");
                    sb.AppendLine(",   수  ");
                    sb.AppendLine(",   목  ");
                    sb.AppendLine(",   금  ");
                    sb.AppendLine(",   토  ");
                    sb.AppendLine(",   일  ");
                    sb.AppendLine(",   여신  ");
                    sb.AppendLine(",   현재잔고  ");
                    sb.AppendLine(",   잔고수정여부  ");
                    sb.AppendLine(",   초기잔고  ");
                    sb.AppendLine(",   잔고수정일자  ");
                    sb.AppendLine(",   수정당일잔고 ");
                    sb.AppendLine(",   수정잔고  ");
                    sb.AppendLine(",   사용여부  ");
                    sb.AppendLine(",   거래처명칭주소  ");
                    sb.AppendLine(",   초성명칭  ");
                    sb.AppendLine(",   Old_Code  ");
                    sb.AppendLine(",   등록사원번호  ");
                    sb.AppendLine(",   등록일시  ");
                    sb.AppendLine(") VALUES (  ");
                    sb.AppendLine("  '"+Common.p_saupNo+"'  ");
                    sb.AppendLine(",   '0'    ");
                    sb.AppendLine(",   '"+(i+100001).ToString()+"'    ");
                    sb.AppendLine(",   '"+dt.Rows[i]["CUST_GUBUN"].ToString()+"'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["CUST_NM"].ToString() + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["CUST_NM"].ToString() + "'   ");
                    sb.AppendLine(",   ''   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["OWNER"].ToString() + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["SAUP_NO"].ToString().Replace("-","") + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["UPTAE"].ToString() + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["JONGMOK"].ToString() + "'   ");
                    sb.AppendLine(",   '100'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["CUST_OPEN"].ToString() + "'   ");
                    sb.AppendLine(",   ''  ");
                    sb.AppendLine(",   ''  ");
                    sb.AppendLine(",   '" + dt.Rows[i]["POST_NO"].ToString() + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["ADDR"].ToString() + "'   ");
                    sb.AppendLine(",   ''  ");
                    sb.AppendLine(",   '" + dt.Rows[i]["CUST_EMAIL"].ToString() + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["CUST_PHONE"].ToString() + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["CUST_COMP_PHONE"].ToString() + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["CUST_FAX"].ToString() + "'   ");
                    sb.AppendLine(",   '" + dt.Rows[i]["COMMENT"].ToString() + "'   ");
                    sb.AppendLine(",   ''  ");
                    sb.AppendLine(",   ''  ");
                    sb.AppendLine(",   '1'  ");
                    sb.AppendLine(",   'Y'  ");
                    sb.AppendLine(",   100  ");
                    sb.AppendLine(",   ''  ");
                    sb.AppendLine(",   'N'  ");
                    sb.AppendLine(",   'N'  ");
                    sb.AppendLine(",   'N'  ");
                    sb.AppendLine(",   'N'  ");
                    sb.AppendLine(",   'N'  ");
                    sb.AppendLine(",   'N'  ");
                    sb.AppendLine(",   'N'  ");
                    sb.AppendLine(",   0  ");
                    sb.AppendLine(",   0  ");
                    sb.AppendLine(",   '0'  ");
                    sb.AppendLine(",   0  ");
                    sb.AppendLine(",   '" + DateTime.Today.ToString("yyyy-MM-dd") + "'  ");
                    sb.AppendLine(",   0  ");
                    sb.AppendLine(",   0  ");
                    sb.AppendLine(",   '0'  ");
                    sb.AppendLine(",   '" + dt.Rows[i]["ADDR"].ToString() + "'   ");
                    sb.AppendLine(",  '" + dt.Rows[i]["CUST_NM"].ToString() + ":" + sp.Seperate(dt.Rows[i]["CUST_NM"].ToString()).Substring(1) + dt.Rows[i]["CUST_NM"].ToString() + ":" + sp.Seperate(dt.Rows[i]["CUST_NM"].ToString()).Substring(1)+ "'  ");
                    sb.AppendLine(",   '" + dt.Rows[i]["CUST_CD"].ToString() + "'   ");
                    sb.AppendLine(",   '100'   ");
                    sb.AppendLine(",   getdate()   ");
                    sb.AppendLine(" ) ");
                    
                }
                SqlCommand sCommand2 = new SqlCommand(sb.ToString());
                int qResult = wAdo.SqlCommandEtc_Jang(sCommand2, "INSERT_SAMSUNG");
                Console.WriteLine(qResult);

                return 0;
                int qResult = wAdo.SqlCommandEtc(sCommand, "update_HACCP_DOCS");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
            return 1;
        }

         public int insert_samsung_Item()
         {
             try
             {
                 wnAdo wAdo = new wnAdo();
                 StringBuilder sb = new StringBuilder();

                 sb = new StringBuilder();

                 sb.AppendLine("select * from N_ITEM_CODE ");

                 SqlCommand sCommand = new SqlCommand(sb.ToString());

                 DataTable dt = wAdo.SqlCommandSelect(sCommand);

                 sb = new StringBuilder();
                 int x = 1;
                 x.ToString("D6");
                 sep sp = new sep();
                 for (int i = 0; i < dt.Rows.Count; i++)
                 {
                     Console.WriteLine(dt.Rows[i]["ITEM_CD"].ToString());
                     
                     sb.AppendLine("INSERT INTO T_상품정보 ( ");
                     sb.AppendLine("   사업자번호  ");
                     sb.AppendLine("   ,지점코드 ");
                     sb.AppendLine("   ,상품코드 ");
                     sb.AppendLine("   ,상품명 ");
                     sb.AppendLine("   ,상품별칭 ");
                     sb.AppendLine("   ,규격 ");
                     sb.AppendLine("   ,사입품 ");
                     sb.AppendLine("   ,정렬순서 ");
                     sb.AppendLine("   ,낱개기본판매수량 ");
                     sb.AppendLine("   ,낱개기본도매수량 ");
                     sb.AppendLine("   ,낱개입고단가 ");
                     sb.AppendLine("   ,낱개판매단가 ");
                     sb.AppendLine("   ,낱개도매단가 ");
                     sb.AppendLine("   ,낱개바코드 ");
                     sb.AppendLine("   ,입수수량  ");
                     sb.AppendLine("   ,박스기본판매수량  ");
                     sb.AppendLine("   ,박스기본도매수량  ");
                     sb.AppendLine("   ,박스입고단가  ");
                     sb.AppendLine("   ,박스판매단가  ");
                     sb.AppendLine("   ,박스도매단가  ");
                     sb.AppendLine("   ,박스바코드  ");
                     sb.AppendLine("   ,중간입수수량  ");
                     sb.AppendLine("   ,중간기본판매수량  ");
                     sb.AppendLine("   ,중간기본도매수량  ");
                     sb.AppendLine("   ,중간입고단가  ");
                     sb.AppendLine("   ,중간판매단가  ");
                     sb.AppendLine("   ,중간도매단가  ");
                     sb.AppendLine("   ,중간바코드  ");
                     sb.AppendLine("   ,상품구분  ");
                     sb.AppendLine("   ,과세구분  ");
                     sb.AppendLine("   ,상품유형코드  ");
                     sb.AppendLine("   ,제조사코드  ");
                     sb.AppendLine("   ,주매입처코드  ");
                     sb.AppendLine("   ,유통기간  ");
                     sb.AppendLine("   ,비고  ");
                     sb.AppendLine("   ,현재재고  ");
                     sb.AppendLine("   ,안전재고  ");
                     sb.AppendLine("   ,사용여부  ");
                     sb.AppendLine("   ,상품규격  ");
                     sb.AppendLine("   ,초성명칭  ");
                     sb.AppendLine("   ,등록사원번호  ");
                     sb.AppendLine("   ,등록일시  ");
                     sb.AppendLine("   ,Old_Code  ");
                     sb.AppendLine("   ,출고위치  ");
                     sb.AppendLine("   ,기준이익율여부  ");
                     sb.AppendLine("   ,기준이익율  ");
                     sb.AppendLine("   ,기준단가  ");
                     sb.AppendLine("   ,중상기준이익율  ");
                     sb.AppendLine("   ,중상기준단가  ");
                     sb.AppendLine("   ,수량별단가여부  ");  

                     sb.AppendLine(") VALUES (  ");

                     sb.AppendLine("  '"+Common.p_saupNo+"'  ");
                     sb.AppendLine(",   '0'    ");
                     sb.AppendLine(",   '"+(i+100001).ToString()+"'    ");
                     sb.AppendLine(",   '" + dt.Rows[i]["ITEM_NM"].ToString() + "'   ");
                     sb.AppendLine(",   ''  ");
                     sb.AppendLine(",   '" + dt.Rows[i]["SPEC"].ToString() + "'   ");
                     sb.AppendLine(",   'N'  ");
                     sb.AppendLine(",   '999999'  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   " + dt.Rows[i]["INPUT_PRICE"].ToString() + "   ");
                     sb.AppendLine(",   " + dt.Rows[i]["OUTPUT_PRICE"].ToString() + "   ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   ''  ");
                     sb.AppendLine(",   1  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   ''  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   ''  ");
                     sb.AppendLine(",   '1'  ");
                     sb.AppendLine(",   '1'  ");
                     sb.AppendLine(",   ''  ");
                     sb.AppendLine(",   ''  ");
                     sb.AppendLine(",   ''  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   '" + dt.Rows[i]["COMMENT"].ToString() + "'   ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   '0'    ");
                     sb.AppendLine(",   '" + dt.Rows[i]["ITEM_NM"].ToString() + dt.Rows[i]["SPEC"].ToString() + "'   ");
                     sb.AppendLine(",   '" + dt.Rows[i]["ITEM_NM"].ToString() + ":" +sp.Seperate(dt.Rows[i]["ITEM_NM"].ToString()).Substring(1)+ "'   ");
                     sb.AppendLine(",   '100'  ");
                     sb.AppendLine(",   getdate()  ");
                     sb.AppendLine(",   '" + dt.Rows[i]["ITEM_CD"].ToString() +"'   ");
                     sb.AppendLine(",   ''  ");
                     sb.AppendLine(",   'N'  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   0  ");
                     sb.AppendLine(",   'N'  ");
                     sb.AppendLine(" ) ");
                    
                 }
                 SqlCommand sCommand2 = new SqlCommand(sb.ToString());
                 int qResult = wAdo.SqlCommandEtc_Jang(sCommand2, "INSERT_SAMSUNG_ITEM");
                 Console.WriteLine(qResult);
                  
                  

                 return 0;
                 
                 int qResult = wAdo.SqlCommandEtc(sCommand, "update_HACCP_DOCS");
                 if (qResult > 0)
                 {
                     return 0;
                 }
                 else return 1;
             }
             catch (Exception e)
             {
                 Console.WriteLine(e.Message + " - " + e.ToString());
                 wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                 return 9;
             }
             return 1;
         }
         




        public int update_Jang_linkcd()
        {

            try{
            wnAdo wAdo = new wnAdo();
                 StringBuilder sb = new StringBuilder();

                 sb = new StringBuilder();

                 sb.AppendLine("select 상품코드, Old_Code from T_상품정보 where 사업자번호 = '" + Common.p_saupNo + "' order by Old_Code ");

                 SqlCommand sCommand = new SqlCommand(sb.ToString());

                 DataTable dt = wAdo.SqlCommandSelect_Jang(sCommand);

                 sb = new StringBuilder();

                 for (int i = 0; i < dt.Rows.Count; i++)
                 {
                     Console.WriteLine(dt.Rows[i]["상품코드"].ToString());

                     sb.AppendLine("UPDATE N_ITEM_CODE set LINK_CD = '" + dt.Rows[i]["상품코드"].ToString() + "'  ");
                     sb.AppendLine("WHERE ITEM_CD = '" + dt.Rows[i]["Old_Code"].ToString() + "'   ");

                    
                 }
                 SqlCommand sCommand2 = new SqlCommand(sb.ToString());
                 int qResult = wAdo.SqlCommandEtc(sCommand2, "INSERT_SAMSUNG_ITEM");
                 Console.WriteLine(qResult);
                  
                  

                 return 0;
                 
             }
             catch (Exception e)
             {
                 Console.WriteLine(e.Message + " - " + e.ToString());
                 wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                 return 9;
             }
             return 1;
        }*/

        public DataTable fn_Raw_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.OUTPUT_DATE,");
            sb.AppendLine("       A.OUTPUT_CD, ");
            sb.AppendLine("       B.SEQ, ");
            sb.AppendLine("       A.CUST_CD, ");
            sb.AppendLine("       E.CUST_NM, ");
            sb.AppendLine("       B.LOT_NO, ");
            sb.AppendLine("       B.LOT_SUB, ");
            sb.AppendLine("       B.ITEM_CD, ");
            sb.AppendLine("       C.ITEM_NM, ");
            sb.AppendLine("       C.SPEC, ");
            sb.AppendLine("       B.UNIT_CD, ");
            sb.AppendLine("       D.UNIT_NM, ");
            sb.AppendLine("       B.OUTPUT_AMT, ");
            sb.AppendLine("       B.PRICE, ");
            sb.AppendLine("       B.TOTAL_MONEY, ");
            sb.AppendLine("       B.INPUT_DATE,");
            sb.AppendLine("       B.INPUT_CD, ");
            sb.AppendLine("       B.CUST_CD AS CUST_CD2,");
            sb.AppendLine("       F.OUT_INST_YN, ");
            sb.AppendLine("       (select CUST_NM from N_CUST_CODE where CUST_CD = B.CUST_CD) AS CUST_NM2 ");
            sb.AppendLine(" from F_ITEM_OUT A");
            sb.AppendLine(" inner join F_ITEM_OUT_DETAIL B  ");
            sb.AppendLine(" on A.OUTPUT_DATE = B.OUTPUT_DATE  ");
            sb.AppendLine(" and A.OUTPUT_CD = B.OUTPUT_CD   ");
            sb.AppendLine(" left outer join N_ITEM_CODE C  ");
            sb.AppendLine(" on B.ITEM_CD = C.ITEM_CD ");
            sb.AppendLine(" left outer join N_UNIT_CODE D ");
            sb.AppendLine(" on B.UNIT_CD = D.UNIT_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE E ");
            sb.AppendLine(" on A.CUST_CD = E.CUST_CD ");
            sb.AppendLine(" left outer join F_ITEM_OUT_INST F ");
            sb.AppendLine(" on B.OUTPUT_DATE = F.OUTPUT_DATE ");
            sb.AppendLine("     and B.OUTPUT_CD = F.OUTPUT_CD ");
            sb.AppendLine("     and B.SEQ = F.SEQ");


            sb.AppendLine(condition);
            sb.AppendLine(" order by A.OUTPUT_DATE, A.OUTPUT_CD, B.SEQ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_Work_Inst(string work_date, string end_req, string Comment, conDataGridView in_rm_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb;
                SqlCommand sCommand;

                sb = new StringBuilder();

                sb.AppendLine("SELECT ISNULL(MAX(W_INST_CD),0)+1 AS W_INST_CD FROM F_WORK_INST ");
                sb.AppendLine("WHERE W_INST_DATE = '" + work_date + "' ");

                sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt == null || dt.Rows.Count < 1)
                {
                    return 3;
                }
                string work_cd = dt.Rows[0]["W_INST_CD"].ToString();

                sb.Clear();


                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(W_INST_CD),0)+1 from F_WORK_INST ");
                sb.AppendLine("where W_INST_DATE = '" + work_date + "' ");

                sb.AppendLine("insert into F_WORK_INST(");
                sb.AppendLine("     W_INST_DATE");
                sb.AppendLine("     ,W_INST_CD ");
                sb.AppendLine("     ,RAW_MAT_CD ");
                sb.AppendLine("     ,INST_AMT ");
                sb.AppendLine("     ,INST_NOTICE ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,DELIVERY_DATE ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + work_date + "' ");
                sb.AppendLine("     ,@seq");
                sb.AppendLine("     ,'" + in_rm_dgv.Rows[0].Cells["RAW_MAT_CD"].Value.ToString() + "' ");
                sb.AppendLine("     ," + in_rm_dgv.Rows[0].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + " ");
                sb.AppendLine("     ,'" + Comment + "' ");
                sb.AppendLine("     ,'1' ");
                sb.AppendLine("     , '" + end_req + "' ");
                sb.AppendLine("     , @LOT_NO ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOT_NO", "L" + (work_date.Substring(2) + ((1000 + int.Parse(work_cd))).ToString().Substring(1)).ToString().Replace("-", ""));


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_WORK_INST");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int update_Work_Inst(string work_date, string work_cd, string end_req, string Comment, conDataGridView in_rm_dgv)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb;
                SqlCommand sCommand;

                sb = new StringBuilder();

                sb.AppendLine("UPDATE F_WORK_INST SET ");
                sb.AppendLine("     RAW_MAT_CD = '" + in_rm_dgv.Rows[0].Cells["RAW_MAT_CD"].Value.ToString() + "' ");
                sb.AppendLine("     ,INST_AMT = " + in_rm_dgv.Rows[0].Cells["TOTAL_AMT"].Value.ToString().Replace(",", "") + " ");
                sb.AppendLine("     ,INST_NOTICE = '" + Comment + "' ");
                sb.AppendLine("     ,DELIVERY_DATE = '" + end_req + "' ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine("    WHERE W_INST_DATE = '" + work_date + "'  ");
                sb.AppendLine("    AND W_INST_CD =  '" + work_cd + "'  ");


                sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_WORK_INST");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable fn_Inst_list(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine("     W_INST_DATE ");
            sb.AppendLine("     , W_INST_CD ");
            sb.AppendLine("     , COMPLETE_YN ");
            sb.AppendLine("     , RAW_MAT_CD ");
            sb.AppendLine("     , INST_AMT ");
            sb.AppendLine("     , INST_NOTICE ");
            sb.AppendLine("     , DELIVERY_DATE ");
            sb.AppendLine("     , LOT_NO ");
            sb.AppendLine(" from F_WORK_INST  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by W_INST_DATE, W_INST_CD desc ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@GrpID", sGrp);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Work_Inst_detail(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select A.W_INST_DATE ");
            sb.AppendLine("    ,  A.W_INST_CD ");
            sb.AppendLine("    ,  A.SEQ ");
            sb.AppendLine("    ,  A.INPUT_DATE ");
            sb.AppendLine("    ,  A.INPUT_CD ");
            sb.AppendLine("    ,  A.INPUT_SEQ ");
            sb.AppendLine("    ,  A.SOYO_AMT ");
            sb.AppendLine("    ,  A.TOTAL_AMT ");
            sb.AppendLine("    ,  A.REMAIN_AMT ");
            sb.AppendLine("    ,  A.LOSS_AMT ");
            sb.AppendLine("    ,  D.GRADE_CD ");
            sb.AppendLine("    ,  (SELECT GRADE_NM FROM N_GRADE_CODE WHERE D.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("    ,  D.RAW_MAT_CD ");
            sb.AppendLine("    ,  (SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE D.RAW_MAT_CD = RAW_MAT_CD) AS RAW_MAT_NM ");
            //2019-12-03 이재원씨지엠  원부자재구분을 위해 추가
            sb.AppendLine("    ,  (SELECT RAW_MAT_GUBUN FROM N_RAW_CODE WHERE D.RAW_MAT_CD = RAW_MAT_CD) AS RAW_MAT_GUBUN ");
            sb.AppendLine("    ,  D.CHUGJONG_CD ");
            sb.AppendLine("    ,  (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE D.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("    ,  D.CLASS_CD ");
            sb.AppendLine("    ,  (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE D.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("    ,  D.TYPE_CD ");
            sb.AppendLine("    ,  (SELECT TYPE_NM FROM N_TYPE_CODE WHERE D.TYPE_CD = TYPE_CD) AS TYPE_NM ");
            sb.AppendLine("    ,  D.COUNTRY_CD ");
            sb.AppendLine("    ,  (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE D.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("    ,  D.MF_DATE ");
            sb.AppendLine("    ,  D.EXPRT_DATE ");
            sb.AppendLine("    ,  D.UNION_CD ");
            sb.AppendLine("    ,  D.UNIT_CD ");
            sb.AppendLine("    ,  (SELECT UNIT_NM FROM N_UNIT_CODE WHERE D.UNIT_CD = UNIT_CD) AS UNIT_NM ");
            sb.AppendLine("    ,  (SELECT LABEL_NM FROM N_RAW_CODE WHERE D.RAW_MAT_CD = RAW_MAT_CD ) AS LABEL_NM ");
            sb.AppendLine("    ,  A.DIRECTION ");
            sb.AppendLine("    ,  A.PREV_LOC ");

            sb.AppendLine("FROM F_WORK_INST_DETAIL A ");
            sb.AppendLine("INNER JOIN F_RAW_DETAIL D ");
            sb.AppendLine(" ON A.INPUT_DATE = D.INPUT_DATE ");
            sb.AppendLine(" AND A.INPUT_CD = D.INPUT_CD ");
            sb.AppendLine(" AND A.INPUT_SEQ = D.SEQ ");
            sb.AppendLine(condition);
            sb.AppendLine("ORDER BY A.SEQ ASC");


            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_SlauHouse_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine("     SLAUHOUSE_CD ");
            sb.AppendLine("     , SLAUHOUSE_NM ");
            sb.AppendLine("     , COMMENT ");

            sb.AppendLine(" from N_SLAUHOUSE_CODE  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by SLAUHOUSE_CD ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            //sCommand.Parameters.AddWithValue("@GrpID", sGrp);
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insertSlauHouse(string txt_SlauHouse_cd, string txt_SlauHouse_nm, string txt_SlauHouse_comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_SLAUHOUSE_CODE");
                sb.AppendLine(" where SLAUHOUSE_CD = '" + txt_SlauHouse_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_SLAUHOUSE_CODE(");
                sb.AppendLine("     SLAUHOUSE_CD ");
                sb.AppendLine("     ,SLAUHOUSE_NM ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @SLAUHOUSE_CD ");
                sb.AppendLine(" ,@SLAUHOUSE_NM ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@SLAUHOUSE_CD", txt_SlauHouse_cd);
                sCommand.Parameters.AddWithValue("@SLAUHOUSE_NM", txt_SlauHouse_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_SlauHouse_comment);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_SLAUHOUSE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int updateSlauHouse(string txt_SlauHouse_cd, string txt_SlauHouse_nm, string txt_SlauHouse_comment)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_SLAUHOUSE_CODE set");
                sb.AppendLine("    SLAUHOUSE_CD  = @SLAUHOUSE_CD  ");
                sb.AppendLine("    ,SLAUHOUSE_NM  = @SLAUHOUSE_NM  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where SLAUHOUSE_CD =@SLAUHOUSE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@SLAUHOUSE_CD", txt_SlauHouse_cd);
                sCommand.Parameters.AddWithValue("@SLAUHOUSE_NM", txt_SlauHouse_nm);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_SlauHouse_comment);


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_SLAUHOUSE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteSlauHouse(string txt_SlauHouse_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_SLAUHOUSE_CODE ");
                sb.AppendLine("    where SLAUHOUSE_CD = @SLAUHOUSE_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@SLAUHOUSE_CD", txt_SlauHouse_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_SLAUHOUSE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteLoc(string txt_loc_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("delete from N_LOC_CODE ");
                sb.AppendLine("    where LOC_CD = @LOC_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                sCommand.Parameters.AddWithValue("@LOC_CD", txt_loc_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_LOC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable fn_loc_list()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select LOC_CD");
            sb.AppendLine(" , LOC_NM");
            sb.AppendLine(" , STORAGE_CD");
            sb.AppendLine(" , (SELECT STORAGE_NM FROM N_STORAGE_CODE WHERE STORAGE_CD = A.STORAGE_CD) AS STORAGE_NM");
            sb.AppendLine(" , COMMENT");
            sb.AppendLine(" from N_LOC_CODE A");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        internal int insertLoc(string txt_loc_cd, string txt_loc_nm, string cmb_storage_cd, string txt_loc_cmt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine(" select count(*) as cnt");
                sb.AppendLine(" from N_LOC_CODE");
                sb.AppendLine(" where LOC_CD = '" + txt_loc_cd + "'");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (!dt.Rows[0]["cnt"].ToString().Equals("0"))
                {
                    return 3;
                }

                sb = new StringBuilder();
                sb.AppendLine("insert into N_LOC_CODE(");
                sb.AppendLine("     LOC_CD ");
                sb.AppendLine("     ,LOC_NM ");
                sb.AppendLine("     ,STORAGE_CD ");
                sb.AppendLine("     ,COMMENT ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @LOC_CD ");
                sb.AppendLine(" ,@LOC_NM ");
                sb.AppendLine(" ,@STORAGE_CD ");
                sb.AppendLine(" ,@COMMENT ");
                sb.AppendLine(" ) ");

                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOC_CD", txt_loc_cd);
                sCommand.Parameters.AddWithValue("@LOC_NM", txt_loc_nm);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_storage_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_loc_cmt);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_LOC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        internal int updateLoc(string txt_loc_cd, string txt_loc_nm, string cmb_storage_cd, string txt_loc_cmt)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("update N_LOC_CODE set");
                sb.AppendLine("    LOC_CD  = @LOC_CD  ");
                sb.AppendLine("    ,LOC_NM  = @LOC_NM  ");
                sb.AppendLine("    ,STORAGE_CD  = @STORAGE_CD  ");
                sb.AppendLine("    ,COMMENT  = @COMMENT  ");
                sb.AppendLine("    where LOC_CD =@LOC_CD  ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@LOC_CD", txt_loc_cd);
                sCommand.Parameters.AddWithValue("@LOC_NM", txt_loc_nm);
                sCommand.Parameters.AddWithValue("@STORAGE_CD", cmb_storage_cd);
                sCommand.Parameters.AddWithValue("@COMMENT", txt_loc_cmt);


                int qResult = wAdo.SqlCommandEtc(sCommand, "update_LOC_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int insert_Item_Input(string work_date, string work_cd, string input_date, string lot_no, conDataGridView ItemGrid, conDataGridView inputRmSoyoGrid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand;

                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                sb.AppendLine("insert into F_ITEM_INPUT(");
                sb.AppendLine("     INPUT_DATE ");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,W_INST_DATE ");
                sb.AppendLine("     ,W_INST_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  '" + input_date + "' ");
                sb.AppendLine(" ,@seq ");
                sb.AppendLine(" ,@LOT_NO ");
                sb.AppendLine(" ,@W_INST_DATE ");
                sb.AppendLine(" ,@W_INST_CD ");
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "'   ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < ItemGrid.RowCount; i++)
                {
                    if (ItemGrid.Rows[i].Cells["IT_ITEM_CD"].Value == null || ItemGrid.Rows[i].Cells["IT_ITEM_CD"].Value.ToString().Equals(""))
                    {
                        continue;
                    }
                    else if (ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value == null || ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Equals("")
                        || ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Equals("0"))
                    {
                        continue;
                    }

                    else if (ItemGrid.Rows[i].Cells["IT_UNION_CD_AFTER"].Value == null || ItemGrid.Rows[i].Cells["IT_UNION_CD_AFTER"].Value.ToString().Equals("")
                        )
                    {
                        MessageBox.Show("묶음번호를 모두 입력해주십시오.");
                        return 1;
                    }

                    else if (ItemGrid.Rows[i].Cells["IT_EXPRT_DATE"].Value == null || ItemGrid.Rows[i].Cells["IT_EXPRT_DATE"].Value.ToString().Equals("")
                        )
                    {
                        MessageBox.Show("유통기한을 모두 입력해주십시오.");
                        return 1;
                    }
                    else if (ItemGrid.Rows[i].Cells["IT_FROZEN_GUBUN"].Value == null || ItemGrid.Rows[i].Cells["IT_FROZEN_GUBUN"].Value.ToString().Equals("")
                        )
                    {
                        MessageBox.Show("보관 구분을 모두 입력해주십시오");
                        return 1;
                    }

                    sb.AppendLine("declare @seq" + i + " int ");
                    sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ITEM_INPUT_DETAIL ");
                    sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                    sb.AppendLine("and INPUT_CD = @seq ");

                    sb.AppendLine("insert into F_ITEM_INPUT_DETAIL(");
                    sb.AppendLine("     INPUT_DATE ");
                    sb.AppendLine("     ,INPUT_CD ");
                    sb.AppendLine("     ,SEQ ");
                    sb.AppendLine("     ,ITEM_CD ");
                    sb.AppendLine("     ,INPUT_AMT ");
                    sb.AppendLine("     ,CURR_AMT ");
                    sb.AppendLine("     ,B_UNION_CD ");
                    sb.AppendLine("     ,A_UNION_CD ");
                    sb.AppendLine("     ,EXPRT_DATE ");
                    sb.AppendLine("     ,INPUT_GUBUN ");
                    sb.AppendLine("     ,FROZEN_GUBUN ");
                    sb.AppendLine("     ,LOT_SUB ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("  '" + input_date + "'   ");
                    sb.AppendLine(" ,@seq ");
                    sb.AppendLine(" ,@seq" + i + "  ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_ITEM_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , " + ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Replace(",", "") + "    ");
                    sb.AppendLine(" , " + ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Replace(",", "") + "    ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_UNION_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_UNION_CD_AFTER"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_EXPRT_DATE"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '1'    ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_FROZEN_GUBUN"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + lot_no + "' + RIGHT('000' + CONVERT(nvarchar, @seq" + i + " ),3 )    ");
                    sb.AppendLine(" ,'" + Common.p_strStaffNo + "'   ");
                    sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");

                    sb.AppendLine(" UPDATE N_ITEM_CODE SET ");
                    sb.AppendLine(" BAL_STOCK = BAL_STOCK + " + ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Replace(",", "") + "  ");
                    sb.AppendLine(" WHERE ITEM_CD =  '" + ItemGrid.Rows[i].Cells["IT_ITEM_CD"].Value.ToString() + "'  ");


                }

                sb.AppendLine("UPDATE F_WORK_INST SET ");
                sb.AppendLine(" COMPLETE_YN = '3' ");
                sb.AppendLine(" WHERE W_INST_DATE = '" + work_date + "'   ");
                sb.AppendLine(" AND W_INST_CD = '" + work_cd + "'   ");


                sb.AppendLine("declare @Outseq int ");
                sb.AppendLine("select @Outseq =ISNULL(MAX(OUTPUT_CD),0)+1 from F_RAW_OUTPUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + input_date + "' ");


                for (int i = 0; i < inputRmSoyoGrid.RowCount; i++)
                {
                    if (inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_CD"].Value == null || inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_CD"].Value.ToString().Equals("")
                        || inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_CD"].Value.ToString().Equals("ALL_RAW_MAT_SUM!"))
                    {
                        continue;
                    }
                    else if (!inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_GUBUN"].Value.ToString().Equals("1") && (inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value == null || inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString().Equals("")
                        || inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString().Equals("0")))
                    {
                        continue;
                    }

                    decimal outValue = 0;
                    decimal lossValue = 0;
                    if (inputRmSoyoGrid.Rows[i].Cells["s_LOSS_AMT"].Value == null || inputRmSoyoGrid.Rows[i].Cells["s_LOSS_AMT"].Value.ToString().Equals(""))
                    {
                        inputRmSoyoGrid.Rows[i].Cells["s_LOSS_AMT"].Value = 0;
                    }
                    if (inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value == null || inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString().Equals(""))
                    {
                        inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value = 0;
                    }


                    if (inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_GUBUN"].Value.ToString().Equals("1"))
                    {
                        outValue = decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_SOYO_AMT"].Value.ToString().Replace(",", ""));
                        lossValue = decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_SOYO_AMT"].Value.ToString().Replace(",", "")) - decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString().Replace(",", ""));
                    }
                    else
                    {
                        outValue = decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString());
                        lossValue = decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_LOSS_AMT"].Value.ToString());
                    }

                    sb.AppendLine("UPDATE F_RAW_DETAIL SET ");
                    sb.AppendLine(" " + inputRmSoyoGrid.Rows[i].Cells["s_OUT_LOC"].Value.ToString() + "  =  " + inputRmSoyoGrid.Rows[i].Cells["s_OUT_LOC"].Value.ToString() + " - " + outValue + "  ");
                    sb.AppendLine(" , CURR_AMT = CURR_AMT - " + outValue + "   ");
                    sb.AppendLine(" WHERE INPUT_DATE = '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_DATE"].Value.ToString() + "'   ");
                    sb.AppendLine(" AND INPUT_CD = '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_CD"].Value.ToString() + "'   ");
                    sb.AppendLine(" AND SEQ = '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_SEQ"].Value.ToString() + "'   ");


                    sb.AppendLine("declare @Outseq" + i + " int ");
                    sb.AppendLine("select @Outseq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_OUTPUT ");
                    sb.AppendLine("where OUTPUT_DATE = '" + input_date + "' ");
                    sb.AppendLine("and OUTPUT_CD = @Outseq ");

                    sb.AppendLine("insert into F_RAW_OUTPUT(");
                    sb.AppendLine("     OUTPUT_DATE ");
                    sb.AppendLine("     ,OUTPUT_CD ");
                    sb.AppendLine("     ,SEQ ");
                    sb.AppendLine("     ,RAW_MAT_CD ");
                    sb.AppendLine("     ,TOTAL_AMT ");
                    sb.AppendLine("     ,LOT_NO ");
                    sb.AppendLine("     ,INPUT_DATE ");
                    sb.AppendLine("     ,INPUT_CD ");
                    sb.AppendLine("     ,INPUT_SEQ ");
                    sb.AppendLine("     ,OUTPUT_UNIT ");
                    sb.AppendLine("     ,OUTPUT_AMT ");
                    sb.AppendLine("     ,LOSS_AMT ");
                    sb.AppendLine("     ,OUTPUT_GUBUN ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("  '" + input_date + "'   ");
                    sb.AppendLine(" ,@Outseq ");
                    sb.AppendLine(" ,@Outseq" + i + "  ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , " + inputRmSoyoGrid.Rows[i].Cells["s_SOYO_AMT"].Value.ToString().Replace(",", "") + "    ");
                    sb.AppendLine(" , @LOT_NO    ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_DATE"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_SEQ"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_UNIT_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , " + outValue + "    ");
                    sb.AppendLine(" , " + lossValue + "    ");
                    sb.AppendLine(" , '1'    ");
                    sb.AppendLine(" ) ");
                }




                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", work_date);
                sCommand.Parameters.AddWithValue("@W_INST_CD", work_cd);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@LOT_NO", lot_no);

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_ITEM_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable fn_Item_Input_List_CZM(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         Z.INPUT_DATE ");
            sb.AppendLine("         ,Z.INPUT_CD ");
            sb.AppendLine("         ,A.LOT_NO ");
            sb.AppendLine("         ,Z.W_INST_DATE ");
            sb.AppendLine("         ,Z.W_INST_CD ");
            sb.AppendLine("         ,A.RAW_MAT_CD ");
            sb.AppendLine("         ,A.INST_AMT ");
            sb.AppendLine("         ,A.COMPLETE_YN ");
            sb.AppendLine("         ,A.DELIVERY_DATE ");
            sb.AppendLine("         ,A.INST_NOTICE ");


            sb.AppendLine("from F_ITEM_INPUT Z ");
            sb.AppendLine("left outer join F_WORK_INST A ");
            sb.AppendLine("ON A.W_INST_DATE = Z.W_INST_DATE ");
            sb.AppendLine("AND A.W_INST_CD = Z.W_INST_CD ");

            sb.AppendLine(condition);
            sb.AppendLine("order by Z.INPUT_DATE , Z.INPUT_CD desc");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Input_Detail_CZM(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select ");
            sb.AppendLine("         A.INPUT_DATE ");
            sb.AppendLine("         ,A.INPUT_CD ");
            sb.AppendLine("         ,A.SEQ ");
            sb.AppendLine("         ,A.ITEM_CD ");
            sb.AppendLine("         ,A.INPUT_AMT ");
            sb.AppendLine("         ,A.A_UNION_CD ");
            sb.AppendLine("         ,A.B_UNION_CD ");
            sb.AppendLine("         ,A.EXPRT_DATE ");
            sb.AppendLine("         ,A.CURR_AMT - ISNULL(R.TOTAL_AMT,0) AS CURR_AMT ");
            sb.AppendLine("         ,A.FROZEN_GUBUN ");
            sb.AppendLine("         ,C.LOT_NO ");
            sb.AppendLine("         ,'STORE_2F' AS STORE_GUBUN ");

            sb.AppendLine("         ,B.ITEM_NM ");
            sb.AppendLine("         ,B.HAMYANG ");
            sb.AppendLine("         ,B.LABEL_NM ");
            sb.AppendLine("         ,B.TYPE_CD ");
            sb.AppendLine("         ,B.UNIT_CD ");

            sb.AppendLine("     ,B.CHUGJONG_CD   ");
            sb.AppendLine("     ,B.COUNTRY_CD   ");
            sb.AppendLine("     ,B.CLASS_CD   ");

            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM   ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM   ");

            sb.AppendLine("         ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE B.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("         ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE B.TYPE_CD = TYPE_CD) AS TYPE_NM  ");


            sb.AppendLine("from F_ITEM_INPUT_DETAIL A ");
            sb.AppendLine("left outer join N_ITEM_CODE B");
            sb.AppendLine("on A.ITEM_CD =  B.ITEM_CD ");
            sb.AppendLine("left outer join F_ITEM_INPUT C");
            sb.AppendLine("on A.INPUT_DATE =  C.INPUT_DATE ");
            sb.AppendLine("AND A.INPUT_CD =  C.INPUT_CD ");

            sb.AppendLine("     LEFT OUTER JOIN ( ");
            sb.AppendLine(" 	select D.INPUT_DATE ");
            sb.AppendLine(" 	, D.INPUT_CD ");
            sb.AppendLine(" 	, D.INPUT_SEQ ");
            sb.AppendLine(" 	, SUM(TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine(" 	FROM F_OUT_JISI A ");
            sb.AppendLine(" 	LEFT OUTER JOIN F_OUT_JISI_DETAIL D ");
            sb.AppendLine(" 	on A.JISI_DATE = D.JISI_DATE ");
            sb.AppendLine(" 	and A.JISI_CD = D.JISI_CD ");
            sb.AppendLine(" 	where (A.COMPLETE_YN = 'N'  ");
            sb.AppendLine(" 	 or A.COMPLETE_YN is null ) ");
            sb.AppendLine(" 	 and D.PRODUCT_GUBUN = '2' ");
            sb.AppendLine(" 	 GROUP BY D.INPUT_DATE, D.INPUT_CD, D.INPUT_SEQ ");
            sb.AppendLine(" 	 ) R ");
            sb.AppendLine(" on R.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" and R.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" and R.INPUT_SEQ = A.SEQ ");

            sb.AppendLine(condition + " and A.CURR_AMT - ISNULL(R.TOTAL_AMT,0)  > 0 ");
            sb.AppendLine("order by A.SEQ ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_Output_List_CZM(string condition)
        {
            StringBuilder sb = new StringBuilder();

            //---hsp 출력물하면서 수정
            sb.AppendLine("select  ");
            sb.AppendLine("     A.RAW_MAT_CD   ");
            sb.AppendLine("     ,A.TOTAL_AMT   ");
            sb.AppendLine("     ,A.LOT_NO   ");
            sb.AppendLine("     ,A.SEQ   ");
            sb.AppendLine("     ,A.INPUT_DATE   ");
            sb.AppendLine("     ,A.INPUT_CD   ");
            sb.AppendLine("     ,A.INPUT_SEQ   ");
            sb.AppendLine("     ,A.OUTPUT_AMT   ");
            sb.AppendLine("     ,A.LOSS_AMT   ");
            sb.AppendLine("     ,A.OUTPUT_UNIT   ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE A.OUTPUT_UNIT = UNIT_CD) AS UNIT_NM  ");


            sb.AppendLine("     ,B.RAW_MAT_NM   ");
            sb.AppendLine("     ,B.CHUGJONG_CD   ");
            sb.AppendLine("     ,B.COUNTRY_CD   ");
            sb.AppendLine("     ,B.OUTPUT_UNIT   ");
            sb.AppendLine("     ,B.CLASS_CD   ");
            sb.AppendLine("     ,B.LABEL_NM   ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN   ");

            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM   ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM   ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE B.OUTPUT_UNIT = UNIT_CD ) AS UNIT_NM   ");

            sb.AppendLine("     ,C.EXPRT_DATE   ");
            sb.AppendLine("     ,C.UNION_CD   ");
            sb.AppendLine("     ,E.DIRECTION   ");

            sb.AppendLine(" from F_RAW_OUTPUT A");
            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on A.RAW_MAT_CD = B.RAW_MAT_CD  ");
            sb.AppendLine(" left outer join F_RAW_DETAIL C ");
            sb.AppendLine(" on C.INPUT_DATE = A.INPUT_DATE  ");
            sb.AppendLine(" and C.INPUT_CD = A.INPUT_CD  ");
            sb.AppendLine(" and C.SEQ = A.INPUT_SEQ  ");
            sb.AppendLine(" left outer join F_WORK_INST D ");
            sb.AppendLine(" on D.LOT_NO = A.LOT_NO  ");
            sb.AppendLine(" left outer join F_WORK_INST_DETAIL E ");
            sb.AppendLine(" on E.W_INST_DATE = D.W_INST_DATE  ");
            sb.AppendLine(" and E.W_INST_CD = D.W_INST_CD  ");
            sb.AppendLine(" and C.INPUT_DATE = E.INPUT_DATE  ");
            sb.AppendLine(" and C.INPUT_CD = E.INPUT_CD  ");
            sb.AppendLine(" and C.SEQ = E.INPUT_SEQ  ");
            sb.AppendLine(" and E.RAW_MAT_CD = B.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by  A.OUTPUT_DATE, A.OUTPUT_CD, A.SEQ ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Raw_Item_List(string condition_one, string condition_two)
        {
            StringBuilder sb = new StringBuilder();

            //---hsp 출력물하면서 수정
            sb.AppendLine("select  ");
            sb.AppendLine("     '1' AS RAW_ITEM_GUBUN  ");
            sb.AppendLine("     ,A.RAW_MAT_CD AS ITEM_CD   ");
            sb.AppendLine("     ,A.RAW_MAT_NM AS ITEM_NM  ");
            sb.AppendLine("     ,A.OUTPUT_UNIT AS UNIT_CD   ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE A.OUTPUT_UNIT = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,A.CHUGJONG_CD   ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,A.CLASS_CD   ");
            sb.AppendLine("     ,A.TYPE_CD   ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE A.TYPE_CD = TYPE_CD) AS TYPE_NM  ");


            sb.AppendLine("     ,A.COUNTRY_CD   ");
            sb.AppendLine("     ,A.USED_CD   ");
            sb.AppendLine("     ,A.HAMYANG   ");
            sb.AppendLine("     ,A.LABEL_NM   ");
            sb.AppendLine("     ,A.RAW_MAT_GUBUN  AS GUBUN_DETAIL ");

            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM   ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD ) AS CLASS_NM   ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE A.OUTPUT_UNIT = UNIT_CD ) AS UNIT_NM   ");


            sb.AppendLine(" from N_RAW_CODE A");
            sb.AppendLine(condition_one);


            sb.AppendLine(" UNION ALL ");

            sb.AppendLine("select  ");
            sb.AppendLine("     '2' AS RAW_ITEM_GUBUN  ");
            sb.AppendLine("     ,B.ITEM_CD AS ITEM_CD   ");
            sb.AppendLine("     ,B.ITEM_NM AS ITEM_NM  ");
            sb.AppendLine("     ,B.UNIT_CD AS UNIT_CD   ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE B.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("     ,B.CHUGJONG_CD   ");
            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,B.CLASS_CD   ");
            sb.AppendLine("     ,B.TYPE_CD   ");
            sb.AppendLine("     ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE B.TYPE_CD = TYPE_CD) AS TYPE_NM  ");

            sb.AppendLine("     ,B.HAMYANG   ");
            sb.AppendLine("     ,B.USED_CD   ");

            sb.AppendLine("     ,B.COUNTRY_CD   ");
            sb.AppendLine("     ,B.LABEL_NM   ");
            sb.AppendLine("     ,B.ITEM_GUBUN AS GUBUN_DETAIL   ");

            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM   ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM   ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE B.UNIT_CD = UNIT_CD ) AS UNIT_NM   ");


            sb.AppendLine(" from N_ITEM_CODE B");

            sb.AppendLine(condition_two);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_input_Rm_Item_List(string product_cd, string product_gubun)
        {
            StringBuilder sb = new StringBuilder();

            DataTable dt = null;
            if (product_gubun.Equals("상품"))
            {
                dt = fn_Input_Detail_List_Add_StoreGubun("WHERE A.RAW_MAT_CD = '" + product_cd + "' ");
            }
            else
            {
                dt = fn_Item_Input_Detail_CZM("WHERE A.ITEM_CD = '" + product_cd + "'  ");
            }

            return dt;
        }



        public int insert_Out_Jisi_List(
            string txt_output_date
            , string txt_cust_cd
            , string txt_plan_date
            , string txt_plan_cd
            , string txt_tax_cd
            , conDataGridView ProductGrid
            , conDataGridView TotalSumGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = null;


                sb.AppendLine("UPDATE F_PLAN SET ");
                sb.AppendLine(" WORK_YN = 'Y' ");
                sb.AppendLine(" ,UPSTAFF = '" + Common.p_strStaffNo + "'  ");
                sb.AppendLine(" ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine(" WHERE PLAN_DATE = '" + txt_plan_date + "'   ");
                sb.AppendLine(" AND PLAN_CD = '" + txt_plan_cd + "'   ");





                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(JISI_CD),0)+1 from F_OUT_JISI ");
                sb.AppendLine("where JISI_DATE = '" + txt_output_date + "' ");


                sb.AppendLine("insert into F_OUT_JISI(");
                sb.AppendLine("     JISI_DATE ");
                sb.AppendLine("     ,JISI_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,PLAN_DATE ");
                sb.AppendLine("     ,PLAN_CD ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("     ,ALL_TAX_MONEY ");
                sb.AppendLine("     ,COMPLETE_YN ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  @JISI_DATE ");
                sb.AppendLine(" ,@seq ");
                sb.AppendLine(" ,@CUST_CD ");
                sb.AppendLine(" ,@PLAN_DATE ");
                sb.AppendLine(" ,@PLAN_CD ");
                sb.AppendLine(" ,@ALL_TOTAL_MONEY ");
                sb.AppendLine(" ,@ALL_SUPPLY_MONEY ");
                sb.AppendLine(" ,@ALL_TAX_MONEY ");
                sb.AppendLine(" ,@COMPLETE_YN ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                int cnt = 0;
                bool isAmtOverZero = false;
                bool isAmtunderZero = false;
                for (int i = 0; i < ProductGrid.RowCount; i++)
                {
                    DataTable dtTemp = (DataTable)ProductGrid.Rows[i].Cells["INPUT_DGV"].Value;

                    if (decimal.Parse(ProductGrid.Rows[i].Cells["OUT_AMT"].Value.ToString()) > 0)
                    {
                        isAmtOverZero = true;
                    }
                    if (decimal.Parse(ProductGrid.Rows[i].Cells["OUT_AMT"].Value.ToString()) < 0)
                    {
                        isAmtunderZero = true;
                    }

                    for (int j = 0; j < dtTemp.Rows.Count; j++)
                    {
                        sb.AppendLine("declare @seq" + cnt + " int ");
                        sb.AppendLine("select @seq" + cnt + " =ISNULL(MAX(SEQ),0)+1 from F_OUT_JISI_DETAIL ");
                        sb.AppendLine("where JISI_DATE = '" + txt_output_date + "' ");
                        sb.AppendLine("AND JISI_CD = @seq ");

                        sb.AppendLine("insert into F_OUT_JISI_DETAIL(");
                        sb.AppendLine("     JISI_DATE ");
                        sb.AppendLine("     ,JISI_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,PRODUCT_GUBUN ");
                        sb.AppendLine("     ,STORE_GUBUN ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,TOTAL_PRICE ");
                        sb.AppendLine("     ,PLAN_DATE ");
                        sb.AppendLine("     ,PLAN_CD ");
                        sb.AppendLine("     ,PLAN_SEQ ");
                        sb.AppendLine("     ,INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,INPUT_SEQ ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("  '" + txt_output_date + "' ");
                        sb.AppendLine(" ,@seq ");
                        sb.AppendLine(" ,@seq" + cnt + "  ");
                        sb.AppendLine(" ,'" + (ProductGrid.Rows[i].Cells["PRODUCT_GUBUN"].Value.ToString().Equals("상품") ? "1" : "2") + "' ");
                        sb.AppendLine(" ,'" + dtTemp.Rows[j]["T_STORE_GUBUN"].ToString() + "' ");
                        sb.AppendLine(" ," + dtTemp.Rows[j]["T_USE_AMT"].ToString().Replace(",", "") + "   ");
                        sb.AppendLine(" ," + ProductGrid.Rows[i].Cells["OUT_PRICE"].Value.ToString().Replace(",", "") + "   ");
                        sb.AppendLine(" ,'" + txt_plan_date + "'   ");
                        sb.AppendLine(" ,'" + txt_plan_cd + "'   ");
                        sb.AppendLine(" ," + ProductGrid.Rows[i].Cells["No"].Value.ToString() + "   ");
                        sb.AppendLine(" ,'" + dtTemp.Rows[j]["T_INPUT_DATE"].ToString() + "'   ");
                        sb.AppendLine(" ,'" + dtTemp.Rows[j]["T_INPUT_CD"].ToString() + "'   ");
                        sb.AppendLine(" ,'" + dtTemp.Rows[j]["T_INPUT_SEQ"].ToString() + "'   ");
                        sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                        sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                        sb.AppendLine(" ) ");
                        cnt++;
                    }
                }

                if (!isAmtOverZero)
                {
                    MessageBox.Show("최소 1이상의 출고지시를 하십시오.");
                    return 1;
                }
                if (isAmtunderZero)
                {
                    MessageBox.Show("음수값은 사용할 수 없습니다.");
                    return 1;
                }




                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@JISI_DATE", txt_output_date);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@PLAN_DATE", txt_plan_date);
                sCommand.Parameters.AddWithValue("@PLAN_CD", txt_plan_cd);
                sCommand.Parameters.AddWithValue("@ALL_TOTAL_MONEY", TotalSumGrid.Rows[0].Cells["SUM_TOTAL_MONEY"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@ALL_SUPPLY_MONEY", TotalSumGrid.Rows[0].Cells["SUM_OUT_MONEY"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@ALL_TAX_MONEY", TotalSumGrid.Rows[0].Cells["SUM_TAX"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@COMPLETE_YN", "N");

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable fn_Out_Jisi_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine(" A.JISI_DATE ");
            sb.AppendLine(" ,A.JISI_CD ");
            sb.AppendLine(" ,A.CUST_CD ");
            sb.AppendLine(" ,(SELECT CUST_NM FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD)AS CUST_NM ");
            sb.AppendLine(" ,(SELECT TAX_CD FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD)AS TAX_CD ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '220' AND S_CODE = (SELECT TAX_CD FROM N_CUST_CODE WHERE A.CUST_CD = CUST_CD) ) AS TAX_NM ");
            sb.AppendLine(" ,A.PLAN_DATE ");
            sb.AppendLine(" ,A.PLAN_CD ");
            sb.AppendLine(" ,B.COMMENT ");
            sb.AppendLine(" ,A.COMPLETE_YN ");
            sb.AppendLine(" ,A.ALL_TOTAL_MONEY ");
            sb.AppendLine(" ,A.ALL_SUPPLY_MONEY ");
            sb.AppendLine(" ,A.ALL_TAX_MONEY ");
            sb.AppendLine(" FROM F_OUT_JISI A ");
            sb.AppendLine(" LEFT OUTER JOIN F_PLAN B");
            sb.AppendLine(" ON B.PLAN_DATE = A.PLAN_DATE ");
            sb.AppendLine(" AND B.PLAN_CD = A.PLAN_CD ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Out_Jisi_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select ");
            sb.AppendLine(" A.JISI_DATE ");
            sb.AppendLine(" ,A.JISI_CD ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,A.PRODUCT_GUBUN ");
            sb.AppendLine(" ,A.PLAN_DATE ");
            sb.AppendLine(" ,A.PLAN_CD ");
            sb.AppendLine(" ,A.PLAN_SEQ ");
            sb.AppendLine(" ,A.INPUT_DATE ");
            sb.AppendLine(" ,A.INPUT_CD ");
            sb.AppendLine(" ,A.INPUT_SEQ ");
            sb.AppendLine(" ,A.TOTAL_AMT ");
            sb.AppendLine(" ,A.TOTAL_PRICE ");
            sb.AppendLine(" ,B.STORE_1F AS CURR_AMT ");
            sb.AppendLine(" ,B.EXPRT_DATE ");

            sb.AppendLine(" ,B.RAW_MAT_CD AS PRODUCT_CD ");
            sb.AppendLine(" ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE B.RAW_MAT_CD = RAW_MAT_CD) AS PRODUCT_NM ");
            sb.AppendLine(" ,B.CHUGJONG_CD ");
            sb.AppendLine(" ,B.CLASS_CD ");
            sb.AppendLine(" ,B.COUNTRY_CD ");
            sb.AppendLine(" ,B.TYPE_CD ");
            sb.AppendLine(" ,C.LABEL_NM ");

            sb.AppendLine(" ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine(" ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine(" ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            sb.AppendLine(" ,A.STORE_GUBUN ");

            sb.AppendLine(" FROM F_OUT_JISI_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_DETAIL B");
            sb.AppendLine(" ON B.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" AND B.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" AND B.SEQ = A.INPUT_SEQ ");
            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE C");
            sb.AppendLine(" ON B.RAW_MAT_CD = C.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine("AND PRODUCT_GUBUN = '1'  AND B.STORE_1F > 0  AND A.STORE_GUBUN = 'STORE_1F'  ");

            sb.AppendLine(" UNION ALL ");


            sb.AppendLine(" select ");
            sb.AppendLine(" A.JISI_DATE ");
            sb.AppendLine(" ,A.JISI_CD ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,A.PRODUCT_GUBUN ");
            sb.AppendLine(" ,A.PLAN_DATE ");
            sb.AppendLine(" ,A.PLAN_CD ");
            sb.AppendLine(" ,A.PLAN_SEQ ");
            sb.AppendLine(" ,A.INPUT_DATE ");
            sb.AppendLine(" ,A.INPUT_CD ");
            sb.AppendLine(" ,A.INPUT_SEQ ");
            sb.AppendLine(" ,A.TOTAL_AMT ");
            sb.AppendLine(" ,A.TOTAL_PRICE ");
            sb.AppendLine(" ,B.STORE_1NF AS CURR_AMT ");
            sb.AppendLine(" ,B.EXPRT_DATE ");

            sb.AppendLine(" ,B.RAW_MAT_CD AS PRODUCT_CD ");
            sb.AppendLine(" ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE B.RAW_MAT_CD = RAW_MAT_CD) AS PRODUCT_NM ");
            sb.AppendLine(" ,B.CHUGJONG_CD ");
            sb.AppendLine(" ,B.CLASS_CD ");
            sb.AppendLine(" ,B.COUNTRY_CD ");
            sb.AppendLine(" ,B.TYPE_CD ");
            sb.AppendLine(" ,C.LABEL_NM ");

            sb.AppendLine(" ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine(" ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine(" ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            sb.AppendLine(" ,A.STORE_GUBUN ");

            sb.AppendLine(" FROM F_OUT_JISI_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_DETAIL B");
            sb.AppendLine(" ON B.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" AND B.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" AND B.SEQ = A.INPUT_SEQ ");
            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE C");
            sb.AppendLine(" ON B.RAW_MAT_CD = C.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine("AND PRODUCT_GUBUN = '1'  AND B.STORE_1NF > 0  AND A.STORE_GUBUN = 'STORE_1NF' ");

            sb.AppendLine(" UNION ALL ");

            sb.AppendLine(" select ");
            sb.AppendLine(" A.JISI_DATE ");
            sb.AppendLine(" ,A.JISI_CD ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,A.PRODUCT_GUBUN ");
            sb.AppendLine(" ,A.PLAN_DATE ");
            sb.AppendLine(" ,A.PLAN_CD ");
            sb.AppendLine(" ,A.PLAN_SEQ ");
            sb.AppendLine(" ,A.INPUT_DATE ");
            sb.AppendLine(" ,A.INPUT_CD ");
            sb.AppendLine(" ,A.INPUT_SEQ ");
            sb.AppendLine(" ,A.TOTAL_AMT ");
            sb.AppendLine(" ,A.TOTAL_PRICE ");
            sb.AppendLine(" ,B.STORE_UF AS CURR_AMT ");
            sb.AppendLine(" ,B.EXPRT_DATE ");

            sb.AppendLine(" ,B.RAW_MAT_CD AS PRODUCT_CD ");
            sb.AppendLine(" ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE B.RAW_MAT_CD = RAW_MAT_CD) AS PRODUCT_NM ");
            sb.AppendLine(" ,B.CHUGJONG_CD ");
            sb.AppendLine(" ,B.CLASS_CD ");
            sb.AppendLine(" ,B.COUNTRY_CD ");
            sb.AppendLine(" ,B.TYPE_CD ");
            sb.AppendLine(" ,C.LABEL_NM ");

            sb.AppendLine(" ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine(" ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine(" ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            sb.AppendLine(" ,A.STORE_GUBUN ");

            sb.AppendLine(" FROM F_OUT_JISI_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_DETAIL B");
            sb.AppendLine(" ON B.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" AND B.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" AND B.SEQ = A.INPUT_SEQ ");
            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE C");
            sb.AppendLine(" ON B.RAW_MAT_CD = C.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine("AND PRODUCT_GUBUN = '1'  AND B.STORE_UF > 0  AND A.STORE_GUBUN = 'STORE_UF'  ");

            sb.AppendLine(" UNION ALL ");

            sb.AppendLine(" select ");
            sb.AppendLine(" A.JISI_DATE ");
            sb.AppendLine(" ,A.JISI_CD ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,A.PRODUCT_GUBUN ");
            sb.AppendLine(" ,A.PLAN_DATE ");
            sb.AppendLine(" ,A.PLAN_CD ");
            sb.AppendLine(" ,A.PLAN_SEQ ");
            sb.AppendLine(" ,A.INPUT_DATE ");
            sb.AppendLine(" ,A.INPUT_CD ");
            sb.AppendLine(" ,A.INPUT_SEQ ");
            sb.AppendLine(" ,A.TOTAL_AMT ");
            sb.AppendLine(" ,A.TOTAL_PRICE ");
            sb.AppendLine(" ,B.REMAIN_AMT AS CURR_AMT ");
            sb.AppendLine(" ,B.EXPRT_DATE ");

            sb.AppendLine(" ,B.RAW_MAT_CD AS PRODUCT_CD ");
            sb.AppendLine(" ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE B.RAW_MAT_CD = RAW_MAT_CD) AS PRODUCT_NM ");
            sb.AppendLine(" ,B.CHUGJONG_CD ");
            sb.AppendLine(" ,B.CLASS_CD ");
            sb.AppendLine(" ,B.COUNTRY_CD ");
            sb.AppendLine(" ,B.TYPE_CD ");
            sb.AppendLine(" ,C.LABEL_NM ");

            sb.AppendLine(" ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine(" ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine(" ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            sb.AppendLine(" ,A.STORE_GUBUN ");

            sb.AppendLine(" FROM F_OUT_JISI_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN F_RAW_DETAIL B");
            sb.AppendLine(" ON B.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" AND B.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" AND B.SEQ = A.INPUT_SEQ ");
            sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE C");
            sb.AppendLine(" ON B.RAW_MAT_CD = C.RAW_MAT_CD ");
            sb.AppendLine(condition);
            sb.AppendLine("AND PRODUCT_GUBUN = '1'  AND B.REMAIN_AMT > 0  AND A.STORE_GUBUN = 'REMAIN_AMT'  ");

            sb.AppendLine(" UNION ALL ");

            sb.AppendLine(" select ");
            sb.AppendLine(" A.JISI_DATE ");
            sb.AppendLine(" ,A.JISI_CD ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,A.PRODUCT_GUBUN ");
            sb.AppendLine(" ,A.PLAN_DATE ");
            sb.AppendLine(" ,A.PLAN_CD ");
            sb.AppendLine(" ,A.PLAN_SEQ ");
            sb.AppendLine(" ,A.INPUT_DATE ");
            sb.AppendLine(" ,A.INPUT_CD ");
            sb.AppendLine(" ,A.INPUT_SEQ ");
            sb.AppendLine(" ,A.TOTAL_AMT ");
            sb.AppendLine(" ,A.TOTAL_PRICE ");
            sb.AppendLine(" ,B.CURR_AMT ");
            sb.AppendLine(" ,B.EXPRT_DATE ");

            sb.AppendLine(" ,B.ITEM_CD AS PRODUCT_CD ");
            sb.AppendLine(" ,(SELECT ITEM_NM FROM N_ITEM_CODE WHERE B.ITEM_CD = ITEM_CD) AS ITEM_NM ");
            sb.AppendLine(" ,C.CHUGJONG_CD ");
            sb.AppendLine(" ,C.CLASS_CD ");
            sb.AppendLine(" ,C.COUNTRY_CD ");
            sb.AppendLine(" ,C.TYPE_CD ");
            sb.AppendLine(" ,C.LABEL_NM ");

            sb.AppendLine(" ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE C.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine(" ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE C.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine(" ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE C.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");

            sb.AppendLine(" ,A.STORE_GUBUN ");

            sb.AppendLine(" FROM F_OUT_JISI_DETAIL A ");
            sb.AppendLine(" LEFT OUTER JOIN F_ITEM_INPUT_DETAIL B");
            sb.AppendLine(" ON B.INPUT_DATE = A.INPUT_DATE ");
            sb.AppendLine(" AND B.INPUT_CD = A.INPUT_CD ");
            sb.AppendLine(" AND B.SEQ = A.INPUT_SEQ ");
            sb.AppendLine(" LEFT OUTER JOIN N_ITEM_CODE C");
            sb.AppendLine(" ON C.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine(condition);
            sb.AppendLine("AND PRODUCT_GUBUN = '2'  ");
            sb.AppendLine(" ORDER BY A.JISI_DATE, A.JISI_CD, A.SEQ ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public int Update_Out_Jisi_List(
            string txt_output_date
            , string txt_output_cd
            , string txt_cust_cd
            , string txt_plan_date
            , string txt_plan_cd
            , string txt_tax_cd
            , conDataGridView ProductGrid
            , conDataGridView TotalSumGrid
            , DataTable Del_grid)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = null;

                sb.AppendLine("UPDATE F_OUT_JISI ");
                sb.AppendLine("      SET ALL_TOTAL_MONEY = @ALL_TOTAL_MONEY  ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY = @ALL_SUPPLY_MONEY  ");
                sb.AppendLine("     ,ALL_TAX_MONEY = @ALL_TAX_MONEY  ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120)  ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("    WHERE JISI_DATE = @JISI_DATE ");
                sb.AppendLine("    AND JISI_CD = @JISI_CD ");

                int cnt = 0;
                bool isAmtOverZero = false;
                bool isAmtunderZero = false;

                for (int i = 0; i < ProductGrid.RowCount; i++)
                {
                    DataTable dtTemp = (DataTable)ProductGrid.Rows[i].Cells["INPUT_DGV"].Value;


                    if (decimal.Parse(ProductGrid.Rows[i].Cells["OUT_AMT"].Value.ToString()) > 0)
                    {
                        isAmtOverZero = true;
                    }
                    if (decimal.Parse(ProductGrid.Rows[i].Cells["OUT_AMT"].Value.ToString()) < 0)
                    {
                        isAmtunderZero = true;
                    }


                    for (int j = 0; j < dtTemp.Rows.Count; j++)
                    {
                        if (dtTemp.Rows[j]["DEL_SEQ"] == null || dtTemp.Rows[j]["DEL_SEQ"].ToString().Equals(""))
                        {
                            sb.AppendLine("declare @seq" + cnt + " int ");
                            sb.AppendLine("select @seq" + cnt + " =ISNULL(MAX(SEQ),0)+1 from F_OUT_JISI_DETAIL ");
                            sb.AppendLine("where JISI_DATE = '" + txt_output_date + "' ");
                            sb.AppendLine("AND JISI_CD = '" + txt_output_cd + "'  ");

                            sb.AppendLine("insert into F_OUT_JISI_DETAIL(");
                            sb.AppendLine("     JISI_DATE ");
                            sb.AppendLine("     ,JISI_CD ");
                            sb.AppendLine("     ,SEQ ");
                            sb.AppendLine("     ,PRODUCT_GUBUN ");
                            sb.AppendLine("     ,STORE_GUBUN ");
                            sb.AppendLine("     ,TOTAL_AMT ");
                            sb.AppendLine("     ,TOTAL_PRICE ");
                            sb.AppendLine("     ,PLAN_DATE ");
                            sb.AppendLine("     ,PLAN_CD ");
                            sb.AppendLine("     ,PLAN_SEQ ");
                            sb.AppendLine("     ,INPUT_DATE ");
                            sb.AppendLine("     ,INPUT_CD ");
                            sb.AppendLine("     ,INPUT_SEQ ");
                            sb.AppendLine("     ,INSTAFF ");
                            sb.AppendLine("     ,INTIME ");
                            sb.AppendLine(" ) values ( ");
                            sb.AppendLine("  '" + txt_output_date + "' ");
                            sb.AppendLine(" ,'" + txt_output_cd + "'  ");
                            sb.AppendLine(" ,@seq" + cnt + "  ");
                            sb.AppendLine(" ,'" + (ProductGrid.Rows[i].Cells["PRODUCT_GUBUN"].Value.ToString().Equals("상품") ? "1" : "2") + "' ");
                            sb.AppendLine(" ,'" + dtTemp.Rows[j]["T_STORE_GUBUN"].ToString() + "' ");
                            sb.AppendLine(" ," + dtTemp.Rows[j]["T_USE_AMT"].ToString().Replace(",", "") + "   ");
                            sb.AppendLine(" ," + ProductGrid.Rows[i].Cells["OUT_PRICE"].Value.ToString().Replace(",", "") + "   ");
                            sb.AppendLine(" ,'" + txt_plan_date + "'   ");
                            sb.AppendLine(" ,'" + txt_plan_cd + "'   ");
                            sb.AppendLine(" ," + ProductGrid.Rows[i].Cells["No"].Value.ToString() + "   ");
                            sb.AppendLine(" ,'" + dtTemp.Rows[j]["T_INPUT_DATE"].ToString() + "'   ");
                            sb.AppendLine(" ,'" + dtTemp.Rows[j]["T_INPUT_CD"].ToString() + "'   ");
                            sb.AppendLine(" ,'" + dtTemp.Rows[j]["T_INPUT_SEQ"].ToString() + "'   ");
                            sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                            sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                            sb.AppendLine(" ) ");
                            cnt++;
                        }
                        else
                        {
                            if (decimal.Parse(dtTemp.Rows[j]["T_USE_AMT"].ToString().Replace(",", "")) <= 0)
                            {
                                sb.AppendLine("DELETE FROM F_OUT_JISI_DETAIL ");
                                sb.AppendLine("WHERE JISI_DATE = '" + txt_output_date + "'  ");
                                sb.AppendLine("  and JISI_CD = '" + txt_output_cd + "'  ");
                                sb.AppendLine("  and SEQ = '" + dtTemp.Rows[j]["DEL_SEQ"].ToString() + "'  ");
                            }
                            else
                            {
                                sb.AppendLine("UPDATE F_OUT_JISI_DETAIL ");
                                sb.AppendLine(" SET ");
                                sb.AppendLine(" PRODUCT_GUBUN = '" + (ProductGrid.Rows[i].Cells["PRODUCT_GUBUN"].Value.ToString().Equals("상품") ? "1" : "2") + "' ");
                                sb.AppendLine(" ,TOTAL_AMT = " + dtTemp.Rows[j]["T_USE_AMT"].ToString().Replace(",", "") + "   ");
                                sb.AppendLine(" ,TOTAL_PRICE = " + ProductGrid.Rows[i].Cells["OUT_PRICE"].Value.ToString().Replace(",", "") + "   ");
                                sb.AppendLine("     ,INPUT_DATE ='" + dtTemp.Rows[j]["T_INPUT_DATE"].ToString() + "'  ");
                                sb.AppendLine("     ,INPUT_CD = '" + dtTemp.Rows[j]["T_INPUT_CD"].ToString() + "'   ");
                                sb.AppendLine("     ,INPUT_SEQ = '" + dtTemp.Rows[j]["T_INPUT_SEQ"].ToString() + "'  ");
                                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120)  ");
                                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                                sb.AppendLine("  where JISI_DATE = '" + txt_output_date + "'  ");
                                sb.AppendLine("  and JISI_CD = '" + txt_output_cd + "'  ");
                                sb.AppendLine("  and SEQ = '" + dtTemp.Rows[j]["DEL_SEQ"].ToString() + "'  ");
                            }
                        }
                    }
                }

                if (!isAmtOverZero)
                {
                    MessageBox.Show("최소 1이상의 출고지시를 하십시오.");
                    return 1;
                }
                if (isAmtunderZero)
                {
                    MessageBox.Show("음수값은 사용할 수 없습니다.");
                    return 1;
                }


                for (int i = 0; i < Del_grid.Rows.Count; i++)
                {
                    sb.AppendLine("DELETE FROM F_OUT_JISI_DETAIL ");
                    sb.AppendLine("WHERE JISI_DATE = '" + Del_grid.Rows[i]["JISI_DATE"].ToString() + "'  ");
                    sb.AppendLine("  and JISI_CD = '" + Del_grid.Rows[i]["JISI_CD"].ToString() + "'  ");
                    sb.AppendLine("  and SEQ = '" + Del_grid.Rows[i]["JISI_SEQ"].ToString() + "'  ");
                }




                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@JISI_DATE", txt_output_date);
                sCommand.Parameters.AddWithValue("@JISI_CD", txt_output_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@PLAN_DATE", txt_plan_date);
                sCommand.Parameters.AddWithValue("@PLAN_CD", txt_plan_cd);
                sCommand.Parameters.AddWithValue("@ALL_TOTAL_MONEY", TotalSumGrid.Rows[0].Cells["SUM_TOTAL_MONEY"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@ALL_SUPPLY_MONEY", TotalSumGrid.Rows[0].Cells["SUM_OUT_MONEY"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@ALL_TAX_MONEY", TotalSumGrid.Rows[0].Cells["SUM_TAX"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@COMPLETE_YN", "N");

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_USER_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int delete_Out_Jisi(string output_date, string output_cd, string txt_plan_date, string txt_plan_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();

                sb.AppendLine("DELETE FROM F_OUT_JISI  ");
                sb.AppendLine("WHERE JISI_DATE = @JISI_DATE ");
                sb.AppendLine("AND JISI_CD = @JISI_CD");

                sb.AppendLine("DELETE FROM F_OUT_JISI_DETAIL  ");
                sb.AppendLine("WHERE JISI_DATE = @JISI_DATE ");
                sb.AppendLine("AND JISI_CD = @JISI_CD");


                sb.AppendLine("UPDATE F_PLAN SET ");
                sb.AppendLine(" WORK_YN = 'N' ");
                sb.AppendLine(" ,UPSTAFF = '" + Common.p_strStaffNo + "'  ");
                sb.AppendLine(" ,UPTIME = convert(varchar, getdate(), 120) ");
                sb.AppendLine(" WHERE PLAN_DATE = '" + txt_plan_date + "'   ");
                sb.AppendLine(" AND PLAN_CD = '" + txt_plan_cd + "'   ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@JISI_DATE", output_date);
                sCommand.Parameters.AddWithValue("@JISI_CD", output_cd);


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_Sales_INPUT");
                if (qResult > 0)
                {
                    return 0;
                }
                else return 1;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message + " - " + e.ToString());
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int approval_Product_Output(
            string txt_approval_date
            , string txt_output_date
            , string txt_output_cd
            , string txt_cust_cd
            , string txt_plan_date
            , string txt_plan_cd
            , string txt_tax_cd
            , conDataGridView ProductGrid
            , conDataGridView TotalSumGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = null;


                sb.AppendLine(" select A.JISI_DATE   ");
                sb.AppendLine(" ,A.JISI_CD   ");
                sb.AppendLine(" ,A.SEQ   ");
                sb.AppendLine(" ,A.PRODUCT_GUBUN   ");
                sb.AppendLine(" ,A.PLAN_DATE   ");
                sb.AppendLine(" ,A.PLAN_CD   ");
                sb.AppendLine(" ,A.PLAN_SEQ   ");
                sb.AppendLine(" ,A.INPUT_DATE   ");
                sb.AppendLine(" ,A.INPUT_CD   ");
                sb.AppendLine(" ,A.INPUT_SEQ   ");
                sb.AppendLine(" ,A.STORE_GUBUN   ");
                sb.AppendLine(" ,A.TOTAL_AMT   ");
                sb.AppendLine(" ,A.TOTAL_PRICE   ");
                sb.AppendLine(" ,(SELECT TAX_CD FROM N_CUST_CODE WHERE B.CUST_CD = CUST_CD) AS TAX_CD   ");
                sb.AppendLine(" ,D.VAT_CD   ");
                sb.AppendLine(" ,D.RAW_MAT_CD AS PRODUCT_CD   ");
                sb.AppendLine(" FROM F_OUT_JISI_DETAIL A ");
                sb.AppendLine(" LEFT OUTER JOIN F_OUT_JISI B ");
                sb.AppendLine(" ON A.JISI_DATE = B.JISI_DATE ");
                sb.AppendLine(" AND A.JISI_CD = B.JISI_CD ");
                sb.AppendLine(" LEFT OUTER JOIN F_RAW_DETAIL C ");
                sb.AppendLine(" ON A.INPUT_DATE = C.INPUT_DATE ");
                sb.AppendLine(" AND A.INPUT_CD = C.INPUT_CD ");
                sb.AppendLine(" AND A.INPUT_SEQ = C.SEQ ");
                sb.AppendLine(" LEFT OUTER JOIN N_RAW_CODE D ");
                sb.AppendLine(" ON D.RAW_MAT_CD = C.RAW_MAT_CD ");
                sb.AppendLine(" WHERE A.JISI_DATE = '" + txt_output_date + "'   ");
                sb.AppendLine(" AND A.JISI_CD = '" + txt_output_cd + "'  ");
                sb.AppendLine(" AND A.PRODUCT_GUBUN = '1'  ");

                sb.AppendLine(" UNION ALL  ");

                sb.AppendLine(" select A.JISI_DATE   ");
                sb.AppendLine(" ,A.JISI_CD   ");
                sb.AppendLine(" ,A.SEQ   ");
                sb.AppendLine(" ,A.PRODUCT_GUBUN   ");
                sb.AppendLine(" ,A.PLAN_DATE   ");
                sb.AppendLine(" ,A.PLAN_CD   ");
                sb.AppendLine(" ,A.PLAN_SEQ   ");
                sb.AppendLine(" ,A.INPUT_DATE   ");
                sb.AppendLine(" ,A.INPUT_CD   ");
                sb.AppendLine(" ,A.INPUT_SEQ   ");
                sb.AppendLine(" ,A.STORE_GUBUN   ");
                sb.AppendLine(" ,A.TOTAL_AMT   ");
                sb.AppendLine(" ,A.TOTAL_PRICE   ");
                sb.AppendLine(" ,(SELECT TAX_CD FROM N_CUST_CODE WHERE B.CUST_CD = CUST_CD) AS TAX_CD   ");
                sb.AppendLine(" ,D.VAT_CD   ");
                sb.AppendLine(" ,D.ITEM_CD AS PRODUCT_CD   ");
                sb.AppendLine(" FROM F_OUT_JISI_DETAIL A ");
                sb.AppendLine(" LEFT OUTER JOIN F_OUT_JISI B ");
                sb.AppendLine(" ON A.JISI_DATE = B.JISI_DATE ");
                sb.AppendLine(" AND A.JISI_CD = B.JISI_CD ");
                sb.AppendLine(" LEFT OUTER JOIN F_ITEM_INPUT_DETAIL C ");
                sb.AppendLine(" ON A.INPUT_DATE = C.INPUT_DATE ");
                sb.AppendLine(" AND A.INPUT_CD = C.INPUT_CD ");
                sb.AppendLine(" AND A.INPUT_SEQ = C.SEQ ");
                sb.AppendLine(" LEFT OUTER JOIN N_ITEM_CODE D ");
                sb.AppendLine(" ON D.ITEM_CD = C.ITEM_CD ");
                sb.AppendLine(" WHERE A.JISI_DATE = '" + txt_output_date + "'   ");
                sb.AppendLine(" AND A.JISI_CD = '" + txt_output_cd + "'  ");
                sb.AppendLine(" AND A.PRODUCT_GUBUN = '2'  ");

                sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return 2;
                }
                DataTable dt = wAdo.SqlCommandSelect(sCommand);

                if (dt == null || dt.Rows.Count <= 0)
                {
                    return 3;
                }


                sb.Clear();


                sb.AppendLine("UPDATE F_OUT_JISI ");
                sb.AppendLine("      SET COMPLETE_YN = 'Y'  ");
                sb.AppendLine("     ,UPTIME = convert(varchar, getdate(), 120)  ");
                sb.AppendLine("     ,UPSTAFF = '" + Common.p_strStaffNo + "' ");
                sb.AppendLine("    WHERE JISI_DATE = '" + txt_output_date + "' ");
                sb.AppendLine("    AND JISI_CD = '" + txt_output_cd + "' ");


                sb.AppendLine("declare @seqSales int ");
                sb.AppendLine("select @seqSales =ISNULL(MAX(SALES_CD),0)+1 from F_SALES ");
                sb.AppendLine("where SALES_DATE = '" + txt_approval_date + "' ");


                sb.AppendLine("insert into F_SALES(");
                sb.AppendLine("     SALES_DATE ");
                sb.AppendLine("     ,SALES_CD ");
                sb.AppendLine("     ,SALES_GUBUN ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,JISI_DATE ");
                sb.AppendLine("     ,JISI_CD ");
                sb.AppendLine("     ,ALL_TOTAL_MONEY ");
                sb.AppendLine("     ,ALL_SUPPLY_MONEY ");
                sb.AppendLine("     ,ALL_TAX_MONEY ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine("     ,TAX_CD ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  '" + txt_approval_date + "'  ");
                sb.AppendLine(" ,@seqSales ");
                sb.AppendLine(" ,'2' ");
                sb.AppendLine(" ,'" + txt_cust_cd + "'  ");
                sb.AppendLine(" ,'" + txt_output_date + "'   ");
                sb.AppendLine(" ,'" + txt_output_cd + "'   ");
                sb.AppendLine(" ,@ALL_TOTAL_MONEY ");
                sb.AppendLine(" ,@ALL_SUPPLY_MONEY ");
                sb.AppendLine(" ,@ALL_TAX_MONEY ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine("     ,'" + dt.Rows[0]["TAX_CD"].ToString() + "'   ");
                sb.AppendLine(" ) ");


                sb.AppendLine("UPDATE N_CUST_CODE ");
                sb.AppendLine("      SET BALANCE = BALANCE + @ALL_TOTAL_MONEY ");
                sb.AppendLine("    WHERE CUST_CD = '" + txt_cust_cd + "' ");

                bool isCustDay = isCustDayTotal(txt_approval_date, txt_cust_cd); //일별집계가 있는지 검사

                if (!isCustDay)// 없으면 새로 만듬
                {
                    sb.AppendLine(Create_New_CustDayTotal(txt_approval_date, txt_cust_cd));
                }

                sb.AppendLine("UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" S_SUPPLY_MONEY = S_SUPPLY_MONEY + @ALL_SUPPLY_MONEY ");
                sb.AppendLine(" ,S_TAX_MONEY = S_TAX_MONEY + @ALL_TAX_MONEY ");
                sb.AppendLine(" ,S_TOTAL_MONEY = S_TOTAL_MONEY + @ALL_TOTAL_MONEY ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + txt_approval_date + "'  AND CUST_CD = '" + txt_cust_cd + "'  ");

                sb.AppendLine(CustDayTotal_Change_Balance_Today(txt_approval_date, txt_cust_cd));

                sb.AppendLine(CustDayTotal_Change_Balance(
                    txt_approval_date
                    , txt_cust_cd
                    , TotalSumGrid.Rows[0].Cells["SUM_TOTAL_MONEY"].Value.ToString().Replace(",", "")
                    , "+"));

                sb.AppendLine("declare @RawOutseq int ");//원부자재 출고 CD 생성
                sb.AppendLine("select @RawOutseq =ISNULL(MAX(OUTPUT_CD),0)+1 from F_RAW_OUTPUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + txt_output_date + "' ");

                sb.AppendLine("declare @ItemOutseq int ");//제품 출고 CD 생성
                sb.AppendLine("select @ItemOutseq =ISNULL(MAX(OUTPUT_CD),0)+1 from F_ITEM_OUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + txt_output_date + "' ");

                string PRODUCT_GUBUN = "";
                string INPUT_DATE = "";
                string INPUT_CD = "";
                string INPUT_SEQ = "";
                string TOTAL_AMT = "";
                string TOTAL_PRICE = "";
                string STORE_GUBUN = "";
                string JISI_DATE = "";
                string JISI_CD = "";
                string JISI_SEQ = "";
                string VAT_CD = "";
                string PRODUCT_CD = "";

                for (int i = 0; i < dt.Rows.Count; i++)
                {

                    PRODUCT_GUBUN = dt.Rows[i]["PRODUCT_GUBUN"].ToString();
                    INPUT_DATE = dt.Rows[i]["INPUT_DATE"].ToString();
                    INPUT_CD = dt.Rows[i]["INPUT_CD"].ToString();
                    INPUT_SEQ = dt.Rows[i]["INPUT_SEQ"].ToString();
                    TOTAL_AMT = dt.Rows[i]["TOTAL_AMT"].ToString();
                    TOTAL_PRICE = dt.Rows[i]["TOTAL_PRICE"].ToString();
                    STORE_GUBUN = dt.Rows[i]["STORE_GUBUN"].ToString();
                    JISI_DATE = dt.Rows[i]["JISI_DATE"].ToString();
                    JISI_CD = dt.Rows[i]["JISI_CD"].ToString();
                    JISI_SEQ = dt.Rows[i]["SEQ"].ToString();
                    VAT_CD = dt.Rows[i]["VAT_CD"].ToString();
                    PRODUCT_CD = dt.Rows[i]["PRODUCT_CD"].ToString();


                    sb.AppendLine("declare @SalesDetailseq" + i + " int ");
                    sb.AppendLine("select @SalesDetailseq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_SALES_DETAIL ");
                    sb.AppendLine("where SALES_DATE = '" + txt_output_date + "' ");
                    sb.AppendLine("AND SALES_CD = @seqSales ");

                    sb.AppendLine("insert into F_SALES_DETAIL(");
                    sb.AppendLine("     SALES_DATE ");
                    sb.AppendLine("     ,SALES_CD ");
                    sb.AppendLine("     ,SEQ ");
                    sb.AppendLine("     ,PRODUCT_GUBUN ");
                    sb.AppendLine("     ,STORE_GUBUN ");
                    sb.AppendLine("     ,TOTAL_AMT ");
                    sb.AppendLine("     ,TOTAL_PRICE ");
                    sb.AppendLine("     ,JISI_DATE ");
                    sb.AppendLine("     ,JISI_CD ");
                    sb.AppendLine("     ,JISI_SEQ ");
                    sb.AppendLine("     ,INPUT_DATE ");
                    sb.AppendLine("     ,INPUT_CD ");
                    sb.AppendLine("     ,INPUT_SEQ ");
                    sb.AppendLine("     ,PRODUCT_CD ");
                    sb.AppendLine("     ,VAT_CD ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("  '" + txt_approval_date + "' ");
                    sb.AppendLine(" ,@seqSales ");
                    sb.AppendLine(" ,@SalesDetailseq" + i + "  ");
                    sb.AppendLine(" ,'" + PRODUCT_GUBUN + "' ");
                    sb.AppendLine(" ,'" + STORE_GUBUN + "' ");
                    sb.AppendLine(" ," + TOTAL_AMT + "   ");
                    sb.AppendLine(" ," + TOTAL_PRICE + "   ");
                    sb.AppendLine(" ,'" + JISI_DATE + "'   ");
                    sb.AppendLine(" ,'" + JISI_CD + "'   ");
                    sb.AppendLine(" ," + JISI_SEQ + "   ");
                    sb.AppendLine(" ,'" + INPUT_DATE + "'   ");
                    sb.AppendLine(" ,'" + INPUT_CD + "'   ");
                    sb.AppendLine(" ,'" + INPUT_SEQ + "'   ");
                    sb.AppendLine(" ,'" + PRODUCT_CD + "'   ");
                    sb.AppendLine(" ,'" + VAT_CD + "'   ");
                    sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                    sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");



                    if (PRODUCT_GUBUN.Equals("1")) //상품 출고 F_RAW_DETAIL , F_RAW_OUTPUT , N_RAW_CODE
                    {
                        sb.AppendLine("UPDATE F_RAW_DETAIL SET ");
                        sb.AppendLine("  CURR_AMT = CURR_AMT - " + TOTAL_AMT + "  ");
                        sb.AppendLine("  ," + STORE_GUBUN + " = " + STORE_GUBUN + " - " + TOTAL_AMT + "  ");
                        if (STORE_GUBUN.Equals("STORE_UF")) sb.AppendLine("  ,REMAIN_AMT = REMAIN_AMT - " + TOTAL_AMT + "  ");
                        sb.AppendLine("  ,OUTPUT_YN = 'Y' ");
                        sb.AppendLine("  ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  ,UPSTAFF = '" + Common.p_strStaffNo + "'  ");
                        sb.AppendLine(" WHERE INPUT_DATE = '" + INPUT_DATE + "'  ");
                        sb.AppendLine(" AND INPUT_CD = '" + INPUT_CD + "'  ");
                        sb.AppendLine(" AND SEQ = '" + INPUT_SEQ + "'  ");

                        sb.AppendLine(" UPDATE N_RAW_CODE SET ");
                        sb.AppendLine(" BAL_STOCK = BAL_STOCK - " + TOTAL_AMT + "  ");
                        sb.AppendLine(" WHERE RAW_MAT_CD = '" + PRODUCT_CD + "'  ");


                        sb.AppendLine("declare @Outseq" + i + " int ");
                        sb.AppendLine("select @Outseq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_OUTPUT ");
                        sb.AppendLine("where OUTPUT_DATE = '" + txt_output_date + "' ");
                        sb.AppendLine("and OUTPUT_CD = @RawOutseq ");


                        StringBuilder sb2 = new StringBuilder();

                        sb2.AppendLine(" SELECT A." + STORE_GUBUN + "   ");
                        sb2.AppendLine(" , A.RAW_MAT_CD   ");
                        sb2.AppendLine(" , B.OUTPUT_UNIT   ");
                        sb2.AppendLine(" FROM F_RAW_DETAIL  A ");
                        sb2.AppendLine(" LEFT OUTER JOIN N_RAW_CODE B ");
                        sb2.AppendLine(" ON A.RAW_MAT_CD = B.RAW_MAT_CD ");
                        sb2.AppendLine(" WHERE A.INPUT_DATE = '" + INPUT_DATE + "'  ");
                        sb2.AppendLine(" AND A.INPUT_CD = '" + INPUT_CD + "'  ");
                        sb2.AppendLine(" AND A.SEQ = '" + INPUT_SEQ + "'  ");

                        sCommand = new SqlCommand(sb2.ToString());
                        if (sCommand.CommandText.Equals(null))
                        {
                            wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                            return 2;
                        }
                        DataTable dt2 = wAdo.SqlCommandSelect(sCommand);

                        if (dt2 == null || dt2.Rows.Count <= 0)
                        {
                            return 3;
                        }

                        string THIS_STORE_AMT = dt2.Rows[0][STORE_GUBUN].ToString();
                        string THIS_RAW_MAT_CD = dt2.Rows[0]["RAW_MAT_CD"].ToString();
                        string THIS_UNIT = dt2.Rows[0]["OUTPUT_UNIT"].ToString();

                        sb.AppendLine("insert into F_RAW_OUTPUT(");
                        sb.AppendLine("     OUTPUT_DATE ");
                        sb.AppendLine("     ,OUTPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,RAW_MAT_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,INPUT_SEQ ");
                        sb.AppendLine("     ,SALES_DATE ");
                        sb.AppendLine("     ,SALES_CD ");
                        sb.AppendLine("     ,SALES_SEQ ");
                        sb.AppendLine("     ,OUTPUT_UNIT ");
                        sb.AppendLine("     ,OUTPUT_AMT ");
                        sb.AppendLine("     ,OUTPUT_GUBUN ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine("     ,LOSS_AMT ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("  '" + txt_output_date + "'   ");
                        sb.AppendLine(" ,@RawOutseq ");
                        sb.AppendLine(" ,@Outseq" + i + "  ");
                        sb.AppendLine(" , '" + THIS_RAW_MAT_CD + "'    ");
                        sb.AppendLine(" , " + THIS_STORE_AMT + "    ");
                        sb.AppendLine(" , '" + INPUT_DATE + "'    ");
                        sb.AppendLine(" , '" + INPUT_CD + "'    ");
                        sb.AppendLine(" , '" + INPUT_SEQ + "'    ");
                        sb.AppendLine(" , '" + txt_approval_date + "'    ");
                        sb.AppendLine(" , @seqSales    ");
                        sb.AppendLine(" , @SalesDetailseq" + i + "    ");
                        sb.AppendLine(" , '" + THIS_UNIT + "'    ");
                        sb.AppendLine(" , " + TOTAL_AMT + "    ");
                        sb.AppendLine(" , '2'    ");
                        sb.AppendLine(" , '" + Common.p_strStaffNo + "'    ");
                        sb.AppendLine(" , convert(varchar, getdate(), 120)   ");
                        sb.AppendLine(" , 0   ");
                        sb.AppendLine(" ) ");

                    }
                    else //제품출고 F_ITEM_INPUT_DETAIL , F_ITEM_OUTPUT , N_ITEM_CODE
                    {
                        sb.AppendLine("UPDATE F_ITEM_INPUT_DETAIL SET ");
                        sb.AppendLine("  CURR_AMT = CURR_AMT - " + TOTAL_AMT + "  ");
                        sb.AppendLine("  ,OUTPUT_YN = 'Y' ");
                        sb.AppendLine("  ,UPTIME = convert(varchar, getdate(), 120) ");
                        sb.AppendLine("  ,UPSTAFF = '" + Common.p_strStaffNo + "'  ");
                        sb.AppendLine(" WHERE INPUT_DATE = '" + INPUT_DATE + "'  ");
                        sb.AppendLine(" AND INPUT_CD = '" + INPUT_CD + "'  ");
                        sb.AppendLine(" AND SEQ = '" + INPUT_SEQ + "'  ");

                        sb.AppendLine(" UPDATE N_ITEM_CODE SET ");
                        sb.AppendLine(" BAL_STOCK = BAL_STOCK - " + TOTAL_AMT + "  ");
                        sb.AppendLine(" WHERE ITEM_CD = '" + PRODUCT_CD + "'  ");

                        sb.AppendLine("declare @Outseq" + i + " int ");
                        sb.AppendLine("select @Outseq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ITEM_OUT ");
                        sb.AppendLine("where OUTPUT_DATE = '" + txt_output_date + "' ");
                        sb.AppendLine("and OUTPUT_CD = @ItemOutseq ");


                        StringBuilder sb2 = new StringBuilder();

                        sb2.AppendLine(" SELECT  ");
                        sb2.AppendLine(" A.ITEM_CD   ");
                        sb2.AppendLine(" , C.LOT_NO   ");
                        sb2.AppendLine(" , B.UNIT_CD   ");
                        sb2.AppendLine(" , A.CURR_AMT   ");
                        sb2.AppendLine(" FROM F_ITEM_INPUT_DETAIL A  ");
                        sb2.AppendLine(" LEFT OUTER JOIN N_ITEM_CODE B  ");
                        sb2.AppendLine(" ON A.ITEM_CD = B.ITEM_CD  ");
                        sb2.AppendLine(" LEFT OUTER JOIN F_ITEM_INPUT C  ");
                        sb2.AppendLine(" ON A.INPUT_DATE = C.INPUT_DATE  ");
                        sb2.AppendLine(" AND A.INPUT_CD = C.INPUT_CD  ");

                        sb2.AppendLine(" WHERE A.INPUT_DATE = '" + INPUT_DATE + "'  ");
                        sb2.AppendLine(" AND A.INPUT_CD = '" + INPUT_CD + "'  ");
                        sb2.AppendLine(" AND A.SEQ = '" + INPUT_SEQ + "'  ");

                        sCommand = new SqlCommand(sb2.ToString());
                        if (sCommand.CommandText.Equals(null))
                        {
                            wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                            return 2;
                        }
                        DataTable dt2 = wAdo.SqlCommandSelect(sCommand);

                        if (dt2 == null || dt2.Rows.Count <= 0)
                        {
                            return 3;
                        }

                        string THIS_CURR_AMT = dt2.Rows[0]["CURR_AMT"].ToString();
                        string THIS_ITEM_CD = dt2.Rows[0]["ITEM_CD"].ToString();
                        string THIS_UNIT = dt2.Rows[0]["UNIT_CD"].ToString();
                        string THIS_LOT = dt2.Rows[0]["LOT_NO"].ToString();

                        sb.AppendLine("insert into F_ITEM_OUT (");
                        sb.AppendLine("     OUTPUT_DATE ");
                        sb.AppendLine("     ,OUTPUT_CD ");
                        sb.AppendLine("     ,SEQ ");
                        sb.AppendLine("     ,CUST_CD ");
                        sb.AppendLine("     ,LOT_NO ");
                        sb.AppendLine("     ,ITEM_CD ");
                        sb.AppendLine("     ,TOTAL_AMT ");
                        sb.AppendLine("     ,INPUT_DATE ");
                        sb.AppendLine("     ,INPUT_CD ");
                        sb.AppendLine("     ,INPUT_SEQ ");
                        sb.AppendLine("     ,UNIT_CD ");
                        sb.AppendLine("     ,OUTPUT_AMT ");
                        sb.AppendLine("     ,SALES_DATE ");
                        sb.AppendLine("     ,SALES_CD ");
                        sb.AppendLine("     ,SALES_SEQ ");
                        sb.AppendLine("     ,INSTAFF ");
                        sb.AppendLine("     ,INTIME ");
                        sb.AppendLine(" ) values ( ");
                        sb.AppendLine("  '" + txt_output_date + "'   ");
                        sb.AppendLine(" ,@ItemOutseq ");
                        sb.AppendLine(" ,@Outseq" + i + "  ");
                        sb.AppendLine(" , '" + txt_cust_cd + "'    ");
                        sb.AppendLine(" , '" + THIS_LOT + "'    ");
                        sb.AppendLine(" , '" + THIS_ITEM_CD + "'    ");
                        sb.AppendLine(" , " + THIS_CURR_AMT + "    ");
                        sb.AppendLine(" , '" + INPUT_DATE + "'    ");
                        sb.AppendLine(" , '" + INPUT_CD + "'    ");
                        sb.AppendLine(" , '" + INPUT_SEQ + "'    ");
                        sb.AppendLine(" , '" + THIS_UNIT + "'    ");
                        sb.AppendLine(" , " + TOTAL_AMT + "    ");
                        sb.AppendLine(" , '" + txt_approval_date + "'    ");
                        sb.AppendLine(" , @seqSales    ");
                        sb.AppendLine(" , @SalesDetailseq" + i + "    ");
                        sb.AppendLine(" , '" + Common.p_strStaffNo + "'    ");
                        sb.AppendLine(" , convert(varchar, getdate(), 120)   ");
                        sb.AppendLine(" ) ");

                    }
                }


                sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@JISI_DATE", txt_output_date);
                sCommand.Parameters.AddWithValue("@JISI_CD", txt_output_cd);
                sCommand.Parameters.AddWithValue("@CUST_CD", txt_cust_cd);
                sCommand.Parameters.AddWithValue("@PLAN_DATE", txt_plan_date);
                sCommand.Parameters.AddWithValue("@PLAN_CD", txt_plan_cd);
                sCommand.Parameters.AddWithValue("@ALL_TOTAL_MONEY", TotalSumGrid.Rows[0].Cells["SUM_TOTAL_MONEY"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@ALL_SUPPLY_MONEY", TotalSumGrid.Rows[0].Cells["SUM_OUT_MONEY"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@ALL_TAX_MONEY", TotalSumGrid.Rows[0].Cells["SUM_TAX"].Value.ToString().Replace(",", ""));
                sCommand.Parameters.AddWithValue("@COMPLETE_YN", "N");

                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_APPROVAL_SALES_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable fn_Item_Stock_List_Detail(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("select '' as no, A.ITEM_NM ");
            sb.AppendLine("      , A.ITEM_CD");
            sb.AppendLine("      , A.LABEL_NM  ");
            sb.AppendLine("      , B.INPUT_DATE  ");
            sb.AppendLine("      , B.INPUT_CD  ");
            sb.AppendLine("      , B.INPUT_CD  ");
            sb.AppendLine("      , B.SEQ  ");
            sb.AppendLine("      , B.EXPRT_DATE  ");
            sb.AppendLine("      , B.B_UNION_CD  ");
            sb.AppendLine("      , B.A_UNION_CD  ");
            sb.AppendLine("      , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE A.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("      , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE A.CLASS_CD = CLASS_CD) AS CLASS_NM  ");
            sb.AppendLine("      , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE A.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM  ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) AS INPUT_AMT ");
            sb.AppendLine("      , ISNULL(C.OUTPUT_AMT,0) AS OUTPUT_AMT ");
            sb.AppendLine("      , ISNULL(B.INPUT_AMT,0) - ISNULL(C.OUTPUT_AMT,0) AS BAL_STOCK ");
            sb.AppendLine("      , A.LABEL_NM ");

            sb.AppendLine("from N_ITEM_CODE A ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select ITEM_CD");
            sb.AppendLine("                      , ISNULL(INPUT_AMT,0) as INPUT_AMT ");
            sb.AppendLine("                      , INPUT_DATE  ");
            sb.AppendLine("                      , INPUT_CD  ");
            sb.AppendLine("                      , SEQ  ");
            sb.AppendLine("                      , EXPRT_DATE  ");
            sb.AppendLine("                      , B_UNION_CD  ");
            sb.AppendLine("                      , A_UNION_CD  ");
            sb.AppendLine("                 from F_ITEM_INPUT_DETAIL ");
            sb.AppendLine("                 where INPUT_DATE <=   '" + DateTime.Today.ToString("yyyy-MM-dd") + "'  ");
            sb.AppendLine("                 ) B ");
            sb.AppendLine("ON A.ITEM_CD = B.ITEM_CD ");
            sb.AppendLine("LEFT OUTER JOIN( ");
            sb.AppendLine("                 select ITEM_CD");
            sb.AppendLine("                      , ISNULL(SUM(OUTPUT_AMT),0) as OUTPUT_AMT ");
            sb.AppendLine("                 ,INPUT_DATE  ");
            sb.AppendLine("                 ,INPUT_CD  ");
            sb.AppendLine("                 ,INPUT_SEQ  ");
            sb.AppendLine("                 from F_ITEM_OUT ");
            sb.AppendLine("                 where OUTPUT_DATE <= '" + DateTime.Today.ToString("yyyy-MM-dd") + "'  ");
            sb.AppendLine("                GROUP BY INPUT_DATE,INPUT_CD,INPUT_SEQ,ITEM_CD  ");
            sb.AppendLine("                 ) C ");
            sb.AppendLine("  ON A.ITEM_CD = C.ITEM_CD  ");
            sb.AppendLine("  AND B.INPUT_DATE = C.INPUT_DATE ");
            sb.AppendLine("  AND B.INPUT_CD = C.INPUT_CD ");
            sb.AppendLine("  AND B.SEQ = C.INPUT_SEQ ");


            sb.AppendLine(condition);



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable isItemOut(string input_date, string input_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("SELECT * FROM F_ITEM_OUT ");
                sb.AppendLine("    where INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("    and INPUT_CD = @INPUT_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return null;
                }


                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", input_cd);


                return wAdo.SqlCommandSelect(sCommand);


            }
            catch (Exception ex)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, ex.Message + " - " + ex.ToString());
                return null;
            }
        }

        public int deleteItemInput(string input_date, string input_cd, string w_inst_date, string w_inst_cd, string lot_no)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                DataTable dt = fn_Work_Inst_detail_with_Raw_Output("WHERE A.LOT_NO = '" + lot_no + "'   ");
                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["DIRECTION"] != null && !dt.Rows[i]["DIRECTION"].ToString().Equals(""))
                        {
                            sb.AppendLine(" UPDATE F_RAW_DETAIL SET ");
                            sb.AppendLine(" " + dt.Rows[i]["DIRECTION"].ToString() + " = " + dt.Rows[i]["DIRECTION"].ToString() + " + " + dt.Rows[i]["OUTPUT_AMT"].ToString());
                            sb.AppendLine(" , CURR_AMT = CURR_AMT + " + dt.Rows[i]["OUTPUT_AMT"].ToString() + "  ");
                            sb.AppendLine(" WHERE INPUT_DATE = '" + dt.Rows[i]["INPUT_DATE"].ToString() + "'   ");
                            sb.AppendLine(" AND INPUT_CD = '" + dt.Rows[i]["INPUT_CD"].ToString() + "'   ");
                            sb.AppendLine(" AND SEQ = '" + dt.Rows[i]["INPUT_SEQ"].ToString() + "'   ");

                            sb.AppendLine(" UPDATE N_RAW_CODE SET ");
                            sb.AppendLine(" BAL_STOCK = BAL_STOCK + " + dt.Rows[i]["OUTPUT_AMT"].ToString() + "  ");
                            sb.AppendLine(" WHERE RAW_MAT_CD = '" + dt.Rows[i]["RAW_MAT_CD"].ToString() + "'   ");
                        }
                        else
                        {
                            sb.AppendLine(" UPDATE F_RAW_DETAIL SET ");
                            sb.AppendLine(" STORE_2F = STORE_2F + " + dt.Rows[i]["OUTPUT_AMT"].ToString());
                            sb.AppendLine(" , CURR_AMT = CURR_AMT + " + dt.Rows[i]["OUTPUT_AMT"].ToString() + "  ");
                            sb.AppendLine(" WHERE INPUT_DATE = '" + dt.Rows[i]["INPUT_DATE"].ToString() + "'   ");
                            sb.AppendLine(" AND INPUT_CD = '" + dt.Rows[i]["INPUT_CD"].ToString() + "'   ");
                            sb.AppendLine(" AND SEQ = '" + dt.Rows[i]["INPUT_SEQ"].ToString() + "'   ");
                        }
                    }
                }
                else
                {
                    return 1;
                }
                sb.AppendLine("UPDATE F_WORK_INST SET COMPLETE_YN = '2'  ");
                sb.AppendLine(" WHERE LOT_NO = '" + lot_no + "'   ");




                sb.AppendLine("delete from F_RAW_OUTPUT ");
                sb.AppendLine("    where LOT_NO =  '" + lot_no + "'   ");

                sb.AppendLine("delete from F_ITEM_INPUT ");
                sb.AppendLine("    where LOT_NO =  '" + lot_no + "'   ");

                sb.AppendLine("delete from F_ITEM_INPUT_DETAIL ");
                sb.AppendLine("    where INPUT_DATE =  '" + input_date + "'   ");
                sb.AppendLine("    and INPUT_CD =  '" + input_cd + "'   ");



                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_ITEM_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }

        }

        private DataTable fn_Work_Inst_detail_with_Raw_Output(string condition)
        {
            StringBuilder sb = new StringBuilder();

            //---hsp 출력물하면서 수정
            sb.AppendLine("select  ");
            sb.AppendLine("     A.RAW_MAT_CD   ");
            sb.AppendLine("     ,A.TOTAL_AMT   ");
            sb.AppendLine("     ,A.LOT_NO   ");
            sb.AppendLine("     ,A.SEQ   ");
            sb.AppendLine("     ,A.INPUT_DATE   ");
            sb.AppendLine("     ,A.INPUT_CD   ");
            sb.AppendLine("     ,A.INPUT_SEQ   ");
            sb.AppendLine("     ,A.OUTPUT_AMT   ");
            sb.AppendLine("     ,A.LOSS_AMT   ");
            sb.AppendLine("     ,A.OUTPUT_UNIT   ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE A.OUTPUT_UNIT = UNIT_CD) AS UNIT_NM  ");


            sb.AppendLine("     ,B.RAW_MAT_NM   ");
            sb.AppendLine("     ,B.CHUGJONG_CD   ");
            sb.AppendLine("     ,B.COUNTRY_CD   ");
            sb.AppendLine("     ,B.OUTPUT_UNIT   ");
            sb.AppendLine("     ,B.CLASS_CD   ");
            sb.AppendLine("     ,B.LABEL_NM   ");
            sb.AppendLine("     ,B.RAW_MAT_GUBUN   ");

            sb.AppendLine("     ,E.DIRECTION   ");


            sb.AppendLine("     ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("     ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM   ");
            sb.AppendLine("     ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM   ");
            sb.AppendLine("     ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE B.OUTPUT_UNIT = UNIT_CD ) AS UNIT_NM   ");

            sb.AppendLine("     ,C.EXPRT_DATE   ");
            sb.AppendLine("     ,C.UNION_CD   ");

            sb.AppendLine(" from F_RAW_OUTPUT A");
            sb.AppendLine(" left outer join N_RAW_CODE B ");
            sb.AppendLine(" on B.RAW_MAT_CD = A.RAW_MAT_CD  ");
            sb.AppendLine(" left outer join F_RAW_DETAIL C ");
            sb.AppendLine(" on C.INPUT_DATE = A.INPUT_DATE  ");
            sb.AppendLine(" and C.INPUT_CD = A.INPUT_CD  ");
            sb.AppendLine(" and C.SEQ = A.INPUT_SEQ  ");
            sb.AppendLine(" left outer join F_WORK_INST D ");
            sb.AppendLine(" on A.LOT_NO = D.LOT_NO  ");
            sb.AppendLine(" left outer join F_WORK_INST_DETAIL E ");
            sb.AppendLine(" on D.W_INST_DATE = E.W_INST_DATE  ");
            sb.AppendLine(" and D.W_INST_CD = E.W_INST_CD  ");
            sb.AppendLine(" and C.INPUT_DATE = E.INPUT_DATE  ");
            sb.AppendLine(" and C.INPUT_CD = E.INPUT_CD   ");
            sb.AppendLine(" and C.SEQ = E.INPUT_SEQ  ");
            sb.AppendLine(condition);
            sb.AppendLine(" order by  A.OUTPUT_DATE, A.OUTPUT_CD, A.SEQ ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int UpdateItemInput(
            string input_date
            , string input_cd
            , string w_inst_date
            , string w_inst_cd
            , string lot_no
            , conDataGridView ItemGrid
            , conDataGridView inputRmSoyoGrid
            )
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                DataTable dt = fn_Work_Inst_detail_with_Raw_Output("WHERE A.LOT_NO = '" + lot_no + "'   ");
                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["DIRECTION"] != null && !dt.Rows[i]["DIRECTION"].ToString().Equals(""))
                        {
                            sb.AppendLine(" UPDATE F_RAW_DETAIL SET ");
                            sb.AppendLine(" " + dt.Rows[i]["DIRECTION"].ToString() + " = " + dt.Rows[i]["DIRECTION"].ToString() + " + " + dt.Rows[i]["OUTPUT_AMT"].ToString());
                            sb.AppendLine(" , CURR_AMT = CURR_AMT + " + dt.Rows[i]["OUTPUT_AMT"].ToString() + "  ");
                            sb.AppendLine(" WHERE INPUT_DATE = '" + dt.Rows[i]["INPUT_DATE"].ToString() + "'   ");
                            sb.AppendLine(" AND INPUT_CD = '" + dt.Rows[i]["INPUT_CD"].ToString() + "'   ");
                            sb.AppendLine(" AND SEQ = '" + dt.Rows[i]["INPUT_SEQ"].ToString() + "'   ");

                            sb.AppendLine(" UPDATE N_RAW_CODE SET ");
                            sb.AppendLine(" BAL_STOCK = BAL_STOCK + " + dt.Rows[i]["OUTPUT_AMT"].ToString() + "  ");
                            sb.AppendLine(" WHERE RAW_MAT_CD = '" + dt.Rows[i]["RAW_MAT_CD"].ToString() + "'   ");
                        }
                        else
                        {
                            sb.AppendLine(" UPDATE F_RAW_DETAIL SET ");
                            sb.AppendLine(" STORE_2F = STORE_2F + " + dt.Rows[i]["OUTPUT_AMT"].ToString());
                            sb.AppendLine(" , CURR_AMT = CURR_AMT + " + dt.Rows[i]["OUTPUT_AMT"].ToString() + "  ");
                            sb.AppendLine(" WHERE INPUT_DATE = '" + dt.Rows[i]["INPUT_DATE"].ToString() + "'   ");
                            sb.AppendLine(" AND INPUT_CD = '" + dt.Rows[i]["INPUT_CD"].ToString() + "'   ");
                            sb.AppendLine(" AND SEQ = '" + dt.Rows[i]["INPUT_SEQ"].ToString() + "'   ");
                        }
                    }
                }
                else
                {
                    return 1;
                }
                sb.AppendLine("UPDATE F_WORK_INST SET COMPLETE_YN = '2'  ");
                sb.AppendLine(" WHERE LOT_NO = '" + lot_no + "'   ");




                sb.AppendLine("delete from F_RAW_OUTPUT ");
                sb.AppendLine("    where LOT_NO =  '" + lot_no + "'   ");

                sb.AppendLine("delete from F_ITEM_INPUT ");
                sb.AppendLine("    where LOT_NO =  '" + lot_no + "'   ");

                sb.AppendLine("delete from F_ITEM_INPUT_DETAIL ");
                sb.AppendLine("    where INPUT_DATE =  '" + input_date + "'   ");
                sb.AppendLine("    and INPUT_CD =  '" + input_cd + "'   ");

                sb.AppendLine("declare @seq int ");
                sb.AppendLine("select @seq =ISNULL(MAX(INPUT_CD),0)+1 from F_ITEM_INPUT ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                sb.AppendLine("insert into F_ITEM_INPUT(");
                sb.AppendLine("     INPUT_DATE ");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,LOT_NO ");
                sb.AppendLine("     ,W_INST_DATE ");
                sb.AppendLine("     ,W_INST_CD ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("  '" + input_date + "' ");
                sb.AppendLine(" ,@seq ");
                sb.AppendLine(" ,@LOT_NO ");
                sb.AppendLine(" ,@W_INST_DATE ");
                sb.AppendLine(" ,@W_INST_CD ");
                sb.AppendLine(" ,'" + Common.p_strStaffNo + "'   ");
                sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");

                for (int i = 0; i < ItemGrid.RowCount; i++)
                {
                    if (ItemGrid.Rows[i].Cells["IT_ITEM_CD"].Value == null || ItemGrid.Rows[i].Cells["IT_ITEM_CD"].Value.ToString().Equals(""))
                    {
                        continue;
                    }
                    else if (ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value == null || ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Equals("")
                        || ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Equals("0"))
                    {
                        continue;
                    }

                    else if (ItemGrid.Rows[i].Cells["IT_UNION_CD_AFTER"].Value == null || ItemGrid.Rows[i].Cells["IT_UNION_CD_AFTER"].Value.ToString().Equals("")
                        )
                    {
                        MessageBox.Show("묶음번호를 모두 입력해주십시오.");
                        return 1;
                    }

                    else if (ItemGrid.Rows[i].Cells["IT_EXPRT_DATE"].Value == null || ItemGrid.Rows[i].Cells["IT_EXPRT_DATE"].Value.ToString().Equals("")
                        )
                    {
                        MessageBox.Show("유통기한을 모두 입력해주십시오.");
                        return 1;
                    }
                    else if (ItemGrid.Rows[i].Cells["IT_FROZEN_GUBUN"].Value == null || ItemGrid.Rows[i].Cells["IT_FROZEN_GUBUN"].Value.ToString().Equals("")
                        )
                    {
                        MessageBox.Show("보관구분을 모두 입력해주십시오.");
                        return 1;
                    }

                    sb.AppendLine("declare @seq" + i + " int ");
                    sb.AppendLine("select @seq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_ITEM_INPUT_DETAIL ");
                    sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");
                    sb.AppendLine("and INPUT_CD = @seq ");

                    sb.AppendLine("insert into F_ITEM_INPUT_DETAIL(");
                    sb.AppendLine("     INPUT_DATE ");
                    sb.AppendLine("     ,INPUT_CD ");
                    sb.AppendLine("     ,SEQ ");
                    sb.AppendLine("     ,ITEM_CD ");
                    sb.AppendLine("     ,INPUT_AMT ");
                    sb.AppendLine("     ,CURR_AMT ");
                    sb.AppendLine("     ,B_UNION_CD ");
                    sb.AppendLine("     ,A_UNION_CD ");
                    sb.AppendLine("     ,EXPRT_DATE ");
                    sb.AppendLine("     ,INPUT_GUBUN ");
                    sb.AppendLine("     ,FROZEN_GUBUN ");
                    sb.AppendLine("     ,LOT_SUB ");
                    sb.AppendLine("     ,INSTAFF ");
                    sb.AppendLine("     ,INTIME ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("  '" + input_date + "'   ");
                    sb.AppendLine(" ,@seq ");
                    sb.AppendLine(" ,@seq" + i + "  ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_ITEM_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , " + ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Replace(",", "") + "    ");
                    sb.AppendLine(" , " + ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Replace(",", "") + "    ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_UNION_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_UNION_CD_AFTER"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_EXPRT_DATE"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '1'    ");
                    sb.AppendLine(" , '" + ItemGrid.Rows[i].Cells["IT_FROZEN_GUBUN"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + lot_no + "' + RIGHT('000' + CONVERT(nvarchar, @seq" + i + " ),3 )    ");
                    sb.AppendLine(" ,'" + Common.p_strStaffNo + "'   ");
                    sb.AppendLine(" ,convert(varchar, getdate(), 120) ");
                    sb.AppendLine(" ) ");

                    sb.AppendLine(" UPDATE N_ITEM_CODE SET ");
                    sb.AppendLine(" BAL_STOCK = BAL_STOCK + " + ItemGrid.Rows[i].Cells["IT_TOTAL_AMT"].Value.ToString().Replace(",", "") + "  ");
                    sb.AppendLine(" WHERE ITEM_CD =  '" + ItemGrid.Rows[i].Cells["IT_ITEM_CD"].Value.ToString() + "'  ");


                }

                sb.AppendLine("UPDATE F_WORK_INST SET ");
                sb.AppendLine(" COMPLETE_YN = '3' ");
                sb.AppendLine(" WHERE W_INST_DATE = '" + w_inst_date + "'   ");
                sb.AppendLine(" AND W_INST_CD = '" + w_inst_cd + "'   ");


                sb.AppendLine("declare @Outseq int ");
                sb.AppendLine("select @Outseq =ISNULL(MAX(OUTPUT_CD),0)+1 from F_RAW_OUTPUT ");
                sb.AppendLine("where OUTPUT_DATE = '" + input_date + "' ");


                for (int i = 0; i < inputRmSoyoGrid.RowCount; i++)
                {
                    if (inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_CD"].Value == null || inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_CD"].Value.ToString().Equals("")
                        || inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_CD"].Value.ToString().Equals("ALL_RAW_MAT_SUM!"))
                    {
                        continue;
                    }
                    else if (!inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_GUBUN"].Value.ToString().Equals("1") && (inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value == null || inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString().Equals("")
                        || inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString().Equals("0")))
                    {
                        continue;
                    }

                    decimal outValue = 0;
                    decimal lossValue = 0;
                    if (inputRmSoyoGrid.Rows[i].Cells["s_LOSS_AMT"].Value == null || inputRmSoyoGrid.Rows[i].Cells["s_LOSS_AMT"].Value.ToString().Equals(""))
                    {
                        inputRmSoyoGrid.Rows[i].Cells["s_LOSS_AMT"].Value = 0;
                    }
                    if (inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value == null || inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString().Equals(""))
                    {
                        inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value = 0;
                    }


                    if (inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_GUBUN"].Value.ToString().Equals("1"))
                    {
                        outValue = decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_SOYO_AMT"].Value.ToString().Replace(",", ""));
                        lossValue = decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_SOYO_AMT"].Value.ToString().Replace(",", "")) - decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString().Replace(",", ""));
                    }
                    else
                    {
                        outValue = decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_USE_AMT"].Value.ToString());
                        lossValue = decimal.Parse(inputRmSoyoGrid.Rows[i].Cells["s_LOSS_AMT"].Value.ToString());
                    }

                    sb.AppendLine("UPDATE F_RAW_DETAIL SET ");
                    sb.AppendLine(" " + inputRmSoyoGrid.Rows[i].Cells["s_OUT_LOC"].Value.ToString() + "  =  " + inputRmSoyoGrid.Rows[i].Cells["s_OUT_LOC"].Value.ToString() + " - " + outValue + "  ");
                    sb.AppendLine(" , CURR_AMT = CURR_AMT - " + outValue + "   ");
                    sb.AppendLine(" WHERE INPUT_DATE = '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_DATE"].Value.ToString() + "'   ");
                    sb.AppendLine(" AND INPUT_CD = '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_CD"].Value.ToString() + "'   ");
                    sb.AppendLine(" AND SEQ = '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_SEQ"].Value.ToString() + "'   ");


                    sb.AppendLine("declare @Outseq" + i + " int ");
                    sb.AppendLine("select @Outseq" + i + " =ISNULL(MAX(SEQ),0)+1 from F_RAW_OUTPUT ");
                    sb.AppendLine("where OUTPUT_DATE = '" + input_date + "' ");
                    sb.AppendLine("and OUTPUT_CD = @Outseq ");

                    sb.AppendLine("insert into F_RAW_OUTPUT(");
                    sb.AppendLine("     OUTPUT_DATE ");
                    sb.AppendLine("     ,OUTPUT_CD ");
                    sb.AppendLine("     ,SEQ ");
                    sb.AppendLine("     ,RAW_MAT_CD ");
                    sb.AppendLine("     ,TOTAL_AMT ");
                    sb.AppendLine("     ,LOT_NO ");
                    sb.AppendLine("     ,INPUT_DATE ");
                    sb.AppendLine("     ,INPUT_CD ");
                    sb.AppendLine("     ,INPUT_SEQ ");
                    sb.AppendLine("     ,OUTPUT_UNIT ");
                    sb.AppendLine("     ,OUTPUT_AMT ");
                    sb.AppendLine("     ,LOSS_AMT ");
                    sb.AppendLine("     ,OUTPUT_GUBUN ");
                    sb.AppendLine(" ) values ( ");
                    sb.AppendLine("  '" + input_date + "'   ");
                    sb.AppendLine(" ,@Outseq ");
                    sb.AppendLine(" ,@Outseq" + i + "  ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_RAW_MAT_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , " + inputRmSoyoGrid.Rows[i].Cells["s_SOYO_AMT"].Value.ToString().Replace(",", "") + "    ");
                    sb.AppendLine(" , @LOT_NO    ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_DATE"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_INPUT_SEQ"].Value.ToString() + "'    ");
                    sb.AppendLine(" , '" + inputRmSoyoGrid.Rows[i].Cells["s_UNIT_CD"].Value.ToString() + "'    ");
                    sb.AppendLine(" , " + outValue + "    ");
                    sb.AppendLine(" , " + lossValue + "    ");
                    sb.AppendLine(" , '1'    ");
                    sb.AppendLine(" ) ");
                }

                SqlCommand sCommand = new SqlCommand(sb.ToString());

                sCommand.Parameters.AddWithValue("@W_INST_DATE", w_inst_date);
                sCommand.Parameters.AddWithValue("@W_INST_CD", w_inst_cd);
                sCommand.Parameters.AddWithValue("@INPUT_DATE", input_date);
                sCommand.Parameters.AddWithValue("@LOT_NO", lot_no);


                int qResult = wAdo.SqlCommandEtc(sCommand, "Update_ITEM_INPUT_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }

        }

        public DataTable fn_sales_collect_list(string condition)
        {
            StringBuilder sb = new StringBuilder();



            //sb.AppendLine(" SELECT SC_GUBUN, DATE, CD, MONEY  FROM ( ");

            //sb.AppendLine(" SELECT ");
            //sb.AppendLine(" 'S' AS SC_GUBUN ");
            //sb.AppendLine(" ,SALES_DATE AS DATE ");
            //sb.AppendLine(" ,SALES_CD AS CD ");
            //sb.AppendLine(" ,ALL_TOTAL_MONEY AS MONEY ");
            //sb.AppendLine(" ,CUST_CD AS CUST_CD ");
            //sb.AppendLine(" FROM F_SALES ");
            //sb.AppendLine(" where 1=1 ");

            //sb.AppendLine(" UNION ALL ");

            //sb.AppendLine(" SELECT ");
            //sb.AppendLine(" 'C' AS SC_GUBUN ");
            //sb.AppendLine(" ,SOO_DATE AS DATE ");
            //sb.AppendLine(" ,SOO_CD AS CD ");
            //sb.AppendLine(" ,TOTAL_MONEY AS MONEY ");
            //sb.AppendLine(" ,CUST_CD AS CUST_CD ");
            //sb.AppendLine(" FROM F_COLLECT ");
            //sb.AppendLine(" where 1=1 ");

            //sb.AppendLine(" ) A ");
            //sb.AppendLine(" where 1=1 ");

            sb.AppendLine(" SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL ");
            sb.AppendLine(condition);
            sb.AppendLine(" ORDER BY INPUT_DATE desc ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_raw_input_output_list(string condition)
        {
            StringBuilder sb = new StringBuilder();



            sb.AppendLine(" SELECT IO_GUBUN, RAW_MAT_CD, DATE, CD, AMT  FROM ( ");

            sb.AppendLine(" SELECT ");
            sb.AppendLine(" 'I' AS IO_GUBUN ");
            sb.AppendLine(" ,RAW_MAT_CD AS RAW_MAT_CD ");
            sb.AppendLine(" ,INPUT_DATE AS DATE ");
            sb.AppendLine(" ,INPUT_CD AS CD ");
            sb.AppendLine(" ,TOTAL_AMT AS AMT ");
            sb.AppendLine(" FROM F_RAW_DETAIL ");
            sb.AppendLine(" where 1=1 ");

            sb.AppendLine(" UNION ALL ");

            sb.AppendLine(" SELECT ");
            sb.AppendLine(" 'O' AS IO_GUBUN ");
            sb.AppendLine(" ,RAW_MAT_CD AS RAW_MAT_CD ");
            sb.AppendLine(" ,OUTPUT_DATE AS DATE ");
            sb.AppendLine(" ,OUTPUT_CD AS CD ");
            sb.AppendLine(" ,OUTPUT_AMT AS AMT ");
            sb.AppendLine(" FROM F_RAW_OUTPUT ");
            sb.AppendLine(" where 1=1 ");

            sb.AppendLine(" ) A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_item_input_output_list(string condition)
        {
            StringBuilder sb = new StringBuilder();



            sb.AppendLine(" SELECT IO_GUBUN, ITEM_CD, DATE, CD, AMT  FROM ( ");

            sb.AppendLine(" SELECT ");
            sb.AppendLine(" 'I' AS IO_GUBUN ");
            sb.AppendLine(" ,ITEM_CD AS ITEM_CD ");
            sb.AppendLine(" ,INPUT_DATE AS DATE ");
            sb.AppendLine(" ,INPUT_CD AS CD ");
            sb.AppendLine(" ,INPUT_AMT AS AMT ");
            sb.AppendLine(" FROM F_ITEM_INPUT_DETAIL ");
            sb.AppendLine(" where 1=1 ");

            sb.AppendLine(" UNION ALL ");

            sb.AppendLine(" SELECT ");
            sb.AppendLine(" 'O' AS IO_GUBUN ");
            sb.AppendLine(" ,ITEM_CD AS ITEM_CD ");
            sb.AppendLine(" ,OUTPUT_DATE AS DATE ");
            sb.AppendLine(" ,OUTPUT_CD AS CD ");
            sb.AppendLine(" ,OUTPUT_AMT AS AMT ");
            sb.AppendLine(" FROM F_ITEM_OUT ");
            sb.AppendLine(" where 1=1 ");

            sb.AppendLine(" ) A ");
            sb.AppendLine(" where 1=1 ");
            sb.AppendLine(condition);


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Cust_Sales_List(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("select DISTINCT A.CUST_CD");
            sb.AppendLine("     ,A.CUST_GUBUN ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from T_S_CODE ");
            sb.AppendLine("    where L_CODE = '200' and S_CODE = A.CUST_GUBUN) AS CUST_GUBUN_NM ");
            sb.AppendLine("     ,CUST_NM ");
            sb.AppendLine("     ,OWNER ");
            sb.AppendLine("     ,SAUP_NO ");
            sb.AppendLine("     ,UPTAE ");
            sb.AppendLine("     ,JONGMOK ");
            sb.AppendLine("     ,CUST_MANAGER ");
            sb.AppendLine("     ,CUST_OPEN ");
            sb.AppendLine("     ,USED_CD ");
            sb.AppendLine("     ,A.BALANCE ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from T_S_CODE ");
            sb.AppendLine("    where L_CODE = '500' and S_CODE = A.USED_CD) AS USED_NM ");
            sb.AppendLine("     ,A.TAX_CD ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from T_S_CODE ");
            sb.AppendLine("    where L_CODE = '220' and S_CODE = A.USED_CD) AS USED_NM ");
            sb.AppendLine(" , (select S_CODE_NM ");
            sb.AppendLine("    from T_S_CODE ");
            sb.AppendLine("    where L_CODE = '230' and S_CODE = A.USED_CD) AS USED_NM ");
            sb.AppendLine("     ,A.COMMENT ");
            sb.AppendLine(" from N_CUST_CODE A ");
            sb.AppendLine(" inner join F_SALES B ");
            sb.AppendLine(" on B.CUST_CD = A.CUST_CD");
            sb.AppendLine(condition);
            sb.AppendLine(" order by CUST_CD ");

            Console.WriteLine(sb.ToString());


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        //매출원장에서 거래처 검색버튼 클릭! -보린-
        public DataTable fn_Cust_rsSales_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_Sales_Detail_Order_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select D.PRODUCT_GUBUN   ");
            sb.AppendLine("  ,D.PRODUCT_CD   ");
            sb.AppendLine("  ,A.CUST_CD  ");
            sb.AppendLine("  ,SUM(D.TOTAL_AMT * D.TOTAL_PRICE) AS PRODUCT_MONEY  ");
            sb.AppendLine("  ,'(재료)'+(SELECT LABEL_NM FROM N_RAW_CODE WHERE D.PRODUCT_CD = RAW_MAT_CD) AS PRODUCT_NM  ");
            sb.AppendLine("  from F_SALES_DETAIL D  ");
            sb.AppendLine("  left outer join F_SALES A   ");
            sb.AppendLine("  on A.SALES_DATE = D.SALES_DATE  ");
            sb.AppendLine("  and A.SALES_CD = D.SALES_CD  ");
            sb.AppendLine(condition + " and PRODUCT_GUBUN = '1'  ");
            sb.AppendLine("  group by A.CUST_CD,D.PRODUCT_GUBUN,D.PRODUCT_CD  ");

            sb.AppendLine("  union all  ");

            sb.AppendLine("  select D.PRODUCT_GUBUN   ");
            sb.AppendLine("  ,D.PRODUCT_CD   ");
            sb.AppendLine("  ,A.CUST_CD  ");
            sb.AppendLine("  ,SUM(D.TOTAL_AMT * D.TOTAL_PRICE) AS PRODUCT_MONEY  ");
            sb.AppendLine("  ,'(상품)'+(SELECT LABEL_NM FROM N_ITEM_CODE WHERE D.PRODUCT_CD = ITEM_CD) AS PRODUCT_NM  ");
            sb.AppendLine("  from F_SALES_DETAIL D  ");
            sb.AppendLine("  left outer join F_SALES A   ");
            sb.AppendLine("  on A.SALES_DATE = D.SALES_DATE  ");
            sb.AppendLine("  and A.SALES_CD = D.SALES_CD  ");
            sb.AppendLine(condition + " and PRODUCT_GUBUN = '2'  ");
            sb.AppendLine("  group by A.CUST_CD,D.PRODUCT_GUBUN,D.PRODUCT_CD  ");

            sb.AppendLine("  order by SUM(D.TOTAL_AMT * D.TOTAL_PRICE) desc  ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Sales_Detail_Order_Count_Only_Raw(string condition)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  select D.PRODUCT_GUBUN   ");
            sb.AppendLine("  ,D.PRODUCT_CD   ");
            sb.AppendLine("  ,A.CUST_CD  ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM  ");
            sb.AppendLine("  ,SUM(D.TOTAL_AMT * D.TOTAL_PRICE) AS PRODUCT_MONEY  ");
            sb.AppendLine("  ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE D.PRODUCT_CD = RAW_MAT_CD) AS PRODUCT_NM  ");
            sb.AppendLine("  from F_SALES_DETAIL D  ");
            sb.AppendLine("  left outer join F_SALES A   ");
            sb.AppendLine("  on A.SALES_DATE = D.SALES_DATE  ");
            sb.AppendLine("  and A.SALES_CD = D.SALES_CD  ");
            sb.AppendLine(condition + " and PRODUCT_GUBUN = '1'  ");
            sb.AppendLine("  group by A.CUST_CD,D.PRODUCT_GUBUN,D.PRODUCT_CD  ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Buy_Detail_Order_Count(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("     SELECT     ");
            sb.AppendLine("     C.RAW_MAT_CD    ");
            sb.AppendLine("     ,A.CUST_CD    ");
            sb.AppendLine("     ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM    ");
            sb.AppendLine("     ,SUM(D.TOTAL_MONEY) AS PRODUCT_MONEY    ");
            sb.AppendLine("     ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE C.RAW_MAT_CD = RAW_MAT_CD) AS PRODUCT_NM    ");
            sb.AppendLine("    FROM F_BUY_DETAIL D    ");
            sb.AppendLine("    left outer join F_BUY A    ");
            sb.AppendLine("    on A.BUY_DATE = D.BUY_DATE    ");
            sb.AppendLine("    and A.BUY_CD = D.BUY_CD    ");
            sb.AppendLine("    left outer join F_RAW_DETAIL C    ");
            sb.AppendLine("    on C.INPUT_DATE = D.INPUT_DATE    ");
            sb.AppendLine("    and C.INPUT_CD = D.INPUT_CD    ");
            sb.AppendLine("    and C.SEQ = D.INPUT_SEQ    ");
            sb.AppendLine("    left outer join N_RAW_CODE N    ");
            sb.AppendLine("    on C.RAW_MAT_CD = N.RAW_MAT_CD    ");
            sb.AppendLine(condition);
            sb.AppendLine("    group by A.CUST_CD, C.RAW_MAT_CD    ");

            sb.AppendLine("    order by  SUM(D.TOTAL_MONEY) desc  ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }



        public DataTable isRawWorking(string txt_input_date, string txt_input_cd)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();

                sb = new StringBuilder();
                sb.AppendLine("SELECT * FROM F_WORK_INST A ");
                sb.AppendLine(" left outer join F_WORK_INST_DETAIL D ");
                sb.AppendLine(" ON A.W_INST_DATE = D.W_INST_DATE   ");
                sb.AppendLine(" and A.W_INST_CD = D.W_INST_CD  ");
                sb.AppendLine("    where D.INPUT_DATE = @INPUT_DATE ");
                sb.AppendLine("    and D.INPUT_CD = @INPUT_CD ");

                SqlCommand sCommand = new SqlCommand(sb.ToString());
                if (sCommand.CommandText.Equals(null))
                {
                    wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                    return null;
                }


                sCommand.Parameters.AddWithValue("@INPUT_DATE", txt_input_date);
                sCommand.Parameters.AddWithValue("@INPUT_CD", txt_input_cd);


                return wAdo.SqlCommandSelect(sCommand);


            }
            catch (Exception ex)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, ex.Message + " - " + ex.ToString());
                return null;
            }
        }
        //2020-01-06 이재원 원자재 원장현황
        public DataTable fn_Raw_Ledger_List(string condition, string condition2)
        {

            StringBuilder sb2 = new StringBuilder();

            sb2.AppendLine("   select       ");
            sb2.AppendLine("   Z.INPUT_DATE AS INPUT_DATE        ");
            sb2.AppendLine("   ,AVG(ISNULL(Z.TOTAL_AMT,0)) AS  INPUT_AMT       ");
            sb2.AppendLine("   ,0 AS  OUTPUT_AMT       ");
            sb2.AppendLine("   from F_RAW_DETAIL Z         ");
            sb2.AppendLine("   where 1=1    ");
            sb2.AppendLine(condition);
            sb2.AppendLine("   group by Z.INPUT_DATE , Z.INPUT_CD   , Z.SEQ   ");

            sb2.AppendLine("   union all    ");

            sb2.AppendLine("   select       ");
            sb2.AppendLine("   Z.OUTPUT_DATE AS INPUT_DATE      ");
            sb2.AppendLine("   ,0 AS INPUT_AMT       ");
            sb2.AppendLine("   ,AVG(ISNULL(OUTPUT_AMT,0)) AS OUTPUT_AMT       ");
            sb2.AppendLine("   from F_RAW_OUTPUT Z        ");
            sb2.AppendLine("   where 1=1    ");
            sb2.AppendLine(condition2);
            sb2.AppendLine("   group by Z.OUTPUT_DATE , Z.OUTPUT_CD , Z.SEQ   ");

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("         select '입고' as bun     ");
            sb.AppendLine("        ,A.INPUT_DATE        ");
            sb.AppendLine("        ,A.INPUT_DATE AS 일자명칭 ");
            sb.AppendLine("        ,A.INPUT_CD        ");
            sb.AppendLine("        ,Z.SEQ     ");
            sb.AppendLine("        ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.INPUT_UNIT ) AS UNIT_NM     ");
            sb.AppendLine("        ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' and Z.FROZEN_GUBUN = S_CODE ) AS FROZEN_GUBUN     ");
            sb.AppendLine("        ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1200' and Z.INPUT_GUBUN = S_CODE ) AS INPUT_GUBUN     ");
            sb.AppendLine("        ,'' AS OUTPUT_LOT     ");
            sb.AppendLine("        ,B.RAW_MAT_NM  ");
            sb.AppendLine("        , ISNULL(Z.TOTAL_AMT,0) AS INPUT_AMT    ");
            sb.AppendLine("        , 0 AS OUTPUT_AMT    ");
            sb.AppendLine("        , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD ) AS CHUGJONG_NM     ");
            sb.AppendLine("        , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM    ");
            sb.AppendLine("        , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM      ");
            sb.AppendLine("        , B.LABEL_NM     ");
            sb.AppendLine("        , isnull(Z.UNION_CD,'') AS UNION_CD ");
            sb.AppendLine("        from F_RAW_DETAIL Z   ");
            sb.AppendLine("        left outer join F_RAW_INPUT A    ");
            sb.AppendLine("        on Z.INPUT_DATE = A.INPUT_DATE      ");
            sb.AppendLine("            and Z.INPUT_CD = A.INPUT_CD     ");
            sb.AppendLine("        left outer join N_RAW_CODE B        ");
            sb.AppendLine("        on Z.RAW_MAT_CD = B.RAW_MAT_CD      ");
            sb.AppendLine("        left outer join N_CUST_CODE C       ");
            sb.AppendLine("        on A.CUST_CD = C.CUST_CD            ");
            sb.AppendLine("        WHERE 1=1     ");
            sb.AppendLine(condition);

            sb.AppendLine("       union all   ");

            sb.AppendLine("          select '출고' as bun    ");
            sb.AppendLine("        ,Z.OUTPUT_DATE        ");
            sb.AppendLine("        ,Z.OUTPUT_DATE AS 일자명칭     ");
            sb.AppendLine("        ,Z.OUTPUT_CD        ");
            sb.AppendLine("        ,Z.SEQ     ");
            sb.AppendLine("        ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.INPUT_UNIT ) AS UNIT_NM     ");
            sb.AppendLine("        ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' and D.FROZEN_GUBUN = S_CODE ) AS FROZEN_GUBUN     ");
            sb.AppendLine("        ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1210' and Z.OUTPUT_GUBUN = S_CODE ) AS INPUT_GUBUN     ");
            sb.AppendLine("        ,case when Z.SALES_DATE IS null then Z.LOT_NO else RIGHT(REPLACE(Z.SALES_DATE,'-',''),6)+RIGHT('000'+CONVERT(nvarchar,Z.SALES_CD),3) end AS OUTPUT_LOT   ");
            sb.AppendLine("        ,B.RAW_MAT_NM  ");
            sb.AppendLine("        , 0 AS INPUT_AMT    ");
            sb.AppendLine("        , ISNULL(Z.OUTPUT_AMT,0) AS OUTPUT_AMT    ");
            sb.AppendLine("        , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD ) AS CHUGJONG_NM     ");
            sb.AppendLine("        , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM    ");
            sb.AppendLine("        , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM      ");
            sb.AppendLine("        , B.LABEL_NM     ");
            sb.AppendLine("        , isnull(D.UNION_CD,'') AS UNION_CD  ");
            sb.AppendLine("        from F_RAW_OUTPUT Z   ");
            sb.AppendLine("        left outer join N_RAW_CODE B        ");
            sb.AppendLine("        on Z.RAW_MAT_CD = B.RAW_MAT_CD     ");
            sb.AppendLine("        left outer join F_SALES S        ");
            sb.AppendLine("        on Z.SALES_DATE = S.SALES_DATE ");
            sb.AppendLine("        and Z.SALES_CD = S.SALES_CD ");
            sb.AppendLine("        left outer join F_RAW_DETAIL D ");
            sb.AppendLine("        on D.INPUT_DATE = Z.INPUT_DATE      ");
            sb.AppendLine("        AND D.INPUT_CD = Z.INPUT_CD      ");
            sb.AppendLine("        AND D.SEQ = Z.INPUT_SEQ      ");
            sb.AppendLine("        WHERE 1=1     ");
            sb.AppendLine(condition2);

            sb.AppendLine("       union all     ");
            sb.AppendLine("       SELECT   ");
            sb.AppendLine("       'ㅎ' as bun     ");
            sb.AppendLine("       ,INPUT_DATE      ");
            sb.AppendLine("        ,'--- 일계 ---' AS 일자명칭    ");
            sb.AppendLine("        ,'999999' AS INPUT_CD   ");
            sb.AppendLine("        ,'' AS SEQ      ");
            sb.AppendLine("        ,'' AS UNIT_NM        ");
            sb.AppendLine("        ,'' AS FROZEN_GUBUN        ");
            sb.AppendLine("        ,'' AS INPUT_GUBUN        ");
            sb.AppendLine("        ,'' AS OUTPUT_LOT       ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM         ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT       ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT       ");
            sb.AppendLine("        ,'' AS  CHUGJONG_NM      ");
            sb.AppendLine("        ,'' AS  CLASS_NM        ");
            sb.AppendLine("        ,'' AS  COUNTRY_NM       ");
            sb.AppendLine("        ,'' AS  LABEL_NM      ");
            sb.AppendLine("        ,'' AS  UNION_CD      ");
            sb.AppendLine("       	FROM ( " + sb2.ToString());

            sb.AppendLine("     	) A group by A.INPUT_DATE        ");

            sb.AppendLine("        union all     ");

            sb.AppendLine("       SELECT   ");
            sb.AppendLine("       '' as bun     ");
            sb.AppendLine("     	,left(INPUT_DATE,8)+'99' AS INPUT_DATE      ");
            sb.AppendLine("        ,'=== 월계 ===' AS 일자명칭    ");
            sb.AppendLine("        ,'999999' AS INPUT_CD   ");
            sb.AppendLine("        ,'' AS SEQ     ");
            sb.AppendLine("        ,'' AS UNIT_NM        ");
            sb.AppendLine("        ,'' AS FROZEN_GUBUN        ");
            sb.AppendLine("        ,'' AS INPUT_GUBUN        ");
            sb.AppendLine("        ,'' AS OUTPUT_LOT       ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM         ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT       ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT       ");
            sb.AppendLine("        ,'' AS  CHUGJONG_NM      ");
            sb.AppendLine("        ,'' AS  CLASS_NM        ");
            sb.AppendLine("        ,'' AS  COUNTRY_NM       ");
            sb.AppendLine("        ,'' AS  LABEL_NM      ");
            sb.AppendLine("        ,'' AS  UNION_CD      ");
            sb.AppendLine("     	 FROM (  " + sb2.ToString());

            sb.AppendLine("     	) A group by left(A.INPUT_DATE,8) ");

            sb.AppendLine("     	union all     ");

            sb.AppendLine("       SELECT   ");
            sb.AppendLine("       '' as bun     ");
            sb.AppendLine("       	 ,left(INPUT_DATE,2)+'99-99-99' AS INPUT_DATE      ");
            sb.AppendLine("        ,'=== 합계 ===' AS 일자명칭    ");
            sb.AppendLine("        ,'999999' AS INPUT_CD   ");
            sb.AppendLine("        ,'' AS SEQ     ");
            sb.AppendLine("        ,'' AS UNIT_NM        ");
            sb.AppendLine("        ,'' AS FROZEN_GUBUN        ");
            sb.AppendLine("        ,'' AS INPUT_GUBUN        ");
            sb.AppendLine("        ,'' AS OUTPUT_LOT       ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM         ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT       ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT       ");
            sb.AppendLine("        ,'' AS  CHUGJONG_NM      ");
            sb.AppendLine("        ,'' AS  CLASS_NM        ");
            sb.AppendLine("        ,'' AS  COUNTRY_NM       ");
            sb.AppendLine("        ,'' AS  LABEL_NM      ");
            sb.AppendLine("        ,'' AS  UNION_CD      ");
            sb.AppendLine("     		 FROM (   " + sb2.ToString());

            sb.AppendLine("     	) A group by left(A.INPUT_DATE,2) ");

            sb.AppendLine("      order by INPUT_DATE, bun, INPUT_CD ");





            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Item_Ledger_List(string condition, string condition2)
        {

            StringBuilder sb2 = new StringBuilder();

            sb2.AppendLine("       select         ");
            sb2.AppendLine("      Z.INPUT_DATE AS INPUT_DATE          ");
            sb2.AppendLine("      ,AVG(ISNULL(Z.INPUT_AMT,0)) AS  INPUT_AMT         ");
            sb2.AppendLine("      ,0 AS  OUTPUT_AMT         ");
            sb2.AppendLine("      from F_ITEM_INPUT_DETAIL Z           ");
            sb2.AppendLine("      where 1=1      ");
            sb2.AppendLine(condition);
            sb2.AppendLine("      group by Z.INPUT_DATE , Z.INPUT_CD   , Z.SEQ     ");
            sb2.AppendLine("      union all      ");
            sb2.AppendLine("      select         ");
            sb2.AppendLine("      Z.OUTPUT_DATE AS INPUT_DATE        ");
            sb2.AppendLine("      ,0 AS INPUT_AMT         ");
            sb2.AppendLine("      ,AVG(ISNULL(OUTPUT_AMT,0)) AS OUTPUT_AMT         ");
            sb2.AppendLine("      from F_ITEM_OUT Z          ");
            sb2.AppendLine("      where 1=1      ");
            sb2.AppendLine(condition2);
            sb2.AppendLine("      group by Z.OUTPUT_DATE , Z.OUTPUT_CD , Z.SEQ     ");


            StringBuilder sb = new StringBuilder();

            sb.AppendLine("       select '입고' as bun                                                                                                   ");
            sb.AppendLine("        ,A.INPUT_DATE                                                                                                         ");
            sb.AppendLine("        ,A.INPUT_DATE AS 일자명칭                                                                                             ");
            sb.AppendLine("        ,A.INPUT_CD                                                                                                           ");
            sb.AppendLine("        ,Z.SEQ                                                                                                                ");
            sb.AppendLine("        ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.UNIT_CD ) AS UNIT_NM                                              ");
            sb.AppendLine("        ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' and Z.FROZEN_GUBUN = S_CODE ) AS FROZEN_GUBUN                  ");
            sb.AppendLine("        ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1300' and Z.INPUT_GUBUN = S_CODE ) AS INPUT_GUBUN                    ");
            sb.AppendLine("        ,A.LOT_NO AS OUTPUT_LOT                                                                                             ");
            sb.AppendLine("        ,B.ITEM_NM                                                                                                            ");
            sb.AppendLine("        , ISNULL(Z.INPUT_AMT,0) AS INPUT_AMT                                                                                  ");
            sb.AppendLine("        , 0 AS OUTPUT_AMT                                                                                                     ");
            sb.AppendLine("        , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD ) AS CHUGJONG_NM                         ");
            sb.AppendLine("        , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM                                   ");
            sb.AppendLine("        , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM                          ");
            sb.AppendLine("        , B.LABEL_NM                                                                                                          ");
            sb.AppendLine("        , isnull(Z.A_UNION_CD,'') AS UNION_CD                                                                                 ");
            sb.AppendLine("        from F_ITEM_INPUT_DETAIL Z                                                                                            ");
            sb.AppendLine("        left outer join F_ITEM_INPUT A                                                                                        ");
            sb.AppendLine("        on Z.INPUT_DATE = A.INPUT_DATE                                                                                        ");
            sb.AppendLine("            and Z.INPUT_CD = A.INPUT_CD                                                                                       ");
            sb.AppendLine("        left outer join N_ITEM_CODE B                                                                                         ");
            sb.AppendLine("        on Z.ITEM_CD = B.ITEM_CD                                                                                              ");
            sb.AppendLine("                                                                                                                              ");
            sb.AppendLine("        WHERE 1=1                                                                                                             ");
            sb.AppendLine(condition);
            sb.AppendLine("                                                                                                                              ");
            sb.AppendLine("       union all                                                                                                              ");
            sb.AppendLine("          select '출고' as bun                                                                                                ");
            sb.AppendLine("        ,Z.OUTPUT_DATE                                                                                                        ");
            sb.AppendLine("        ,Z.OUTPUT_DATE AS 일자명칭                                                                                            ");
            sb.AppendLine("        ,Z.OUTPUT_CD                                                                                                          ");
            sb.AppendLine("        ,Z.SEQ                                                                                                                ");
            sb.AppendLine("        ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.UNIT_CD ) AS UNIT_NM                                              ");
            sb.AppendLine("        ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' and D.FROZEN_GUBUN = S_CODE ) AS FROZEN_GUBUN                  ");
            sb.AppendLine("        ,'판매출고' AS INPUT_GUBUN                                                                                            ");
            sb.AppendLine("        ,RIGHT(REPLACE(Z.SALES_DATE,'-',''),6)+RIGHT('000'+CONVERT(nvarchar,Z.SALES_CD),3) AS OUTPUT_LOT                      ");
            sb.AppendLine("        ,B.ITEM_NM                                                                                                            ");
            sb.AppendLine("        , 0 AS INPUT_AMT                                                                                                      ");
            sb.AppendLine("        , ISNULL(Z.OUTPUT_AMT,0) AS OUTPUT_AMT                                                                                ");
            sb.AppendLine("        , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD ) AS CHUGJONG_NM                         ");
            sb.AppendLine("        , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM                                   ");
            sb.AppendLine("        , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM                          ");
            sb.AppendLine("        , B.LABEL_NM                                                                                                          ");
            sb.AppendLine("        , isnull(D.A_UNION_CD,'') AS UNION_CD                                                                                 ");
            sb.AppendLine("        from F_ITEM_OUT Z                                                                                                     ");
            sb.AppendLine("        left outer join N_ITEM_CODE B                                                                                         ");
            sb.AppendLine("        on Z.ITEM_CD = B.ITEM_CD                                                                                              ");
            sb.AppendLine("        left outer join F_SALES S                                                                                             ");
            sb.AppendLine("        on Z.SALES_DATE = S.SALES_DATE                                                                                        ");
            sb.AppendLine("        and Z.SALES_CD = S.SALES_CD                                                                                           ");
            sb.AppendLine("        left outer join F_ITEM_INPUT_DETAIL D                                                                                 ");
            sb.AppendLine("        on D.INPUT_DATE = Z.INPUT_DATE                                                                                        ");
            sb.AppendLine("        AND D.INPUT_CD = Z.INPUT_CD                                                                                           ");
            sb.AppendLine("        AND D.SEQ = Z.INPUT_SEQ                                                                                               ");
            sb.AppendLine("        WHERE 1=1                                                                                                             ");
            sb.AppendLine(condition2);
            sb.AppendLine("                                                                                                                              ");
            sb.AppendLine("       union all                                                                                                              ");
            sb.AppendLine("       SELECT                                                                                                                 ");
            sb.AppendLine("       'ㅎ' as bun                                                                                                              ");
            sb.AppendLine("       ,INPUT_DATE                                                                                                            ");
            sb.AppendLine("        ,'--- 일계 ---' AS 일자명칭                                                                                           ");
            sb.AppendLine("        ,'999999' AS INPUT_CD                                                                                                 ");
            sb.AppendLine("        ,'' AS SEQ                                                                                                            ");
            sb.AppendLine("        ,'' AS UNIT_NM                                                                                                        ");
            sb.AppendLine("        ,'' AS FROZEN_GUBUN                                                                                                   ");
            sb.AppendLine("        ,'' AS INPUT_GUBUN                                                                                                    ");
            sb.AppendLine("        ,'' AS OUTPUT_LOT                                                                                                     ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM                                                                                                     ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT                                                                                         ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT                                                                                       ");
            sb.AppendLine("        ,'' AS  CHUGJONG_NM                                                                                                   ");
            sb.AppendLine("        ,'' AS  CLASS_NM                                                                                                      ");
            sb.AppendLine("        ,'' AS  COUNTRY_NM                                                                                                    ");
            sb.AppendLine("        ,'' AS  LABEL_NM                                                                                                      ");
            sb.AppendLine("        ,'' AS  UNION_CD                                                                                                      ");
            sb.AppendLine("       	FROM (  " + sb2.ToString());
            sb.AppendLine("       	) A group by A.INPUT_DATE                                                                                           ");
            sb.AppendLine("        union all                                                                                                             ");
            sb.AppendLine("       SELECT                                                                                                                 ");
            sb.AppendLine("       '' as bun                                                                                                              ");
            sb.AppendLine("     	,left(INPUT_DATE,8)+'99' AS INPUT_DATE                                                                                  ");
            sb.AppendLine("        ,'=== 월계 ===' AS 일자명칭                                                                                           ");
            sb.AppendLine("        ,'999999' AS INPUT_CD                                                                                                 ");
            sb.AppendLine("        ,'' AS SEQ                                                                                                            ");
            sb.AppendLine("        ,'' AS UNIT_NM                                                                                                        ");
            sb.AppendLine("        ,'' AS FROZEN_GUBUN                                                                                                   ");
            sb.AppendLine("        ,'' AS INPUT_GUBUN                                                                                                    ");
            sb.AppendLine("        ,'' AS OUTPUT_LOT                                                                                                     ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM                                                                                                     ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT                                                                                         ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT                                                                                       ");
            sb.AppendLine("        ,'' AS  CHUGJONG_NM                                                                                                   ");
            sb.AppendLine("        ,'' AS  CLASS_NM                                                                                                      ");
            sb.AppendLine("        ,'' AS  COUNTRY_NM                                                                                                    ");
            sb.AppendLine("        ,'' AS  LABEL_NM                                                                                                      ");
            sb.AppendLine("        ,'' AS  UNION_CD                                                                                                      ");
            sb.AppendLine("     	 FROM ( " + sb2.ToString());
            sb.AppendLine("     	 ) A group by left(A.INPUT_DATE,8)                                                                                      ");
            sb.AppendLine("     	union all                                                                                                               ");
            sb.AppendLine("       SELECT                                                                                                                 ");
            sb.AppendLine("       '' as bun                                                                                                              ");
            sb.AppendLine("       	 ,left(INPUT_DATE,2)+'99-99-99' AS INPUT_DATE                                                                       ");
            sb.AppendLine("        ,'=== 합계 ===' AS 일자명칭                                                                                           ");
            sb.AppendLine("        ,'999999' AS INPUT_CD                                                                                                 ");
            sb.AppendLine("        ,'' AS SEQ                                                                                                            ");
            sb.AppendLine("        ,'' AS UNIT_NM                                                                                                        ");
            sb.AppendLine("        ,'' AS FROZEN_GUBUN                                                                                                   ");
            sb.AppendLine("        ,'' AS INPUT_GUBUN                                                                                                    ");
            sb.AppendLine("        ,'' AS OUTPUT_LOT                                                                                                     ");
            sb.AppendLine("        ,'' AS RAW_MAT_NM                                                                                                     ");
            sb.AppendLine("        ,sum(INPUT_AMT) AS  INPUT_AMT                                                                                         ");
            sb.AppendLine("        ,sum(OUTPUT_AMT) AS  OUTPUT_AMT                                                                                       ");
            sb.AppendLine("        ,'' AS  CHUGJONG_NM                                                                                                   ");
            sb.AppendLine("        ,'' AS  CLASS_NM                                                                                                      ");
            sb.AppendLine("        ,'' AS  COUNTRY_NM                                                                                                    ");
            sb.AppendLine("        ,'' AS  LABEL_NM                                                                                                      ");
            sb.AppendLine("        ,'' AS  UNION_CD                                                                                                      ");
            sb.AppendLine("     		 FROM (  " + sb2.ToString());
            sb.AppendLine("     	) A group by left(A.INPUT_DATE,2)                                                                                       ");
            sb.AppendLine("      order by INPUT_DATE, bun, INPUT_CD                                                                                         ");






            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Input_Detail_List_Order_Count(string condition)
        {

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   select A.ITEM_CD, (SELECT ITEM_NM FROM N_ITEM_CODE WHERE ITEM_CD = A.ITEM_CD) AS ITEM_NM from F_ITEM_INPUT_DETAIL A   ");
            sb.AppendLine("   left outer join N_ITEM_COMP B   ");
            sb.AppendLine("   on A.ITEM_CD = B.ITEM_CD   ");
            sb.AppendLine(condition);
            sb.AppendLine("   GROUP BY A.ITEM_CD   ");
            sb.AppendLine("   ORDER BY COUNT(A.ITEM_CD) DESC   ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);




        }

        public DataTable fn_Sales_Detail_Order_Count_Only_Item(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  select D.PRODUCT_GUBUN   ");
            sb.AppendLine("  ,D.PRODUCT_CD   ");
            sb.AppendLine("  ,A.CUST_CD  ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = A.CUST_CD) AS CUST_NM  ");
            sb.AppendLine("  ,SUM(D.TOTAL_AMT * D.TOTAL_PRICE) AS PRODUCT_MONEY  ");
            sb.AppendLine("  ,(SELECT LABEL_NM FROM N_RAW_CODE WHERE D.PRODUCT_CD = RAW_MAT_CD) AS PRODUCT_NM  ");
            sb.AppendLine("  from F_SALES_DETAIL D  ");
            sb.AppendLine("  left outer join F_SALES A   ");
            sb.AppendLine("  on A.SALES_DATE = D.SALES_DATE  ");
            sb.AppendLine("  and A.SALES_CD = D.SALES_CD  ");
            sb.AppendLine(condition + " and PRODUCT_GUBUN = '2'  ");
            sb.AppendLine("  group by A.CUST_CD,D.PRODUCT_GUBUN,D.PRODUCT_CD  ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_info_By_Lot(string LotNo)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" I.INPUT_DATE ");
            sb.AppendLine(" ,I.INPUT_CD ");
            sb.AppendLine(" ,I.LOT_NO ");
            sb.AppendLine(" ,W.W_INST_DATE ");
            sb.AppendLine(" ,W.W_INST_CD ");
            sb.AppendLine(" ,W.DELIVERY_DATE ");
            sb.AppendLine(" ,W.INST_NOTICE ");
            sb.AppendLine(" ,W.COMPLETE_YN ");
            sb.AppendLine(" ,W.RAW_MAT_CD ");
            sb.AppendLine(" ,W.INST_AMT ");
            sb.AppendLine(" from F_ITEM_INPUT I ");
            sb.AppendLine(" left outer join F_WORK_INST W ");
            sb.AppendLine(" on W.W_INST_DATE = I.W_INST_DATE ");
            sb.AppendLine(" and W.W_INST_CD = I.W_INST_CD ");
            sb.AppendLine(" where I.LOT_NO = '" + LotNo + "' ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_Toip_By_Lot(string LotNo)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" I.INPUT_DATE ");
            sb.AppendLine(" ,I.INPUT_CD ");
            sb.AppendLine(" ,I.INPUT_SEQ ");
            sb.AppendLine(" ,D.EXPRT_DATE ");
            sb.AppendLine(" ,D.UNION_CD ");
            sb.AppendLine(" ,I.TOTAL_AMT ");
            sb.AppendLine(" ,(select UNIT_NM FROM N_UNIT_CODE WHERE D.UNIT_CD = UNIT_CD) AS UNIT_NM ");
            sb.AppendLine(" ,I.SOYO_AMT ");
            sb.AppendLine(" ,I.LOSS_AMT ");
            sb.AppendLine(" from F_WORK_INST W ");
            sb.AppendLine(" left outer join F_WORK_INST_DETAIL I ");
            sb.AppendLine(" on W.W_INST_DATE = I.W_INST_DATE ");
            sb.AppendLine(" and W.W_INST_CD = I.W_INST_CD ");
            sb.AppendLine(" left outer join F_RAW_DETAIL D ");
            sb.AppendLine(" on D.INPUT_DATE = I.INPUT_DATE ");
            sb.AppendLine(" and D.INPUT_CD = I.INPUT_CD ");
            sb.AppendLine(" and D.SEQ = I.INPUT_SEQ ");
            sb.AppendLine(" where W.LOT_NO = '" + LotNo + "' ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_Sobi_By_Lot(string LotNo)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" D.INPUT_DATE ");
            sb.AppendLine(" ,D.INPUT_CD ");
            sb.AppendLine(" ,D.SEQ ");
            sb.AppendLine(" ,N.RAW_MAT_NM ");
            sb.AppendLine(" ,N.LABEL_NM ");
            sb.AppendLine(" ,D.EXPRT_DATE ");
            sb.AppendLine(" ,D.UNION_CD ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE D.UNIT_CD = UNIT_CD) UNIT_NM ");
            sb.AppendLine(" ,O.OUTPUT_AMT ");
            sb.AppendLine(" ,O.LOSS_AMT ");
            sb.AppendLine(" from F_RAW_OUTPUT O ");
            sb.AppendLine(" left outer join F_RAW_DETAIL D ");
            sb.AppendLine(" on D.INPUT_DATE = O.INPUT_DATE ");
            sb.AppendLine(" and D.INPUT_CD= O.INPUT_CD ");
            sb.AppendLine(" and D.SEQ= O.INPUT_SEQ ");
            sb.AppendLine(" left outer join N_RAW_CODE N ");
            sb.AppendLine(" on N.RAW_MAT_CD = D.RAW_MAT_CD ");
            sb.AppendLine(" where O.LOT_NO = '" + LotNo + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_Item_By_Lot(string LotNo)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" I.INPUT_DATE ");
            sb.AppendLine(" ,I.INPUT_CD ");
            sb.AppendLine(" ,N.LABEL_NM ");
            sb.AppendLine(" ,D.EXPRT_DATE ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = D.FROZEN_GUBUN) AS FROZEN_GUBUN ");
            sb.AppendLine(" ,D.A_UNION_CD ");
            sb.AppendLine(" ,D.INPUT_AMT ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD) AS UNIT_NM ");
            sb.AppendLine(" FROM F_ITEM_INPUT I ");
            sb.AppendLine(" left outer join F_ITEM_INPUT_DETAIL D ");
            sb.AppendLine(" on I.INPUT_DATE = D.INPUT_DATE ");
            sb.AppendLine(" and I.INPUT_CD = D.INPUT_CD ");
            sb.AppendLine(" left outer join N_ITEM_CODE N ");
            sb.AppendLine(" on N.ITEM_CD = D.ITEM_CD ");
            sb.AppendLine(" where I.LOT_NO = '" + LotNo + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_Sales_By_Lot(string LotNo)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select  ");
            sb.AppendLine(" S.SALES_DATE ");
            sb.AppendLine(" ,S.SALES_CD ");
            sb.AppendLine(" ,CN.CUST_NM ");
            sb.AppendLine(" ,N.LABEL_NM ");
            sb.AppendLine(" ,ID.EXPRT_DATE ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='1000' AND S_CODE = ID.FROZEN_GUBUN) AS FROZEN_GUBUN ");
            sb.AppendLine(" ,ID.A_UNION_CD ");
            sb.AppendLine(" ,D.TOTAL_AMT ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD) AS UNIT_NM ");
            sb.AppendLine(" FROM F_SALES S ");
            sb.AppendLine(" left outer join F_SALES_DETAIL D ");
            sb.AppendLine(" on D.SALES_DATE = S.SALES_DATE ");
            sb.AppendLine(" and D.SALES_CD = S.SALES_CD ");
            sb.AppendLine(" and D.PRODUCT_GUBUN = '2' ");
            sb.AppendLine(" left outer join F_ITEM_INPUT_DETAIL ID ");
            sb.AppendLine(" on D.INPUT_DATE = ID.INPUT_DATE ");
            sb.AppendLine(" and D.INPUT_CD = ID.INPUT_CD ");
            sb.AppendLine(" and D.INPUT_SEQ = ID.SEQ ");
            sb.AppendLine(" left outer join F_ITEM_INPUT II ");
            sb.AppendLine(" on II.INPUT_DATE = ID.INPUT_DATE ");
            sb.AppendLine(" and II.INPUT_CD = ID.INPUT_CD ");
            sb.AppendLine(" left outer join N_ITEM_CODE N ");
            sb.AppendLine(" on N.ITEM_CD = ID.ITEM_CD ");
            sb.AppendLine(" left outer join N_CUST_CODE CN ");
            sb.AppendLine(" on CN.CUST_CD = S.CUST_CD ");

            sb.AppendLine(" where II.LOT_NO = '" + LotNo + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_By_LotNo(string LotNo)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  select   ");
            sb.AppendLine("  '지시' AS GUBUN ");
            sb.AppendLine("  ,W.W_INST_DATE AS INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,W.W_INST_CD) AS INPUT_CD  ");
            sb.AppendLine("  ,'' AS INPUT_SEQ ");
            sb.AppendLine("  ,'' AS CUST_NM ");
            sb.AppendLine("  ,N.RAW_MAT_NM ");
            sb.AppendLine("  ,N.LABEL_NM ");
            sb.AppendLine(" ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,'' AS GRADE_NM ");
            sb.AppendLine("  ,'' AS EXPRT_DATE  ");
            sb.AppendLine("  ,'' AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,'' AS UNION_CD  ");
            sb.AppendLine("  ,'' AS A_UNION_CD ");
            sb.AppendLine("  ,(select UNIT_NM FROM N_UNIT_CODE WHERE N.INPUT_UNIT = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,W.INST_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,0 AS LOSS_AMT  ");
            sb.AppendLine("  from F_WORK_INST W  ");
            sb.AppendLine("  left outer join N_RAW_CODE N ");
            sb.AppendLine("  on W.RAW_MAT_CD = N.RAW_MAT_CD ");
            sb.AppendLine("  where W.LOT_NO = '" + LotNo + "' ");

            sb.AppendLine(" union all ");

            sb.AppendLine("  select   ");
            sb.AppendLine("  '투입' AS GUBUN ");
            sb.AppendLine("  ,I.INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,I.INPUT_CD ) ");
            sb.AppendLine("  ,CONVERT(nvarchar,I.INPUT_SEQ ) ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE RI.CUST_CD = CUST_CD ) AS CUST_NM ");
            sb.AppendLine("  ,N.RAW_MAT_NM ");
            sb.AppendLine("  ,N.LABEL_NM ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,(SELECT GRADE_NM FROM N_GRADE_CODE WHERE D.GRADE_CD = GRADE_CD) AS GRADE_NM ");
            sb.AppendLine("  ,D.EXPRT_DATE  ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = D.FROZEN_GUBUN) AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,D.UNION_CD  ");
            sb.AppendLine("  ,'' AS A_UNION_CD ");
            sb.AppendLine("  ,(select UNIT_NM FROM N_UNIT_CODE WHERE D.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,I.SOYO_AMT)+'/'+CONVERT(nvarchar,I.TOTAL_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,I.LOSS_AMT  ");
            sb.AppendLine("  from F_WORK_INST W  ");
            sb.AppendLine("  left outer join F_WORK_INST_DETAIL I  ");
            sb.AppendLine("  on W.W_INST_DATE = I.W_INST_DATE  ");
            sb.AppendLine("  and W.W_INST_CD = I.W_INST_CD  ");
            sb.AppendLine("  left outer join F_RAW_DETAIL D  ");
            sb.AppendLine("  on D.INPUT_DATE = I.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD = I.INPUT_CD  ");
            sb.AppendLine("  and D.SEQ = I.INPUT_SEQ  ");
            sb.AppendLine("  left outer join F_RAW_INPUT RI ");
            sb.AppendLine("  on D.INPUT_DATE = RI.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD = RI.INPUT_CD  ");
            sb.AppendLine("  left outer join N_RAW_CODE N ");
            sb.AppendLine("  on D.RAW_MAT_CD = N.RAW_MAT_CD ");
            sb.AppendLine("  where W.LOT_NO = '" + LotNo + "' ");

            sb.AppendLine(" union all ");

            sb.AppendLine("  select   ");
            sb.AppendLine("  '투입' AS GUBUN ");
            sb.AppendLine("  ,'===합계===' AS INPUT_DATE ");
            sb.AppendLine("  ,'' AS INPUT_CD  ");
            sb.AppendLine("  ,'' AS INPUT_SEQ  ");
            sb.AppendLine("  ,'' AS CUST_NM ");
            sb.AppendLine("  ,'' AS RAW_MAT_NM ");
            sb.AppendLine("  ,'' AS LABEL_NM ");
            sb.AppendLine("  ,'' AS  CHUGJONG_NM ");
            sb.AppendLine("  ,'' AS  COUNTRY_NM ");
            sb.AppendLine("  ,'' AS  CLASS_NM ");
            sb.AppendLine("  ,'' AS  GRADE_NM ");
            sb.AppendLine("  ,'' AS EXPRT_DATE  ");
            sb.AppendLine("  ,'' AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,'' AS UNION_CD  ");
            sb.AppendLine("  ,'' AS A_UNION_CD ");
            sb.AppendLine("  ,'' AS UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,SUM(I.SOYO_AMT)) AS TOTAL_AMT ");
            sb.AppendLine("  ,SUM(I.LOSS_AMT) AS LOSS_AMT  ");
            sb.AppendLine("  from F_WORK_INST W  ");
            sb.AppendLine("  left outer join F_WORK_INST_DETAIL I  ");
            sb.AppendLine("  on W.W_INST_DATE = I.W_INST_DATE  ");
            sb.AppendLine("  and W.W_INST_CD = I.W_INST_CD  ");
            sb.AppendLine("  left outer join F_RAW_DETAIL D  ");
            sb.AppendLine("  on D.INPUT_DATE = I.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD = I.INPUT_CD  ");
            sb.AppendLine("  and D.SEQ = I.INPUT_SEQ  ");
            sb.AppendLine("  left outer join F_RAW_INPUT RI ");
            sb.AppendLine("  on D.INPUT_DATE = RI.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD = RI.INPUT_CD  ");
            sb.AppendLine("  left outer join N_RAW_CODE N ");
            sb.AppendLine("  on D.RAW_MAT_CD = N.RAW_MAT_CD ");
            sb.AppendLine("  where W.LOT_NO = '" + LotNo + "' ");
            sb.AppendLine("  group by W.LOT_NO ");

            sb.AppendLine(" union all ");

            sb.AppendLine("  select   ");
            sb.AppendLine("  '소비' AS GUBUN ");
            sb.AppendLine("  ,O.OUTPUT_DATE AS INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.OUTPUT_CD ) AS INPUT_CD ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.SEQ) AS INPUT_SEQ ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = RD.CUST_CD) AS CUST_NM ");
            sb.AppendLine("  ,N.RAW_MAT_NM  ");
            sb.AppendLine("  ,N.LABEL_NM  ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,ISNULL((SELECT GRADE_NM FROM N_GRADE_CODE WHERE D.GRADE_CD = GRADE_CD),'') AS GRADE_NM ");
            sb.AppendLine("  ,D.EXPRT_DATE  ");
            sb.AppendLine("  ,ISNULL((SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = D.FROZEN_GUBUN),'') AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,D.UNION_CD  ");
            sb.AppendLine("  ,'' AS A_UNION_CD ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE D.UNIT_CD = UNIT_CD) UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.OUTPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,O.LOSS_AMT  ");
            sb.AppendLine("  from F_RAW_OUTPUT O  ");
            sb.AppendLine("  left outer join F_RAW_DETAIL D  ");
            sb.AppendLine("  on D.INPUT_DATE = O.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD= O.INPUT_CD  ");
            sb.AppendLine("  and D.SEQ= O.INPUT_SEQ  ");
            sb.AppendLine("   left outer join F_RAW_INPUT RD  ");
            sb.AppendLine("  on D.INPUT_DATE = RD.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD= RD.INPUT_CD  ");
            sb.AppendLine("  left outer join N_RAW_CODE N  ");
            sb.AppendLine("  on N.RAW_MAT_CD = D.RAW_MAT_CD  ");
            sb.AppendLine("  where O.LOT_NO = '" + LotNo + "' ");

            sb.AppendLine(" union all ");

            sb.AppendLine("  select   ");
            sb.AppendLine("  '생산' AS GUBUN ");
            sb.AppendLine("  ,I.INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,I.INPUT_CD)  ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.SEQ) AS INPUT_SEQ ");
            sb.AppendLine("  ,'' AS CUST_NM ");
            sb.AppendLine("  ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine("  ,N.LABEL_NM  ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,'' AS GRADE_NM ");
            sb.AppendLine("  ,D.EXPRT_DATE  ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = D.FROZEN_GUBUN) AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,D.B_UNION_CD AS UNION_CD  ");
            sb.AppendLine("  ,D.A_UNION_CD  ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.INPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,0 AS LOSS_AMT ");
            sb.AppendLine("  FROM F_ITEM_INPUT I  ");
            sb.AppendLine("  left outer join F_ITEM_INPUT_DETAIL D  ");
            sb.AppendLine("  on I.INPUT_DATE = D.INPUT_DATE  ");
            sb.AppendLine("  and I.INPUT_CD = D.INPUT_CD  ");
            sb.AppendLine("  left outer join N_ITEM_CODE N  ");
            sb.AppendLine("  on N.ITEM_CD = D.ITEM_CD  ");
            sb.AppendLine("  where I.LOT_NO = '" + LotNo + "' ");

            sb.AppendLine(" union all ");

            sb.AppendLine("  select   ");
            sb.AppendLine("  '납품' AS GUBUN ");
            sb.AppendLine("  ,S.SALES_DATE  AS INPUT_DATE ");
            sb.AppendLine("  ,CONVERT(nvarchar,S.SALES_CD) AS INPUT_CD ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.SEQ) AS INPUT_SEQ ");
            sb.AppendLine("  ,CN.CUST_NM  ");
            sb.AppendLine("  ,N.ITEM_NM AS RAW_MAT_NM  ");
            sb.AppendLine("  ,N.LABEL_NM  ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,'' AS GRADE_NM ");
            sb.AppendLine("  ,ID.EXPRT_DATE  ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='1000' AND S_CODE = ID.FROZEN_GUBUN) AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,ID.A_UNION_CD AS UNION_CD  ");
            sb.AppendLine("  ,ID.A_UNION_CD  ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.TOTAL_AMT ) AS TOTAL_AMT ");
            sb.AppendLine("  ,0 AS LOSS_AMT ");
            sb.AppendLine("  FROM F_SALES S  ");
            sb.AppendLine("  left outer join F_SALES_DETAIL D  ");
            sb.AppendLine("  on D.SALES_DATE = S.SALES_DATE  ");
            sb.AppendLine("  and D.SALES_CD = S.SALES_CD  ");
            sb.AppendLine("  and D.PRODUCT_GUBUN = '2'  ");
            sb.AppendLine("  left outer join F_ITEM_INPUT_DETAIL ID  ");
            sb.AppendLine("  on D.INPUT_DATE = ID.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD = ID.INPUT_CD  ");
            sb.AppendLine("  and D.INPUT_SEQ = ID.SEQ  ");
            sb.AppendLine("  left outer join F_ITEM_INPUT II  ");
            sb.AppendLine("  on II.INPUT_DATE = ID.INPUT_DATE  ");
            sb.AppendLine("  and II.INPUT_CD = ID.INPUT_CD  ");
            sb.AppendLine("  left outer join N_ITEM_CODE N  ");
            sb.AppendLine("  on N.ITEM_CD = ID.ITEM_CD  ");
            sb.AppendLine("  left outer join N_CUST_CODE CN  ");
            sb.AppendLine("  on CN.CUST_CD = S.CUST_CD  ");
            sb.AppendLine("  where II.LOT_NO = '" + LotNo + "' ");



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_By_A_Union_cd(string AUnionCd)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select distinct ");
            sb.AppendLine(" A.A_UNION_CD ");
            sb.AppendLine(" ,B.LOT_NO ");
            sb.AppendLine("  FROM F_ITEM_INPUT_DETAIL A ");
            sb.AppendLine(" left outer join F_ITEM_INPUT B ");
            sb.AppendLine(" on A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine(" and A.INPUT_CD = B.INPUT_CD ");
            sb.AppendLine(" where A_UNION_CD = '" + AUnionCd + "' ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        internal DataTable fn_flow_trace_list_By_A_Union_cd_Detail(string AUnionCd)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select  ");
            sb.AppendLine(" B.INPUT_DATE ");
            sb.AppendLine(" ,B.INPUT_CD ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,N.ITEM_NM ");
            sb.AppendLine(" ,N.LABEL_NM ");
            sb.AppendLine(" ,A.EXPRT_DATE ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = A.FROZEN_GUBUN )AS FROZEN_GUBUN ");
            sb.AppendLine(" ,A.INPUT_AMT ");
            sb.AppendLine(" ,A.A_UNION_CD ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD) AS UNIT_NM ");
            sb.AppendLine(" ,B.LOT_NO ");
            sb.AppendLine("  FROM F_ITEM_INPUT_DETAIL A ");
            sb.AppendLine(" left outer join F_ITEM_INPUT B ");
            sb.AppendLine(" on A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine(" and A.INPUT_CD = B.INPUT_CD ");
            sb.AppendLine(" left outer join N_ITEM_CODE N ");
            sb.AppendLine(" on A.ITEM_CD = N.ITEM_CD ");
            sb.AppendLine(" where A_UNION_CD = '" + AUnionCd + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_By_Union_cd(string SrchValue)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" select distinct ");
            sb.AppendLine(" B.UNION_CD AS A_UNION_CD ");
            sb.AppendLine(" ,A.LOT_NO ");
            sb.AppendLine("  FROM F_RAW_OUTPUT A ");
            sb.AppendLine(" left outer join F_RAW_DETAIL B ");
            sb.AppendLine(" on A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine(" and A.INPUT_CD = B.INPUT_CD ");
            sb.AppendLine(" and A.INPUT_SEQ = B.SEQ ");
            sb.AppendLine(" where A.LOT_NO is not null and B.UNION_CD ='" + SrchValue + "' ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_flow_trace_list_By_Union_cd_Detail(string SrchValue)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" select  ");
            sb.AppendLine(" A.OUTPUT_DATE AS INPUT_DATE ");
            sb.AppendLine(" ,A.OUTPUT_CD AS INPUT_CD ");
            sb.AppendLine(" ,A.SEQ ");
            sb.AppendLine(" ,N.RAW_MAT_NM AS ITEM_NM ");
            sb.AppendLine(" ,N.LABEL_NM ");
            sb.AppendLine(" ,B.EXPRT_DATE ");
            sb.AppendLine(" ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = B.FROZEN_GUBUN )AS FROZEN_GUBUN ");
            sb.AppendLine(" ,A.OUTPUT_AMT AS INPUT_AMT ");
            sb.AppendLine(" ,B.UNION_CD AS A_UNION_CD ");
            sb.AppendLine(" ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = B.UNIT_CD) AS UNIT_NM ");
            sb.AppendLine(" ,A.LOT_NO ");
            sb.AppendLine("  FROM F_RAW_OUTPUT A ");
            sb.AppendLine(" left outer join F_RAW_DETAIL B ");
            sb.AppendLine(" on A.INPUT_DATE = B.INPUT_DATE ");
            sb.AppendLine(" and A.INPUT_CD = B.INPUT_CD ");
            sb.AppendLine(" and A.INPUT_SEQ = B.SEQ ");
            sb.AppendLine(" left outer join N_RAW_CODE N ");
            sb.AppendLine(" on A.RAW_MAT_CD = N.RAW_MAT_CD ");
            sb.AppendLine(" where A.LOT_NO is not null and B.UNION_CD ='" + SrchValue + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_sales_trace_list(string condition)
        {
            StringBuilder sb = new StringBuilder();

            //sb.AppendLine("    select    ");
            //sb.AppendLine("   '납품' AS GUBUN   ");
            //sb.AppendLine("   ,S.SALES_DATE  AS INPUT_DATE   ");
            //sb.AppendLine("   ,CONVERT(nvarchar,S.SALES_CD) AS INPUT_CD   ");
            //sb.AppendLine("   ,CONVERT(nvarchar,D.SEQ) AS INPUT_SEQ   ");
            //sb.AppendLine("   ,CN.CUST_NM    ");
            //sb.AppendLine("   ,N.RAW_MAT_NM AS RAW_MAT_NM    ");
            //sb.AppendLine("   ,N.LABEL_NM    ");
            //sb.AppendLine("   ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM   ");
            //sb.AppendLine("   ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM   ");
            //sb.AppendLine("   ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM   ");
            //sb.AppendLine("   ,'' AS GRADE_NM   ");
            //sb.AppendLine("   ,ID.EXPRT_DATE    ");
            //sb.AppendLine("   ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='1000' AND S_CODE = ID.FROZEN_GUBUN) AS FROZEN_GUBUN    ");
            //sb.AppendLine("   ,II.LOT_NO AS LOT_NO    ");
            //sb.AppendLine("   ,ID.UNION_CD    ");
            //sb.AppendLine("   ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.INPUT_UNIT) AS UNIT_NM    ");
            //sb.AppendLine("   ,CONVERT(nvarchar,D.TOTAL_AMT ) AS TOTAL_AMT   ");
            //sb.AppendLine("   ,CONVERT(nvarchar,D.TOTAL_PRICE ) AS TOTAL_PRICE   ");
            //sb.AppendLine("        , case when CN.TAX_CD = '1' and N.VAT_CD = '1'        ");
            //sb.AppendLine("         then ( (D.TOTAL_AMT * D.TOTAL_PRICE) - ROUND((D.TOTAL_AMT * D.TOTAL_PRICE)/1.1 ,0 ) )        ");
            //sb.AppendLine("         else (D.TOTAL_AMT * D.TOTAL_PRICE) end as TOTAL_SUPPLY_MONEY      ");
            //sb.AppendLine("         ,case when N.VAT_CD = '2'      ");
            //sb.AppendLine("         then 0     ");
            //sb.AppendLine("         else case when CN.TAX_CD = '0'  OR CN.TAX_CD = '2'       ");
            //sb.AppendLine("         then (D.TOTAL_AMT * D.TOTAL_PRICE)*0.1      ");
            //sb.AppendLine("         else ROUND((D.TOTAL_AMT * D.TOTAL_PRICE)/1.1 ,0 ) end end as TOTAL_TAX_MONEY      ");
            //sb.AppendLine("         ,case when N.VAT_CD = '1'     ");
            //sb.AppendLine("         then        ");
            //sb.AppendLine("   		case when CN.TAX_CD = '2'     ");
            //sb.AppendLine("   			then     ");
            //sb.AppendLine("   				(D.TOTAL_AMT*D.TOTAL_PRICE)        ");
            //sb.AppendLine("   			else        ");
            //sb.AppendLine("   				case when CN.TAX_CD ='1'      ");
            //sb.AppendLine("   				then (D.TOTAL_AMT*D.TOTAL_PRICE)       ");
            //sb.AppendLine("   				else (D.TOTAL_AMT*D.TOTAL_PRICE)+((D.TOTAL_AMT*D.TOTAL_PRICE)*0.1) end       ");
            //sb.AppendLine("   				end      ");
            //sb.AppendLine("         else (D.TOTAL_AMT * D.TOTAL_PRICE) end AS TOTAL_MONEY     ");
            //sb.AppendLine("   FROM F_SALES S    ");
            //sb.AppendLine("   left outer join F_SALES_DETAIL D    ");
            //sb.AppendLine("   on D.SALES_DATE = S.SALES_DATE    ");
            //sb.AppendLine("   and D.SALES_CD = S.SALES_CD    ");
            //sb.AppendLine("   left outer join F_RAW_DETAIL ID    ");
            //sb.AppendLine("   on D.INPUT_DATE = ID.INPUT_DATE    ");
            //sb.AppendLine("   and D.INPUT_CD = ID.INPUT_CD    ");
            //sb.AppendLine("   and D.INPUT_SEQ = ID.SEQ    ");
            //sb.AppendLine("   left outer join F_ITEM_INPUT II    ");
            //sb.AppendLine("   on II.INPUT_DATE = ID.INPUT_DATE    ");
            //sb.AppendLine("   and II.INPUT_CD = ID.INPUT_CD    ");
            //sb.AppendLine("   left outer join N_RAW_CODE N    ");
            //sb.AppendLine("   on N.RAW_MAT_CD = ID.RAW_MAT_CD    ");
            //sb.AppendLine("   left outer join N_CUST_CODE CN    ");
            //sb.AppendLine("   on CN.CUST_CD = S.CUST_CD    ");
            //sb.AppendLine(condition);
            //sb.AppendLine(" and D.PRODUCT_GUBUN = '1'   ");


            //sb.AppendLine(" union all ");


            sb.AppendLine("  select   ");
            sb.AppendLine("  '납품' AS GUBUN  ");
            sb.AppendLine("  ,S.SALES_DATE  AS INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,S.SALES_CD) AS INPUT_CD  ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.SEQ) AS INPUT_SEQ  ");
            sb.AppendLine("  ,CN.CUST_NM   ");
            sb.AppendLine("  ,N.ITEM_NM AS RAW_MAT_NM   ");
            sb.AppendLine("  ,N.LABEL_NM   ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM  ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM  ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM  ");
            sb.AppendLine("  ,'' AS GRADE_NM  ");
            sb.AppendLine("  ,ID.EXPRT_DATE   ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='1000' AND S_CODE = ID.FROZEN_GUBUN) AS FROZEN_GUBUN   ");
            sb.AppendLine("  ,II.LOT_NO AS LOT_NO   ");
            sb.AppendLine("  ,ID.A_UNION_CD   ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE UNIT_CD = N.UNIT_CD) AS UNIT_NM   ");
            sb.AppendLine("  ,CONVERT(nvarchar,ISNULL(D.TOTAL_AMT,0) ) AS TOTAL_AMT  ");
            sb.AppendLine("  ,CONVERT(nvarchar,ISNULL(D.TOTAL_PRICE,0) ) AS TOTAL_PRICE  ");
            sb.AppendLine("       ,ISNULL( case when CN.TAX_CD = '1' and N.VAT_CD = '1'       ");
            sb.AppendLine("        then ( (D.TOTAL_AMT * D.TOTAL_PRICE) - ROUND((D.TOTAL_AMT * D.TOTAL_PRICE)/1.1 ,0 ) )       ");
            sb.AppendLine("        else (D.TOTAL_AMT * D.TOTAL_PRICE) end ,0) as TOTAL_SUPPLY_MONEY     ");
            sb.AppendLine("        ,ISNULL( case when N.VAT_CD = '2'     ");
            sb.AppendLine("        then 0    ");
            sb.AppendLine("        else case when CN.TAX_CD = '0'  OR CN.TAX_CD = '2'      ");
            sb.AppendLine("        then (D.TOTAL_AMT * D.TOTAL_PRICE)*0.1     ");
            sb.AppendLine("        else ROUND((D.TOTAL_AMT * D.TOTAL_PRICE)/1.1 ,0 ) end end ,0) as TOTAL_TAX_MONEY     ");
            sb.AppendLine("        ,ISNULL( case when N.VAT_CD = '1'    ");
            sb.AppendLine("        then       ");
            sb.AppendLine("  		case when CN.TAX_CD = '2'    ");
            sb.AppendLine("  			then    ");
            sb.AppendLine("  				(D.TOTAL_AMT*D.TOTAL_PRICE)       ");
            sb.AppendLine("  			else       ");
            sb.AppendLine("  				case when CN.TAX_CD ='1'    ");
            sb.AppendLine("  				then (D.TOTAL_AMT*D.TOTAL_PRICE)      ");
            sb.AppendLine("  				else (D.TOTAL_AMT*D.TOTAL_PRICE)+((D.TOTAL_AMT*D.TOTAL_PRICE)*0.1) end      ");
            sb.AppendLine("  				end     ");
            sb.AppendLine("        else (D.TOTAL_AMT * D.TOTAL_PRICE) end ,0) AS TOTAL_MONEY    ");
            sb.AppendLine("  FROM F_SALES S   ");
            sb.AppendLine("  left outer join F_SALES_DETAIL D   ");
            sb.AppendLine("  on D.SALES_DATE = S.SALES_DATE   ");
            sb.AppendLine("  and D.SALES_CD = S.SALES_CD   ");
            sb.AppendLine("  and D.PRODUCT_GUBUN = '2'   ");
            sb.AppendLine("  left outer join F_ITEM_INPUT_DETAIL ID   ");
            sb.AppendLine("  on D.INPUT_DATE = ID.INPUT_DATE   ");
            sb.AppendLine("  and D.INPUT_CD = ID.INPUT_CD   ");
            sb.AppendLine("  and D.INPUT_SEQ = ID.SEQ   ");
            sb.AppendLine("  left outer join F_ITEM_INPUT II   ");
            sb.AppendLine("  on II.INPUT_DATE = ID.INPUT_DATE   ");
            sb.AppendLine("  and II.INPUT_CD = ID.INPUT_CD   ");
            sb.AppendLine("  left outer join N_ITEM_CODE N   ");
            sb.AppendLine("  on N.ITEM_CD = ID.ITEM_CD   ");
            sb.AppendLine("  left outer join N_CUST_CODE CN   ");
            sb.AppendLine("  on CN.CUST_CD = S.CUST_CD   ");
            sb.AppendLine(condition);
            sb.AppendLine(" and D.PRODUCT_GUBUN = '2'   ");
            sb.AppendLine(" order by S.SALES_DATE, S.SALES_CD, D.SEQ   ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_WorkDay_toip_list(string LotNo)
        {
            StringBuilder sb = new StringBuilder();



            sb.AppendLine("  select   ");
            sb.AppendLine("  '투입' AS GUBUN ");
            sb.AppendLine("  ,O.OUTPUT_DATE AS INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.OUTPUT_CD ) AS INPUT_CD ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.SEQ) AS INPUT_SEQ ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = RD.CUST_CD) AS CUST_NM ");
            sb.AppendLine("  ,N.RAW_MAT_NM  ");
            sb.AppendLine("  ,N.LABEL_NM  ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,ISNULL((SELECT GRADE_NM FROM N_GRADE_CODE WHERE D.GRADE_CD = GRADE_CD),'') AS GRADE_NM ");
            sb.AppendLine("  ,D.EXPRT_DATE  ");
            sb.AppendLine("  ,ISNULL((SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = D.FROZEN_GUBUN),'') AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,D.UNION_CD  ");
            sb.AppendLine("  ,'' AS A_UNION_CD ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE D.UNIT_CD = UNIT_CD) UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.OUTPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,O.LOSS_AMT  ");
            sb.AppendLine("  ,O.LOT_NO  ");
            sb.AppendLine("  from F_RAW_OUTPUT O  ");
            sb.AppendLine("  left outer join F_RAW_DETAIL D  ");
            sb.AppendLine("  on D.INPUT_DATE = O.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD= O.INPUT_CD  ");
            sb.AppendLine("  and D.SEQ= O.INPUT_SEQ  ");
            sb.AppendLine("   left outer join F_RAW_INPUT RD  ");
            sb.AppendLine("  on D.INPUT_DATE = RD.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD= RD.INPUT_CD  ");
            sb.AppendLine("  left outer join N_RAW_CODE N  ");
            sb.AppendLine("  on N.RAW_MAT_CD = D.RAW_MAT_CD  ");
            sb.AppendLine("  where O.LOT_NO like '" + LotNo + "%' ");




            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
        public DataTable fn_WorkDay_Made_list(string LotNo)
        {
            StringBuilder sb = new StringBuilder();




            sb.AppendLine("  select   ");
            sb.AppendLine("  '생산' AS GUBUN ");
            sb.AppendLine("  ,I.INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,I.INPUT_CD)  ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.SEQ) AS INPUT_SEQ ");
            sb.AppendLine("  ,'' AS CUST_NM ");
            sb.AppendLine("  ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine("  ,N.LABEL_NM  ");
            sb.AppendLine("  ,N.SPEC  ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,'' AS GRADE_NM ");
            sb.AppendLine("  ,D.EXPRT_DATE  ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = D.FROZEN_GUBUN) AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,D.B_UNION_CD AS UNION_CD  ");
            sb.AppendLine("  ,D.A_UNION_CD  ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.INPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,0 AS LOSS_AMT ");
            sb.AppendLine("  ,I.LOT_NO  ");
            sb.AppendLine("  FROM F_ITEM_INPUT I  ");
            sb.AppendLine("  left outer join F_ITEM_INPUT_DETAIL D  ");
            sb.AppendLine("  on I.INPUT_DATE = D.INPUT_DATE  ");
            sb.AppendLine("  and I.INPUT_CD = D.INPUT_CD  ");
            sb.AppendLine("  left outer join N_ITEM_CODE N  ");
            sb.AppendLine("  on N.ITEM_CD = D.ITEM_CD  ");
            sb.AppendLine("  where I.LOT_NO like '" + LotNo + "%' ");






            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_cust_Change_Balance_list(string condition)
        {
            StringBuilder sb = new StringBuilder();



            sb.AppendLine("  select   ");
            sb.AppendLine("  A.INPUT_DATE   ");
            sb.AppendLine("  ,A.INPUT_CD   ");
            sb.AppendLine("  ,A.AFTER_BALANCE   ");
            sb.AppendLine("  ,A.BEFORE_BALANCE   ");
            sb.AppendLine("  ,A.INTIME   ");
            sb.AppendLine("  ,A.INSTAFF   ");
            sb.AppendLine("  ,(SELECT STAFF_NM FROM N_STAFF_CODE WHERE STAFF_CD = A.INSTAFF) AS STAFF_NM  ");
            sb.AppendLine("  ,A.VALUE  ");
            sb.AppendLine("  FROM T_CUST_BALANCE_HIS A  ");
            sb.AppendLine("  WHERE 1=1  ");
            sb.AppendLine(condition);



            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_Cust_Balance(string input_date, string sCust_cd, string before_balance, string after_balance, string logic, string value)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                wnDm wDm = new wnDm();
                StringBuilder sb = new StringBuilder();

                sb.AppendLine("declare @SEQ  int ");
                sb.AppendLine("select @SEQ = ISNULL(MAX(INPUT_CD),0)+1 from T_CUST_BALANCE_HIS ");
                sb.AppendLine("where INPUT_DATE = '" + input_date + "' ");

                sb.AppendLine("insert into T_CUST_BALANCE_HIS(");
                sb.AppendLine("     INPUT_DATE ");
                sb.AppendLine("     ,INPUT_CD ");
                sb.AppendLine("     ,CUST_CD ");
                sb.AppendLine("     ,BEFORE_BALANCE ");
                sb.AppendLine("     ,AFTER_BALANCE ");
                sb.AppendLine("     ,VALUE ");
                sb.AppendLine("     ,INSTAFF ");
                sb.AppendLine("     ,INTIME ");
                sb.AppendLine(" ) values ( ");
                sb.AppendLine("      '" + input_date + "'  ");
                sb.AppendLine("     ,@SEQ ");
                sb.AppendLine("      ,'" + sCust_cd + "'  ");
                sb.AppendLine("      ," + before_balance.Replace(",", "") + "  ");
                sb.AppendLine("      ," + after_balance + "  ");
                sb.AppendLine("      ," + value + " ");
                sb.AppendLine("     ,'" + Common.p_strStaffNo + "' ");
                sb.AppendLine("     ,convert(varchar, getdate(), 120) ");
                sb.AppendLine(" ) ");


                sb.AppendLine("UPDATE N_CUST_CODE SET ");
                sb.AppendLine(" BALANCE = BALANCE + " + value + " ");
                sb.AppendLine(" WHERE CUST_CD = '" + sCust_cd + "'  ");


                bool isCustDay = wDm.isCustDayTotal(input_date, sCust_cd);

                if (!isCustDay)
                {
                    sb.AppendLine(wDm.Create_New_CustDayTotal(input_date, sCust_cd));
                }

                sb.AppendLine(" UPDATE T_CUST_DAY_TOTAL SET ");
                sb.AppendLine(" BALANCE_CHANGE = BALANCE_CHANGE + " + value + " ");
                sb.AppendLine(" WHERE INPUT_DATE ='" + input_date + "'  AND CUST_CD = '" + sCust_cd + "'  ");


                sb.AppendLine(wDm.CustDayTotal_Change_Balance_Today(input_date, sCust_cd));

                sb.AppendLine(wDm.CustDayTotal_Change_Balance(input_date, sCust_cd, value.Replace("-", ""), logic));


                SqlCommand sCommand = new SqlCommand(sb.ToString());


                int qResult = wAdo.SqlCommandEtc(sCommand, "insert_cust_balance");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }


        public bool isCustDayTotal(string inputDate, string cust_cd)
        {
            StringBuilder sb = new StringBuilder();



            sb.AppendLine("  select *  ");
            sb.AppendLine("  FROM T_CUST_DAY_TOTAL  ");
            sb.AppendLine("  WHERE INPUT_DATE ='" + inputDate + "' AND CUST_CD = '" + cust_cd + "'  ");


            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return false;
            }
            DataTable dt = wAdo.SqlCommandSelect(sCommand);
            if (dt != null && dt.Rows.Count > 0)
            {
                return true;
            }
            return false;
        }

        public string Create_New_CustDayTotal(string input_date, string Cust_cd)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("insert into T_CUST_DAY_TOTAL(");
            sb.AppendLine("     INPUT_DATE ");
            sb.AppendLine("     ,CUST_CD ");
            sb.AppendLine(" ) values ( ");
            sb.AppendLine("      '" + input_date + "'  ");
            sb.AppendLine("      ,'" + Cust_cd + "'  ");
            sb.AppendLine(" ) ");

            return sb.ToString();
        }

        public string CustDayTotal_Change_Balance_Today(string input_date, string Cust_cd)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  declare @lastBal int   ");
            sb.AppendLine("  select @lastBal = (select top 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + Cust_cd + "' and INPUT_DATE < '" + input_date + "' order by INPUT_DATE DESC)  ");

            sb.AppendLine("  update T_CUST_DAY_TOTAL SET  ");
            sb.AppendLine("   BALANCE_DAY = ISNULL(@lastBal,0) + S_TOTAL_MONEY   ");
            sb.AppendLine("  						- S_BACK_TOTAL_MONEY  ");
            sb.AppendLine("  						- COL_TOTAL_MONEY  ");
            sb.AppendLine("  						- P_TOTAL_MONEY  ");
            sb.AppendLine("  						+ P_BACK_TOTAL_MONEY  ");
            sb.AppendLine("  						+ PAY_TOTAL_MONEY  ");
            sb.AppendLine("  						+ BALANCE_CHANGE  ");

            sb.AppendLine("  ,S_RS_SUPPLY_MONEY = S_SUPPLY_MONEY - S_BACK_SUPPLY_MONEY  ");
            sb.AppendLine("  ,S_RS_TAX_MONEY = S_TAX_MONEY - S_BACK_TAX_MONEY  ");
            sb.AppendLine("  ,S_RS_TOTAL_MONEY = S_TOTAL_MONEY - S_BACK_TOTAL_MONEY  ");
            sb.AppendLine("  ,P_RS_SUPPLY_MONEY = P_SUPPLY_MONEY - P_BACK_SUPPLY_MONEY  ");
            sb.AppendLine("  ,P_RS_TAX_MONEY = P_TAX_MONEY - P_BACK_TAX_MONEY  ");
            sb.AppendLine("  ,P_RS_TOTAL_MONEY = P_TOTAL_MONEY - P_BACK_TOTAL_MONEY  ");
            sb.AppendLine("  WHERE CUST_CD = '" + Cust_cd + "' AND INPUT_DATE = '" + input_date + "'  ");

            return sb.ToString();
        }

        public string CustDayTotal_Change_Balance(string input_date, string Cust_cd, string amt, string Condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   update T_CUST_DAY_TOTAL SET ");
            sb.AppendLine("   BALANCE_DAY = BALANCE_DAY " + Condition + " " + amt + " ");
            sb.AppendLine("  WHERE CUST_CD = '" + Cust_cd + "' AND INPUT_DATE > '" + input_date + "'  ");

            return sb.ToString();
        }


        public DataTable fn_BuyList(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("   SELECT           ");
            sb.AppendLine("  A.BUY_DATE      ");
            sb.AppendLine("  ,A.BUY_CD       ");
            sb.AppendLine("  ,A.TAX_CD         ");
            sb.AppendLine("  ,A.BUY_GUBUN         ");
            sb.AppendLine("  ,F.COMMENT        ");
            sb.AppendLine("  ,A.CUST_CD        ");
            sb.AppendLine("  ,C.CUST_NM        ");
            sb.AppendLine("  ,C.BALANCE        ");
            sb.AppendLine("  ,D.ITEM_AMT       ");
            sb.AppendLine("  ,A.ALL_TOTAL_MONEY   ");
            sb.AppendLine("  ,A.ALL_SUPPLY_MONEY                      ");
            sb.AppendLine("  ,A.ALL_TAX_MONEY                    ");
            sb.AppendLine("  FROM F_BUY A                         ");
            sb.AppendLine("  left outer join N_CUST_CODE C          ");
            sb.AppendLine("  on A.CUST_CD = C.CUST_CD               ");
            sb.AppendLine("  left outer join (SELECT count(*) AS ITEM_AMT, BUY_DATE, BUY_CD FROM F_BUY_DETAIL GROUP BY BUY_DATE, BUY_CD ) D ");
            sb.AppendLine("  on A.BUY_DATE = D.BUY_DATE    ");
            sb.AppendLine("  and A.BUY_CD = D.BUY_CD      ");
            sb.AppendLine("  left outer join F_RAW_INPUT F      ");
            sb.AppendLine("  on A.INPUT_DATE = F.INPUT_DATE    ");
            sb.AppendLine("  and A.INPUT_CD = F.INPUT_CD    ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Buy_Detail_List(string condition)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  select   ");
            sb.AppendLine("  A.VAT_CD   ");
            sb.AppendLine("  ,A.BUY_DATE   ");
            sb.AppendLine("  ,A.BUY_CD   ");
            sb.AppendLine("  ,A.BUY_SEQ   ");
            sb.AppendLine("  ,A.INPUT_DATE   ");
            sb.AppendLine("  ,A.INPUT_CD   ");
            sb.AppendLine("  ,A.INPUT_SEQ   ");
            sb.AppendLine("  ,A.TOTAL_AMT   ");
            sb.AppendLine("  ,A.TOTAL_MONEY   ");
            sb.AppendLine("  ,B.FROZEN_GUBUN   ");
            sb.AppendLine("  ,B.EXPRT_DATE   ");
            sb.AppendLine("  ,B.RAW_MAT_CD AS PRODUCT_CD   ");
            sb.AppendLine("  ,(SELECT RAW_MAT_NM FROM N_RAW_CODE WHERE B.RAW_MAT_CD = RAW_MAT_CD) AS PRODUCT_NM   ");
            sb.AppendLine("  ,B.CHUGJONG_CD   ");
            sb.AppendLine("  ,B.CLASS_CD   ");
            sb.AppendLine("  ,B.COUNTRY_CD   ");
            sb.AppendLine("  ,B.TYPE_CD   ");
            sb.AppendLine("  ,C.LABEL_NM   ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE C.OUTPUT_UNIT = UNIT_CD) AS UNIT_NM   ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM   ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD) AS CLASS_NM   ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM   ");
            sb.AppendLine("  ,(SELECT TYPE_NM FROM N_TYPE_CODE WHERE C.TYPE_CD = TYPE_CD) AS TYPE_NM   ");
            sb.AppendLine("  ,B.UNION_CD    ");
            sb.AppendLine("  ,C.SPEC AS SPEC   ");
            sb.AppendLine("  FROM F_BUY_DETAIL A   ");
            sb.AppendLine("  LEFT OUTER JOIN F_RAW_DETAIL B  ");
            sb.AppendLine("  ON B.INPUT_DATE = A.INPUT_DATE   ");
            sb.AppendLine("  AND B.INPUT_CD = A.INPUT_CD   ");
            sb.AppendLine("  AND B.SEQ = A.INPUT_SEQ   ");
            sb.AppendLine("  LEFT OUTER JOIN N_RAW_CODE C  ");
            sb.AppendLine("  ON B.RAW_MAT_CD = C.RAW_MAT_CD   ");
            sb.AppendLine("  WHERE 1=1   ");
            sb.AppendLine(condition);

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable fn_Buy_Ledger_List(string start_date, string end_date, string cust_cd)
        {


            //condition = "    and Z.BUY_DATE >= '2019-12-16' and  Z.BUY_DATE <= '2020-01-16' and Z.CUST_CD = '01002'           ";

            StringBuilder sb2 = new StringBuilder();

            sb2.AppendLine("                 select             ");
            sb2.AppendLine("      			 Z.BUY_DATE AS BUY_DATE              ");
            sb2.AppendLine("      			 , SUM(A.TOTAL_AMT) AS  TOTAL_AMT             ");
            sb2.AppendLine("      			 , SUM(A.TOTAL_MONEY) AS  TOTAL_PRICE              ");
            sb2.AppendLine("      			 , AVG(Z.ALL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY            ");
            sb2.AppendLine("      			 , AVG(Z.ALL_TAX_MONEY) AS TOTAL_TAX_MONEY      ");
            sb2.AppendLine("      			 , AVG(Z.ALL_TOTAL_MONEY) AS TOTAL_MONEY           ");
            sb2.AppendLine("      			 , 0 AS GIVE_MONEY            ");
            sb2.AppendLine("      			 , 0 AS DC_MONEY            ");
            sb2.AppendLine("      			 , 0 AS TOTAL_GIVE_MONEY            ");
            sb2.AppendLine("      		 from F_BUY Z               ");
            sb2.AppendLine("      		 left outer join F_BUY_DETAIL A              ");
            sb2.AppendLine("      		 on Z.BUY_DATE = A.BUY_DATE             ");
            sb2.AppendLine("      			 and Z.BUY_CD = A.BUY_CD              ");
            sb2.AppendLine("      		 where 1=1          ");
            sb2.AppendLine("    and Z.BUY_DATE >= '" + start_date + "' and  Z.BUY_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'           ");
            sb2.AppendLine("      		 group by Z.BUY_DATE , Z.BUY_CD             ");

            sb2.AppendLine("      		 union all          ");

            sb2.AppendLine("    		 select             ");
            sb2.AppendLine("    			 Z.GIVE_DATE AS BUY_DATE              ");
            sb2.AppendLine("    			 , 0 AS  TOTAL_AMT               ");
            sb2.AppendLine("    			 , 0 AS  TOTAL_PRICE                ");
            sb2.AppendLine("    			 , 0 AS TOTAL_SUPPLY_MONEY                ");
            sb2.AppendLine("    			 , 0 AS TOTAL_TAX_MONEY              ");
            sb2.AppendLine("    			 , 0 AS TOTAL_MONEY             ");
            sb2.AppendLine("    			 ,AVG(ISNULL(GIVE_MONEY,0)) AS GIVE_MONEY             ");
            sb2.AppendLine("    			 ,AVG(ISNULL(DC_MONEY,0)) AS DC_MONEY             ");
            sb2.AppendLine("    			 ,AVG(ISNULL(TOTAL_MONEY,0)) AS TOTAL_GIVE_MONEY             ");
            sb2.AppendLine("    		 from F_GIVE Z              ");
            sb2.AppendLine("    		 where 1=1          ");
            sb2.AppendLine("    and Z.GIVE_DATE >= '" + start_date + "' and Z.GIVE_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'           ");
            sb2.AppendLine("    		 group by Z.GIVE_DATE , Z.GIVE_CD           ");


            StringBuilder sb = new StringBuilder();

            sb.AppendLine("              select '매입' as bun ");
            sb.AppendLine("             ,A.BUY_DATE           ");
            sb.AppendLine("             ,A.BUY_DATE AS 일자명칭                  ");
            sb.AppendLine("             ,A.BUY_CD             ");
            sb.AppendLine("             ,A.BUY_SEQ            ");
            sb.AppendLine("             ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1200' and Z.BUY_GUBUN = S_CODE ) AS INPUT_GUBUN ");
            sb.AppendLine("             ,Z.CUST_CD            ");
            sb.AppendLine("             ,C.CUST_NM            ");
            sb.AppendLine("             ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='220' and C.TAX_CD = S_CODE) AS TAX_NM            ");
            sb.AppendLine("             ,C.TAX_CD             ");
            sb.AppendLine("             ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE ='410' and B.VAT_CD = S_CODE) AS VAT_NM            ");
            sb.AppendLine("             ,B.VAT_CD             ");
            sb.AppendLine("             ,B.RAW_MAT_NM AS PRODUCT_NM              ");
            sb.AppendLine("             , ISNULL(A.TOTAL_AMT,0) AS TOTAL_AMT     ");
            sb.AppendLine("             , ISNULL(A.TOTAL_MONEY,0) AS TOTAL_PRICE ");
            sb.AppendLine("             , case when C.TAX_CD = '1' and B.VAT_CD = '1'               ");
            sb.AppendLine("              then ( (A.TOTAL_MONEY) - ROUND((A.TOTAL_MONEY)/1.1 ,0 ) )  ");
            sb.AppendLine("              else (A.TOTAL_MONEY) end as TOTAL_SUPPLY_MONEY             ");
            sb.AppendLine("              ,case when B.VAT_CD = '2'               ");
            sb.AppendLine("              then 0               ");
            sb.AppendLine("              else case when C.TAX_CD = '0'  OR C.TAX_CD = '2'           ");
            sb.AppendLine("              then (A.TOTAL_MONEY)*0.1                ");
            sb.AppendLine("              else ROUND((A.TOTAL_MONEY)/1.1 ,0 ) end end as TOTAL_TAX_MONEY                ");
            sb.AppendLine("              ,case when B.VAT_CD = '1'               ");
            sb.AppendLine("              then                 ");
            sb.AppendLine("        		case when C.TAX_CD = '2'                 ");
            sb.AppendLine("        			then              ");
            sb.AppendLine("        				(A.TOTAL_MONEY)                  ");
            sb.AppendLine("        			else              ");
            sb.AppendLine("        				case when C.TAX_CD ='1'          ");
            sb.AppendLine("        				then (A.TOTAL_MONEY)             ");
            sb.AppendLine("        				else (A.TOTAL_MONEY)+((A.TOTAL_MONEY)*0.1) end      ");
            sb.AppendLine("        				end           ");
            sb.AppendLine("              else (A.TOTAL_MONEY) end AS TOTAL_MONEY ");
            sb.AppendLine("             ,0			   AS GIVE_MONEY             ");
            sb.AppendLine("             ,0			   AS DC_MONEY               ");
            sb.AppendLine("             ,0			   AS TOTAL_GIVE_MONEY       ");
            sb.AppendLine("             ,0			   AS BALANCE                ");
            sb.AppendLine("             , (SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE B.CHUGJONG_CD = CHUGJONG_CD ) AS CHUGJONG_NM    ");
            sb.AppendLine("             , (SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE B.CLASS_CD = CLASS_CD ) AS CLASS_NM              ");
            sb.AppendLine("             , (SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE B.COUNTRY_CD = COUNTRY_CD ) AS COUNTRY_NM     ");
            sb.AppendLine("             , B.LABEL_NM          ");
            sb.AppendLine("             , D.UNION_CD          ");
            sb.AppendLine("         from F_BUY Z              ");
            sb.AppendLine("         left outer join F_BUY_DETAIL A               ");
            sb.AppendLine("         on Z.BUY_DATE = A.BUY_DATE");
            sb.AppendLine("             and Z.BUY_CD = A.BUY_CD                  ");
            sb.AppendLine("         left outer join N_CUST_CODE C                ");
            sb.AppendLine("         on Z.CUST_CD = C.CUST_CD  ");
            sb.AppendLine("         left outer join F_RAW_DETAIL D               ");
            sb.AppendLine("         on D.INPUT_DATE = A.INPUT_DATE               ");
            sb.AppendLine("         and D.INPUT_CD = A.INPUT_CD                  ");
            sb.AppendLine("         and D.SEQ = A.INPUT_SEQ   ");
            sb.AppendLine("         left outer join N_RAW_CODE B                 ");
            sb.AppendLine("         on D.RAW_MAT_CD = B.RAW_MAT_CD               ");
            sb.AppendLine("         where 1=1                 ");
            sb.AppendLine("      and Z.BUY_DATE >= '" + start_date + "' and  Z.BUY_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'");

            sb.AppendLine("        union all   ");

            sb.AppendLine("        SELECT   ");
            sb.AppendLine("        '' as bun  ");
            sb.AppendLine("        	 ,BUY_DATE                ");
            sb.AppendLine("             ,'--- 일계 ---' AS 일자명칭              ");
            sb.AppendLine("             ,'999999' AS INPUT_CD ");
            sb.AppendLine("             ,'' AS SEQ            ");
            sb.AppendLine("             ,'' AS INPUT_GUBUN    ");
            sb.AppendLine("             ,'' AS CUST_CD        ");
            sb.AppendLine("             ,'' AS CUST_NM        ");
            sb.AppendLine("             ,'' AS TAX_CD         ");
            sb.AppendLine("             ,'' AS TAX_NM         ");
            sb.AppendLine("             ,'' AS VAT_CD         ");
            sb.AppendLine("             ,'' AS VAT_NM         ");
            sb.AppendLine("             ,'' AS  PRODUCT_NM    ");
            sb.AppendLine("             ,sum(TOTAL_AMT) AS  TOTAL_AMT            ");
            sb.AppendLine("             ,0 AS  TOTAL_PRICE    ");
            sb.AppendLine("        	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY               ");
            sb.AppendLine("        	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY  ");
            sb.AppendLine("        	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY          ");
            sb.AppendLine("        	   ,sum(GIVE_MONEY) AS GIVE_MONEY            ");
            sb.AppendLine("        	   ,sum(DC_MONEY) AS DC_MONEY                ");
            sb.AppendLine("        	   ,sum(TOTAL_GIVE_MONEY) AS TOTAL_GIVE_MONEY");
            sb.AppendLine("        	   ,ISNULL((SELECT BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE = BUY_DATE),0) AS BALANCE   ");
            sb.AppendLine("             ,'' AS  CHUGJONG_NM   ");
            sb.AppendLine("             ,'' AS  CLASS_NM      ");
            sb.AppendLine("             ,'' AS  COUNTRY_NM    ");
            sb.AppendLine("             ,'' AS  LABEL_NM      ");
            sb.AppendLine("             ,'' AS  UNION_CD      ");
            sb.AppendLine("        		 FROM ( " + sb2.ToString());
            sb.AppendLine("      	) A group by A.BUY_DATE   ");
            sb.AppendLine("        union all");
            sb.AppendLine("        SELECT   ");
            sb.AppendLine("        '' as bun");
            sb.AppendLine("        	 ,left(BUY_DATE,8)+'99' AS BUY_DATE          ");
            sb.AppendLine("             ,'=== 월계 ===' AS 일자명칭              ");
            sb.AppendLine("             ,'999999' AS INPUT_CD ");
            sb.AppendLine("             ,'' AS SEQ            ");
            sb.AppendLine("             ,'' AS INPUT_GUBUN    ");
            sb.AppendLine("             ,'' AS CUST_CD        ");
            sb.AppendLine("             ,'' AS CUST_NM        ");
            sb.AppendLine("             ,'' AS TAX_CD         ");
            sb.AppendLine("             ,'' AS TAX_NM         ");
            sb.AppendLine("             ,'' AS VAT_CD         ");
            sb.AppendLine("             ,'' AS VAT_NM         ");
            sb.AppendLine("             ,'' AS  PRODUCT_NM    ");
            sb.AppendLine("              ,sum(TOTAL_AMT) AS  TOTAL_AMT           ");
            sb.AppendLine("              ,0 AS  TOTAL_PRICE   ");
            sb.AppendLine("        	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY               ");
            sb.AppendLine("        	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY  ");
            sb.AppendLine("        	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY          ");
            sb.AppendLine("        	   ,sum(GIVE_MONEY) AS GIVE_MONEY            ");
            sb.AppendLine("        	   ,sum(DC_MONEY) AS DC_MONEY                ");
            sb.AppendLine("        	   ,sum(TOTAL_GIVE_MONEY) AS TOTAL_GIVE_MONEY");
            sb.AppendLine("        	   ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= MAX(BUY_DATE)  order by INPUT_DATE DESC),0) AS BALANCE   ");
            sb.AppendLine("             ,'' AS  CHUGJONG_NM   ");
            sb.AppendLine("             ,'' AS  CLASS_NM      ");
            sb.AppendLine("             ,'' AS  COUNTRY_NM    ");
            sb.AppendLine("             ,'' AS  LABEL_NM      ");
            sb.AppendLine("             ,'' AS  UNION_CD      ");
            sb.AppendLine("        		 FROM ( " + sb2.ToString());
            sb.AppendLine("         ) A group by left(A.BUY_DATE,8)              ");
            sb.AppendLine("        union all");
            sb.AppendLine("        SELECT   ");
            sb.AppendLine("        '' as bun");
            sb.AppendLine("        	 ,left(BUY_DATE,2)+'99-99-99' AS BUY_DATE    ");
            sb.AppendLine("             ,'=== 합계 ===' AS 일자명칭              ");
            sb.AppendLine("             ,'999999' AS INPUT_CD ");
            sb.AppendLine("             ,'' AS SEQ            ");
            sb.AppendLine("             ,'' AS INPUT_GUBUN    ");
            sb.AppendLine("             ,'' AS CUST_CD        ");
            sb.AppendLine("             ,'' AS CUST_NM        ");
            sb.AppendLine("             ,'' AS TAX_CD         ");
            sb.AppendLine("             ,'' AS TAX_NM         ");
            sb.AppendLine("             ,'' AS VAT_CD         ");
            sb.AppendLine("             ,'' AS VAT_NM         ");
            sb.AppendLine("             ,'' AS  PRODUCT_NM    ");
            sb.AppendLine("             ,sum(TOTAL_AMT) AS  TOTAL_AMT            ");
            sb.AppendLine("             ,0 AS  TOTAL_PRICE    ");
            sb.AppendLine("        	   ,sum(TOTAL_SUPPLY_MONEY) AS TOTAL_SUPPLY_MONEY               ");
            sb.AppendLine("        	   ,sum(TOTAL_TAX_MONEY) AS TOTAL_TAX_MONEY  ");
            sb.AppendLine("        	   ,sum(TOTAL_MONEY) AS TOTAL_MONEY          ");
            sb.AppendLine("        	   ,sum(GIVE_MONEY) AS GIVE_MONEY            ");
            sb.AppendLine("        	   ,sum(DC_MONEY) AS DC_MONEY                ");
            sb.AppendLine("        	   ,sum(TOTAL_GIVE_MONEY) AS TOTAL_GIVE_MONEY");
            sb.AppendLine("        	   ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= MAX(BUY_DATE)  order by INPUT_DATE DESC),0) AS BALANCE   ");
            sb.AppendLine("             ,'' AS  CHUGJONG_NM   ");
            sb.AppendLine("             ,'' AS  CLASS_NM      ");
            sb.AppendLine("             ,'' AS  COUNTRY_NM    ");
            sb.AppendLine("             ,'' AS  LABEL_NM      ");
            sb.AppendLine("             ,'' AS  UNION_CD      ");
            sb.AppendLine("         FROM (  " + sb2.ToString());
            sb.AppendLine("         ) A group by left(A.BUY_DATE,2)              ");
            sb.AppendLine("        union all");
            sb.AppendLine("        select   ");
            sb.AppendLine("        	 '지급' as bun            ");
            sb.AppendLine("        	 ,GIVE_DATE AS BUY_DATE   ");
            sb.AppendLine("             ,GIVE_DATE AS 일자명칭");
            sb.AppendLine("             ,GIVE_CD AS INPUT_CD  ");
            sb.AppendLine("             ,GIVE_CD AS SEQ       ");
            sb.AppendLine("             ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '910' and GIVE_GUBUN = S_CODE) AS INPUT_GUBUN    ");
            sb.AppendLine("             ,'' AS CUST_CD        ");
            sb.AppendLine("             ,'' AS CUST_NM        ");
            sb.AppendLine("             ,'' AS TAX_CD         ");
            sb.AppendLine("             ,'' AS TAX_NM         ");
            sb.AppendLine("             ,'' AS VAT_CD금       ");
            sb.AppendLine("             ,'' AS VAT_NM         ");
            sb.AppendLine("             ,'' AS  PRODUCT_NM    ");
            sb.AppendLine("             , 0 AS  TOTAL_AMT     ");
            sb.AppendLine("             , 0 AS  TOTAL_PRICE   ");
            sb.AppendLine("        	   , 0 AS TOTAL_SUPPLY_MONEY                 ");
            sb.AppendLine("        	   , 0 AS TOTAL_TAX_MONEY ");
            sb.AppendLine("        	   , 0 AS TOTAL_MONEY     ");
            sb.AppendLine("        	   , GIVE_MONEY AS GIVE_MONEY                ");
            sb.AppendLine("        	   , DC_MONEY AS DC_MONEY ");
            sb.AppendLine("        	   , TOTAL_MONEY AS TOTAL_GIVE_MONEY         ");
            sb.AppendLine("              ,0 AS BALANCE        ");
            sb.AppendLine("             , '' AS  CHUGJONG_NM  ");
            sb.AppendLine("             , '' AS  CLASS_NM     ");
            sb.AppendLine("             , '' AS  COUNTRY_NM   ");
            sb.AppendLine("             , '' AS  LABEL_NM     ");
            sb.AppendLine("             , '' AS  UNION_CD     ");
            sb.AppendLine("         from F_GIVE Z             ");
            sb.AppendLine("        where 1=1");
            sb.AppendLine("      and Z.GIVE_DATE >= '" + start_date + "' and Z.GIVE_DATE <= '" + end_date + "' and Z.CUST_CD = '" + cust_cd + "'                 ");
            sb.AppendLine("        union all");
            sb.AppendLine("        select  top 1              ");
            sb.AppendLine("        	 '' as bun                ");
            sb.AppendLine("        	 ,'0000-00-00' AS BUY_DATE");
            sb.AppendLine("             ,'== 전잔고 ==' AS 일자명칭              ");
            sb.AppendLine("             ,'' AS INPUT_CD       ");
            sb.AppendLine("             ,'' AS SEQ            ");
            sb.AppendLine("             ,'' AS INPUT_GUBUN    ");
            sb.AppendLine("             ,'' AS CUST_CD        ");
            sb.AppendLine("             ,'' AS CUST_NM        ");
            sb.AppendLine("             ,'' AS TAX_CD         ");
            sb.AppendLine("             ,'' AS TAX_NM         ");
            sb.AppendLine("             ,'' AS VAT_CD금       ");
            sb.AppendLine("             ,'' AS VAT_NM         ");
            sb.AppendLine("             ,'' AS  PRODUCT_NM    ");
            sb.AppendLine("             , 0 AS  TOTAL_AMT     ");
            sb.AppendLine("             , 0 AS  TOTAL_PRICE   ");
            sb.AppendLine("        	   , 0 AS TOTAL_SUPPLY_MONEY                 ");
            sb.AppendLine("        	   , 0 AS TOTAL_TAX_MONEY ");
            sb.AppendLine("        	   , 0 AS TOTAL_MONEY     ");
            sb.AppendLine("        	   , 0 AS GIVE_MONEY      ");
            sb.AppendLine("        	   , 0 AS DC_MONEY        ");
            sb.AppendLine("        	   , 0 AS TOTAL_GIVE_MONEY");
            sb.AppendLine("             ,ISNULL((SELECT TOP 1 BALANCE_DAY FROM T_CUST_DAY_TOTAL WHERE CUST_CD = '" + cust_cd + "' AND INPUT_DATE <= '" + start_date + "' ORDER BY INPUT_DATE DESC),0) AS BALANCE    ");
            sb.AppendLine("             , '' AS  CHUGJONG_NM  ");
            sb.AppendLine("             , '' AS  CLASS_NM     ");
            sb.AppendLine("             , '' AS  COUNTRY_NM   ");
            sb.AppendLine("             , '' AS  LABEL_NM     ");
            sb.AppendLine("             , '' AS  UNION_CD     ");
            sb.AppendLine("         order by A.BUY_DATE, A.BUY_CD, A.BUY_SEQ     ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }
            return wAdo.SqlCommandSelect(sCommand);
        }



        public DataTable fn_WorkDay_toip_todaylist(string today)
        {
            StringBuilder sb = new StringBuilder();



            sb.AppendLine("  select   ");
            sb.AppendLine("  '투입' AS GUBUN ");
            sb.AppendLine("  ,O.OUTPUT_DATE AS INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.OUTPUT_CD ) AS INPUT_CD ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.SEQ) AS INPUT_SEQ ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM N_CUST_CODE WHERE CUST_CD = RD.CUST_CD) AS CUST_NM ");
            sb.AppendLine("  ,N.RAW_MAT_NM  ");
            sb.AppendLine("  ,N.LABEL_NM  ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,ISNULL((SELECT GRADE_NM FROM N_GRADE_CODE WHERE D.GRADE_CD = GRADE_CD),'') AS GRADE_NM ");
            sb.AppendLine("  ,D.EXPRT_DATE  ");
            sb.AppendLine("  ,ISNULL((SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = D.FROZEN_GUBUN),'') AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,D.UNION_CD  ");
            sb.AppendLine("  ,'' AS A_UNION_CD ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE D.UNIT_CD = UNIT_CD) UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,O.OUTPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,O.LOSS_AMT  ");
            sb.AppendLine("  ,O.LOT_NO  ");
            sb.AppendLine("  from F_RAW_OUTPUT O  ");
            sb.AppendLine("  left outer join F_RAW_DETAIL D  ");
            sb.AppendLine("  on D.INPUT_DATE = O.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD= O.INPUT_CD  ");
            sb.AppendLine("  and D.SEQ= O.INPUT_SEQ  ");
            sb.AppendLine("   left outer join F_RAW_INPUT RD  ");
            sb.AppendLine("  on D.INPUT_DATE = RD.INPUT_DATE  ");
            sb.AppendLine("  and D.INPUT_CD= RD.INPUT_CD  ");
            sb.AppendLine("  left outer join N_RAW_CODE N  ");
            sb.AppendLine("  on N.RAW_MAT_CD = D.RAW_MAT_CD  ");
            sb.AppendLine("  where O.OUTPUT_DATE = '" + today + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }


        public DataTable fn_WorkDay_Made_todaylist(string today)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("  select   ");
            sb.AppendLine("  '생산' AS GUBUN ");
            sb.AppendLine("  ,I.INPUT_DATE  ");
            sb.AppendLine("  ,CONVERT(nvarchar,I.INPUT_CD)  ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.SEQ) AS INPUT_SEQ ");
            sb.AppendLine("  ,'' AS CUST_NM ");
            sb.AppendLine("  ,N.ITEM_NM AS RAW_MAT_NM ");
            sb.AppendLine("  ,N.LABEL_NM  ");
            sb.AppendLine("  ,N.SPEC  ");
            sb.AppendLine("  ,(SELECT CHUGJONG_NM FROM N_CHUGJONG_CODE WHERE N.CHUGJONG_CD = CHUGJONG_CD) AS CHUGJONG_NM ");
            sb.AppendLine("  ,(SELECT COUNTRY_NM FROM N_RAW_COUNTRY_CODE WHERE N.COUNTRY_CD = COUNTRY_CD) AS COUNTRY_NM ");
            sb.AppendLine("  ,(SELECT CLASS_NM FROM N_MEAT_CLASS_CODE WHERE N.CLASS_CD = CLASS_CD) AS CLASS_NM ");
            sb.AppendLine("  ,'' AS GRADE_NM ");
            sb.AppendLine("  ,D.EXPRT_DATE  ");
            sb.AppendLine("  ,(SELECT S_CODE_NM FROM T_S_CODE WHERE L_CODE = '1000' AND S_CODE = D.FROZEN_GUBUN) AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,D.B_UNION_CD AS UNION_CD  ");
            sb.AppendLine("  ,D.A_UNION_CD  ");
            sb.AppendLine("  ,(SELECT UNIT_NM FROM N_UNIT_CODE WHERE N.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,CONVERT(nvarchar,D.INPUT_AMT) AS TOTAL_AMT ");
            sb.AppendLine("  ,0 AS LOSS_AMT ");
            sb.AppendLine("  ,I.LOT_NO  ");
            sb.AppendLine("  FROM F_ITEM_INPUT I  ");
            sb.AppendLine("  left outer join F_ITEM_INPUT_DETAIL D  ");
            sb.AppendLine("  on I.INPUT_DATE = D.INPUT_DATE  ");
            sb.AppendLine("  and I.INPUT_CD = D.INPUT_CD  ");
            sb.AppendLine("  left outer join N_ITEM_CODE N  ");
            sb.AppendLine("  on N.ITEM_CD = D.ITEM_CD  ");
            sb.AppendLine("  where I.INPUT_DATE = '" + today + "' ");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable notice_Exprtdate() //2020-01-13 문세진 유통기한 메서드
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(" SELECT * FROM (  ");
            sb.AppendLine("  SELECT NO = '' ");
            sb.AppendLine("  ,A.INPUT_DATE   ");
            sb.AppendLine("  ,C.RAW_MAT_NM   ");
            sb.AppendLine("  ,A.EXPRT_DATE  ");
            sb.AppendLine("  ,A.TOTAL_AMT  ");
            sb.AppendLine(",(SELECT UNIT_NM FROM N_UNIT_CODE WHERE A.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM  N_CUST_CODE WHERE B.CUST_CD = CUST_CD) AS CUST_NM  ");
            sb.AppendLine("  FROM F_RAW_DETAIL A  ");
            sb.AppendLine("  LEFT OUTER JOIN F_RAW_INPUT B  ");
            sb.AppendLine("  ON A.INPUT_DATE = B.INPUT_DATE AND A.INPUT_CD = B.INPUT_CD  ");
            sb.AppendLine("  LEFT OUTER JOIN N_RAW_CODE C  ");
            sb.AppendLine("  ON A.RAW_MAT_CD = C.RAW_MAT_CD  ");
            sb.AppendLine("  WHERE A.EXPRT_DATE <= GETDATE() + 60 AND A.FROZEN_GUBUN = 'F' AND C.RAW_MAT_GUBUN = 1  ");

            sb.AppendLine("  UNION ALL  ");

            sb.AppendLine("  SELECT NO = '' ");
            sb.AppendLine("  ,A.INPUT_DATE   ");
            sb.AppendLine("  ,C.RAW_MAT_NM   ");
            sb.AppendLine("  ,A.EXPRT_DATE  ");
            sb.AppendLine("  ,A.TOTAL_AMT  ");
            sb.AppendLine(",(SELECT UNIT_NM FROM N_UNIT_CODE WHERE A.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_GUBUN  ");
            sb.AppendLine("  ,(SELECT CUST_NM FROM  N_CUST_CODE WHERE B.CUST_CD = CUST_CD) AS CUST_NM  ");
            sb.AppendLine("  FROM F_RAW_DETAIL A  ");
            sb.AppendLine("  LEFT OUTER JOIN F_RAW_INPUT B  ");
            sb.AppendLine("  ON A.INPUT_DATE = B.INPUT_DATE AND A.INPUT_CD = B.INPUT_CD  ");
            sb.AppendLine("  LEFT OUTER JOIN N_RAW_CODE C  ");
            sb.AppendLine("  ON A.RAW_MAT_CD = C.RAW_MAT_CD");
            sb.AppendLine("  WHERE A.EXPRT_DATE <= GETDATE() + 10 AND A.FROZEN_GUBUN = 'NF'  AND C.RAW_MAT_GUBUN = 1  ");

            sb.AppendLine("  UNION ALL  ");

            sb.AppendLine("  SELECT NO = '' ");
            sb.AppendLine("  ,A.INPUT_DATE   ");
            sb.AppendLine("  ,C.RAW_MAT_NM   ");
            sb.AppendLine("  ,A.EXPRT_DATE  ");
            sb.AppendLine("  ,A.TOTAL_AMT  ");
            sb.AppendLine(",(SELECT UNIT_NM FROM N_UNIT_CODE WHERE A.UNIT_CD = UNIT_CD) AS UNIT_NM  ");
            sb.AppendLine("  ,(SELECT FROZEN_NM FROM N_FROZEN_CODE WHERE A.FROZEN_GUBUN = FROZEN_CD) AS FROZEN_GUBUN  ");
            sb.AppendLine(",(SELECT CUST_NM FROM  N_CUST_CODE WHERE B.CUST_CD = CUST_CD) AS CUST_NM  ");
            sb.AppendLine("  FROM F_RAW_DETAIL A  ");
            sb.AppendLine("  LEFT OUTER JOIN F_RAW_INPUT B  ");
            sb.AppendLine("  ON A.INPUT_DATE = B.INPUT_DATE AND A.INPUT_CD = B.INPUT_CD  ");
            sb.AppendLine("  LEFT OUTER JOIN N_RAW_CODE C  ");
            sb.AppendLine("  ON A.RAW_MAT_CD = C.RAW_MAT_CD");
            sb.AppendLine("  WHERE A.EXPRT_DATE <= GETDATE() + 10 AND C.RAW_MAT_GUBUN = 2  ");
            sb.AppendLine("  ) A ORDER BY A.INPUT_DATE");

            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public int insert_Schedule(string date, string title, string contents) //2020-01-14 문세진 스케쥴 관리 메서드
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                SqlCommand sCommand = new SqlCommand(sb.ToString());
                wnAdo wAdo = new wnAdo();
                sb.AppendLine("SELECT * FROM N_SCHEDULE ");
                sb.AppendLine("WHERE DATE = '" + date + "' ");
                sCommand = new SqlCommand(sb.ToString());
                DataTable dt = wAdo.SqlCommandSelect(sCommand);
                if (dt.Rows.Count == 0)
                {
                    sb.Clear();
                    sb.AppendLine(" INSERT INTO N_SCHEDULE (");
                    sb.AppendLine("        DATE ");
                    sb.AppendLine("       ,TITLE ");
                    sb.AppendLine("       ,CONTENTS ");
                    sb.AppendLine("      ) VALUES ( ");
                    sb.AppendLine("        @DATE ");
                    sb.AppendLine("        ,@TITLE ");
                    sb.AppendLine("       ,@CONTENTS ");
                    sb.AppendLine(" ) ");
                    sCommand = new SqlCommand(sb.ToString());
                    sCommand.Parameters.AddWithValue("@DATE", date);
                    sCommand.Parameters.AddWithValue("@TITLE", title);
                    sCommand.Parameters.AddWithValue("@CONTENTS", contents);
                    int qResult = wAdo.SqlCommandEtc(sCommand, "insert_SCHEDULE_TB");
                    if (qResult > 0)
                    {
                        return 0;  // 0 true, 1 false
                    }
                    else return 1;

                }
                else
                {
                    sb.Clear();
                    sb.AppendLine("UPDATE N_SCHEDULE ");
                    sb.AppendLine("   SET TITLE = '" + title + "'");
                    sb.AppendLine("      ,CONTENTS = '" + contents + "'");
                    sb.AppendLine("WHERE  DATE = '" + date + "'");

                    sCommand = new SqlCommand(sb.ToString());
                    int qResult = wAdo.SqlCommandEtc(sCommand, "update_USER_TB");
                    if (qResult > 0)
                    {
                        return 0;  // 0 true, 1 false
                    }
                    else return 1;
                }
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public int deleteSchdule(string date)
        {
            try
            {
                wnAdo wAdo = new wnAdo();
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(" DELETE N_SCHEDULE ");
                sb.AppendLine(" WHERE DATE = '" + date + "'");
                SqlCommand sCommand = new SqlCommand(sb.ToString());

                int qResult = wAdo.SqlCommandEtc(sCommand, "delete_SCHEDULE_TB");
                if (qResult > 0)
                {
                    return 0;  // 0 true, 1 false
                }
                else return 1;
            }
            catch (Exception e)
            {
                wnLog.writeLog(wnLog.LOG_ERROR, e.Message + " - " + e.ToString());
                return 9;
            }
        }

        public DataTable getSchedule() //2020-01-14 문세진 스케쥴 관리 메서드
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  SELECT DATE , TITLE FROM N_SCHEDULE   ");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }

        public DataTable getSchedule(string date) //2020-01-14 문세진 스케쥴 관리 메서드
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("  SELECT * FROM N_SCHEDULE   ");
            sb.AppendLine("  WHERE DATE = '" + date + "'");
            SqlCommand sCommand = new SqlCommand(sb.ToString());
            if (sCommand.CommandText.Equals(null))
            {
                wnLog.writeLog(wnLog.LOG_ERROR, wnLog.LOGSTRING_NO_QUERY);
                return null;
            }

            return wAdo.SqlCommandSelect(sCommand);
        }
    }

}
